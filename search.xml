<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/07/04/MeterSphere%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2021/07/04/MeterSphere%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MeterSphere使用入门（一）"><a href="#MeterSphere使用入门（一）" class="headerlink" title="MeterSphere使用入门（一）"></a>MeterSphere使用入门（一）</h1><h2 id="测试跟踪"><a href="#测试跟踪" class="headerlink" title="测试跟踪"></a>测试跟踪</h2><h3 id="1、导入测试用例"><a href="#1、导入测试用例" class="headerlink" title="1、导入测试用例"></a>1、导入测试用例</h3><p>选中项目，导入测试用例有两种方式：导入表格和导入思维导图</p><p>可下载模板，编辑好测试用例后上传文件。导入新建会添加至原测试用例后，导入更新会将相同ID的用例更新为最新的状态。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/96ce8e0b2a7a026a5f406d3a75c8d0788466760c/source/img/MeterSphere/1.png"></p><h3 id="2、创建用例评审"><a href="#2、创建用例评审" class="headerlink" title="2、创建用例评审"></a>2、创建用例评审</h3><h4 id="2-1-创建用例评审"><a href="#2-1-创建用例评审" class="headerlink" title="2.1 创建用例评审"></a>2.1 创建用例评审</h4><p>选中用例评审，点击左侧创建用例评审，会有创建用例评审弹框，输入评审名称、标签、截止时间、评审人可多选。点击确定。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/96ce8e0b2a7a026a5f406d3a75c8d0788466760c/source/img/MeterSphere/2.png"></p><h4 id="2-2-关联评审用例"><a href="#2-2-关联评审用例" class="headerlink" title="2.2  关联评审用例"></a>2.2  关联评审用例</h4><p>点击操作中的编辑图标按钮，可编辑用例评审的状态，修改用例评审的编辑内容。</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/MeterSphere/3.png?raw=true"></p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/MeterSphere/4.png?raw=true"></p><p>点击规划&amp;执行，弹出关联评审用例。点击关联测试用例，选择要评审的项目，勾选测试用例，点击确定。</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/MeterSphere/5.png?raw=true"></p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\6.png"></p><p>点击操作栏中编辑按钮或上方开始评审，进行用例评审。可选择评审状态，编辑评论内容。</p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\7.png"></p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\8.png"></p><h3 id="3、创建测试计划"><a href="#3、创建测试计划" class="headerlink" title="3、创建测试计划"></a>3、创建测试计划</h3><p>点击测试计划，再点击创建测试计划。</p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\9.png"></p><p>点击操作栏中编辑框可关联测试用例，查看按钮可查看测试计划报告，可设置定时任务，删除关联用例。</p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\12.png"></p><p>点击编辑按钮，弹出创建测试计划编辑框，可编辑相应的内容。</p><p>点击规划执行，可关联测试用例。</p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\10.png"></p><p>进入关联测试用例界面，点击用例列表中的编辑图标，可编辑用例是否通过测试，并可以添加评论。</p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\11.png"></p><p><img src="C:\Users\M\Pictures\Type\MeterSpher\测试跟踪\14.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何写好测试用例</title>
      <link href="2021/04/29/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B/"/>
      <url>2021/04/29/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="如何写好测试用例教程"><a href="#如何写好测试用例教程" class="headerlink" title="如何写好测试用例教程"></a>如何写好测试用例教程</h1><p>—浪晋慕课网视频教程笔记</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>软件相关概念       软件测试基础      测试流程     测试生命周期</p><h2 id="测试常用术语"><a href="#测试常用术语" class="headerlink" title="测试常用术语"></a>测试常用术语</h2><p>方法：黑盒   灰盒    白盒</p><p>方向：功能   性能    安全</p><p>测试点：兼容性   易用性   UI元素</p><h2 id="测试用例是什么"><a href="#测试用例是什么" class="headerlink" title="测试用例是什么"></a>测试用例是什么</h2><pre class="line-numbers language-none"><code class="language-none">1、测试用例是测试工作的核心2、一组在测试时输入输出的标准3、软件需求的具体对照<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的作用"><a href="#测试用例的作用" class="headerlink" title="测试用例的作用"></a>测试用例的作用</h2><pre class="line-numbers language-none"><code class="language-none">1、检验软件是否满足客户需求2、体现一个测试人员的工作量3、展现测试用例的设计思路<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试用例包含的内容"><a href="#测试用例包含的内容" class="headerlink" title="测试用例包含的内容"></a>测试用例包含的内容</h2><pre class="line-numbers language-none"><code class="language-none">用例编号：编号唯一用例名称：言简意赅测试背景：说明用例属于某个项目，且测试哪些东西前置条件：执行这条用例之前需要满足哪些条件 优先级重要级   测试数据测试步骤：操作步骤   预期结果：功能实现的结果  实际结果：测试用例执行的结果 备注：其它一些信息描述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的编写流程"><a href="#测试用例的编写流程" class="headerlink" title="测试用例的编写流程"></a>测试用例的编写流程</h2><pre class="line-numbers language-none"><code class="language-none">需求分析----&gt;提取测试点----&gt;测试用例编写----&gt;测试用例评审<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="需求分析和测试点编写"><a href="#需求分析和测试点编写" class="headerlink" title="需求分析和测试点编写"></a>需求分析和测试点编写</h2><pre class="line-numbers language-none"><code class="language-none">需求分析业务需求：关注系统是否满足业务用户需求：关注系统是否满足用户习惯功能需求：关注系统是否满足功能需求如果没有需求怎么办？参考市面上已经上线的同类产品需求模糊怎么办？1、收集整理已有需求和产品经理逐条确认2、参考市面上已经上线的同类产品的实现情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提取测试点"><a href="#提取测试点" class="headerlink" title="提取测试点"></a>提取测试点</h2><pre class="line-numbers language-none"><code class="language-none">1、什么是测试点？测试点即通过需求分析后对得出的需要进行测试的具体内容2、测试点对测试用例有什么好处？（1）快速   ---根据测试点可以快速设计出测试用例（2）覆盖   ---测试点能够完全覆盖需求（3）方法   ---在测试点上能够迅速运用测试方法（4）细节   ---测试点能够展现出需求的一些细节3、如何提取测试点？举例-以慕课网为例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>功能模块</th><th>测试点编号</th><th>测试点描述</th></tr></thead><tbody><tr><td>注册功能</td><td>1</td><td>点击注册按钮显示注册对话框</td></tr><tr><td></td><td>2</td><td>对输入的邮箱和手机号进行验证是否可用</td></tr><tr><td></td><td>3</td><td>判断验证码是否输入正确</td></tr><tr><td></td><td>4</td><td>点击注册跳转首页</td></tr><tr><td>登录功能</td><td>1</td><td>正常登录</td></tr><tr><td></td><td>2</td><td>判断输入的邮箱和手机号是否符合规范</td></tr><tr><td></td><td>3</td><td>账号为空时点击登录</td></tr><tr><td></td><td>4</td><td>账号错误时点击登录</td></tr><tr><td></td><td>5</td><td>密码为空时点击登录</td></tr><tr><td></td><td>6</td><td>密码错误时点击登录</td></tr><tr><td></td><td>7</td><td>账号密码都为空时点击登录</td></tr><tr><td></td><td>8</td><td>自动登录功能是否有效</td></tr><tr><td></td><td>9</td><td>点击忘记密码跳转至找回密码界面</td></tr><tr><td></td><td>10</td><td>使用QQ登录</td></tr><tr><td></td><td>11</td><td>使用微信登陆</td></tr><tr><td></td><td>12</td><td>使用微博登录</td></tr><tr><td></td><td>13</td><td>使用慕课网APP扫描二维码登录</td></tr><tr><td>搜索功能</td><td>1</td><td>输入任意信息点击搜索跳转至搜索结果页面</td></tr><tr><td></td><td>2</td><td>在搜索结果页面输入任意信息可以进行全站搜索</td></tr><tr><td></td><td>3</td><td>可以筛选搜索结果</td></tr><tr><td></td><td>4</td><td>可以点击热门搜索进行快捷操作</td></tr><tr><td></td><td>5</td><td>点击搜索结果可以跳转至对应界面</td></tr><tr><td></td><td>6</td><td>搜索完成后显示搜到的结果数目</td></tr><tr><td>下载APP功能</td><td>1</td><td>鼠标移动至相应图标位置出现扫描下载二维码</td></tr><tr><td></td><td>2</td><td>扫描二维码跳转至下载页面</td></tr></tbody></table><h2 id="测试用例编写注意事项"><a href="#测试用例编写注意事项" class="headerlink" title="测试用例编写注意事项"></a>测试用例编写注意事项</h2><pre class="line-numbers language-none"><code class="language-none">1、根据项目的实际情况设计测试用例表格2、用例格式不是固定的，切忌生搬硬套3、根据具体的情况编写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试用例编写方法（常用）"><a href="#测试用例编写方法（常用）" class="headerlink" title="测试用例编写方法（常用）"></a>测试用例编写方法（常用）</h2><pre class="line-numbers language-none"><code class="language-none">等价类划分法有效等价类   无效等价类如何选择适当的数据子集，来代表整个数据集。作用：通过降低测试的数目来实现“合理的”覆盖，覆盖了更多的可能数据，以发现更多的软件缺陷。边界值分析法作为等价类划分法的补充，将测试的边界情况作为重点目标。选取正好等于、刚刚大于或刚刚小于边界值的测试数据场景法通过运用场景来对系统的功能点或业务流程描述，从而提高测试效果。场景法一般包含基本流和备用流，从一个流程开始，通过描述经过的路径来确定的过程，经过遍历所有的基本流和备用流来完成整个场景。错误猜测法需要有丰富的测试经验。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的编写"><a href="#测试用例的编写" class="headerlink" title="测试用例的编写"></a>测试用例的编写</h2><p>根据功能点编写测试用例</p><p>1、慕课网注册功能测试用例编写</p><pre class="line-numbers language-none"><code class="language-none">注册功能 1  点击注册按钮显示注册对话框   2  对输入的邮箱和手机号进行验证是否可用    3  判断验证码是否输入正确    4  点击注册跳转首页(跳转在手机注册和邮箱注册都有验证，不需单独设计用例验证)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例名称</th><th>测试背景</th><th>前置条件</th><th>重要级</th><th>优先级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th><th>编写人</th><th>执行人</th></tr></thead><tbody><tr><td>1</td><td>点击注册按钮弹出注册对话框</td><td>该功能已经完善</td><td>该功能已经开发完成，并通过了开发自验证</td><td>高</td><td>高</td><td></td><td>1、进入慕课网   2、点击注册按钮</td><td>弹出注册对话框</td><td></td><td></td><td></td></tr><tr><td>2</td><td>使用邮箱注册成功</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：<a href="mailto:&#121;&#x69;&#x78;&#105;&#97;&#111;&#98;&#x61;&#105;&#49;&#x32;&#51;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;">&#121;&#x69;&#x78;&#105;&#97;&#111;&#98;&#x61;&#105;&#49;&#x32;&#51;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;</a>    密码：qwe123456</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入正确的验证码   6、点击注册</td><td>跳转到注册成功，提示已发送邮件</td><td></td><td></td><td></td></tr><tr><td>3</td><td>使用错误的邮箱注册失败</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：慕课网  密码：qwe123456</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入正确的验证码   6、点击注册</td><td>提示请输入正确的邮箱地址</td><td></td><td></td><td></td></tr><tr><td>4</td><td>注册时输入不符合规范的密码注册失败（要求密码长度6-16位，不能有空格）</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：<a href="mailto:&#x79;&#105;&#x78;&#105;&#x61;&#111;&#98;&#97;&#105;&#x31;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#x79;&#105;&#x78;&#105;&#x61;&#111;&#98;&#97;&#105;&#x31;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;</a>    密码：12345                       账号：<a href="mailto:&#x79;&#105;&#x78;&#105;&#x61;&#x6f;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x79;&#105;&#x78;&#105;&#x61;&#x6f;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>    密码：12345678910111314账号：<a href="mailto:&#x79;&#x69;&#x78;&#105;&#97;&#x6f;&#98;&#97;&#x69;&#49;&#x32;&#x33;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#x79;&#x69;&#x78;&#105;&#97;&#x6f;&#98;&#97;&#x69;&#49;&#x32;&#x33;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a>    密码：12   67</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入正确的验证码   6、点击注册</td><td>提示密码不符合规范</td><td></td><td></td><td></td></tr><tr><td>5</td><td>使用手机号注册</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>手机号：18365182306</td><td>1、进入慕课网   2、点击注册按钮3、输入手机号   4、输入正确的验证码   5、点击注册</td><td>跳转到输入手机验证码界面</td><td></td><td></td><td></td></tr><tr><td>6</td><td>使用错误的手机号注册失败</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>手机号：1836518236手机号：183651823066</td><td>1、进入慕课网   2、点击注册按钮3、输入手机号   4、输入正确的验证码   5、点击注册</td><td>提示请输入正确的手机号</td><td></td><td></td><td></td></tr><tr><td>7</td><td>判断验证码输入错误时注册失败</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：<a href="mailto:&#121;&#x69;&#120;&#105;&#97;&#111;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#121;&#x69;&#120;&#105;&#97;&#111;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a>    密码：qwe123456</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入错误的验证码   6、点击注册</td><td>提示验证码错误</td><td></td><td></td><td></td></tr></tbody></table><p>2、搜索功能的测试用例</p><pre class="line-numbers language-none"><code class="language-none">搜索功能1 输入任意信息点击搜索跳转至搜索结果页面2 在搜索结果页面输入任意信息可以进行全站搜索3 可以筛选搜索结果4 可以点击热门搜索进行快捷操作5 点击搜索结果可以跳转至对应界面6 搜索完成后显示搜到的结果数目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例名称</th><th>测试背景</th><th>前置条件</th><th>重要级</th><th>优先级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th><th>编写人</th><th>执行人</th></tr></thead><tbody><tr><td>1</td><td>搜索功能正常有效</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、进入慕课网   2、在搜索框中输入搜索内容   3、点击搜索按钮</td><td>跳转至搜索界面，并搜索出系统里所有包含搜索内容的信息</td><td></td><td></td><td></td></tr><tr><td>2</td><td>搜索页面的搜索功能正常有效</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据，已进入搜索页面</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、在搜索页面的搜索框中输入搜索内容   2、点击搜索按钮</td><td>搜索出系统里所有包含搜索内容的信息</td><td></td><td></td><td></td></tr><tr><td>3</td><td>搜索结果筛选功能正常有效</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据，已进入搜索页面</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、在搜索页面的搜索框中输入搜索内容   2、点击搜索按钮      3、点击搜索框下方的课程    4、点击搜索框下方的猿问   5、点击搜索框下方的手记</td><td>1、搜索出系统中所有包含搜索内容的信息   2、仅显示课程里包含搜索内容的条目       3、仅显示猿问里包含搜索内容的条目     4、仅显示手记里包含搜索内容的条目</td><td></td><td></td><td></td></tr><tr><td>4</td><td>点击热门搜索可快速搜索热门搜索的内容</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据，已进入搜索页面</td><td>高</td><td>高</td><td>搜索内容：</td><td>1、点击搜索框下面的热门搜索条码</td><td>搜索出该热门搜索的所有条目</td><td></td><td></td><td></td></tr><tr><td>5</td><td>搜索完成后显示搜索到的条目数量</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、进入慕课网   2、在搜索框中输入搜索内容   3、点击搜索按钮</td><td>1、搜索出系统里所有包含搜索内容的信息          2、显示搜索到的结果数量，并和实际的保持一致</td><td></td><td></td><td></td></tr><tr><td>6</td><td>点击搜索结果可以跳转到对应的界面</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、进入慕课网   2、在搜索框中输入搜索内容   3、点击搜索按钮       4、点击任意搜索到的信息</td><td>1、搜索出系统里所有包含搜索内容的信息          2、跳转到对应的界面</td><td></td><td></td><td></td></tr></tbody></table><p>3、下载APP功能测试用例</p><pre class="line-numbers language-none"><code class="language-none">下载APP功能1  鼠标移动至相应图标位置出现扫描下载二维码    2  扫描二维码跳转至下载页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例名称</th><th>测试背景</th><th>前置条件</th><th>重要级</th><th>优先级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th><th>编写人</th><th>执行人</th></tr></thead><tbody><tr><td>1</td><td>鼠标移动到对应图标，显示二维码</td><td>测试下载APP功能完成，满足客户需求</td><td>该功能开发已完成，并且通过了开发自验证</td><td>高</td><td>中</td><td></td><td>1、进入慕课网         2、鼠标移动到下载APP图标上</td><td>1、显示二维码</td><td></td><td></td><td></td></tr><tr><td>2</td><td>扫描二维码跳转至下载页面</td><td>测试下载APP功能完成，满足客户需求</td><td>该功能开发已完成，并且通过了开发自验证</td><td>高</td><td>中</td><td></td><td>1、进入慕课网         2、鼠标移动到下载APP图标上      3、手机扫描二维码</td><td>1、正确识别二维码，跳转至对应的下载页面</td><td></td><td></td><td></td></tr></tbody></table>  <pre class="line-numbers language-none"><code class="language-none">注意：为更加完善测试用例，可加上所属模块、模块编号、功能介绍、版本号、测试环境、测试类型、测试阶段、开发人员等信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试用例评审"><a href="#测试用例评审" class="headerlink" title="测试用例评审"></a>测试用例评审</h2><pre class="line-numbers language-none"><code class="language-none">1、什么是测试用例评审？1、简单来说，评审就是对测试用例进行检查2、评审包括同行评审、小组评审、部门评审、三方（开发、产品、客户等）评审等3、不同的评审类型会有不同的角色参加2、评审的意义是什么？1、通过评审可以发现测试用例的不足2、方便测试人员改进测试用例3、达到在测试时提高测试质量的目的3、评审的流程（直到测试用例被认可通过）改进测试用例----&gt;评审----&gt;改进测试用例----&gt;评审注意：评审的过程不是一次性的，是一个持续改进的过程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的管理"><a href="#测试用例的管理" class="headerlink" title="测试用例的管理"></a>测试用例的管理</h2><pre class="line-numbers language-none"><code class="language-none">1、如何管理测试用例？（1）原始的excel表格管理方式（2）专业的项目管理系统2、如何管理测试用例？ALM    禅道     testlink     Bugzilla     JIRA    3、禅道的基本应用（1）专业的研发项目管理软件（2）完整支持敏捷开发流程（3）完整软件生命周期管理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础</title>
      <link href="2021/04/27/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/27/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h1><p>来自B站浪晋的测试小讲堂萌芽计划笔记</p><h2 id="day-1-软件测试的介绍和分类"><a href="#day-1-软件测试的介绍和分类" class="headerlink" title="day 1   软件测试的介绍和分类"></a>day 1   软件测试的介绍和分类</h2><p>测试的定义、测试的分类、测试的方法、测试的生命周期。</p><p>软件测试：就是检查实际结果和预期结果是否一致。检查软件开发中存在的问题缺陷。保证软件质量符合客户需求的一系列手段。</p><p><strong>软件测试的职业规划</strong></p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/yixiaobaiio.github.io/master/img/1.png"></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/3.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">软件测试的分类：按方法划分：黑盒测试：将软件看作是一个不能打开的黑盒子，来测试其功能实现。白盒测试：知道软件的内部结构，了解软件的内部逻辑进行测试。灰盒测试：介于黑盒和白盒之间。按方向划分：功能测试：测试软件的功能实现是否符合用户需求，功能是否存在缺陷。性能测试：压力测试：测试软件的性能瓶颈，即软件最大的承受能力。负载测试：测试软件最大负荷情况下正常持续工作的时间，能力。并发测试：测试软件同时处理多个请求的能力。安全测试：是否存在漏洞，容易被黑客攻击。黑盒测试不是功能测试，它们的分类方式不同。黑盒测试是进行功能测试的一种方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/4.png?raw=true"></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/5.png?raw=true"></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/6.png?raw=true"></p><p>软件公司研发团队的结构</p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/7.png?raw=true"></p><p><strong>功能点的划分流程</strong>：从大到小划分功能点。</p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/13.png?raw=true"></p><p><strong>职业规划</strong>(具体学习时间安排、职业发展规划)</p><pre class="line-numbers language-none"><code class="language-none">学习安排1、2021.1 - 2021.3 学习java基础、软件测试基础知识并做好笔记2、2021.4 - 2021.7 学习javaWeb知识、测试工具的使用职业规划入职一年做好功能测试，并坚持写博客，学习总结2-3年 自动化测试工程师3-5年性能测试工程师<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="day-2-软件研发模型和测试流程"><a href="#day-2-软件研发模型和测试流程" class="headerlink" title="day 2  软件研发模型和测试流程"></a>day 2  软件研发模型和测试流程</h2><p>软件研发管理模型</p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/11.png?raw=true"></p><p><strong>瀑布流</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/8.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">特点：从上往下，每个步骤都是相互独立的，不可逆转。不变通，效率低。（流程的基础）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>V字型</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/9.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">特点：测试和开发的工作一一对照，还是一个从上往下的过程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>W字型</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/10.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">特点：左侧的V是开发的工作，右侧V是测试的工作，开发和测试的工作可同步进行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>敏捷模型</strong></p><pre class="line-numbers language-none"><code class="language-none">特点：没有具体的模型，高效的工作，及时的沟通，日报，白板，站立会!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>测试流程</strong></p><pre class="line-numbers language-none"><code class="language-none">测试流程：需求分析阶段 ---&gt;测试设计阶段 ---&gt; 测试执行阶段 ---&gt; 测试总结阶段具体每个阶段的工作：需求分析阶段：    1、进行需求分析：需求分析、产品说明书、口述（方式）     2、学习业务流程（了解项目软件使用的专业知识）    3、提取功能点（从大到小划分功能，直到划分到最小功能点，思维导图或excel表）    4、编写需求分析说明书  注意：没有需求怎么办？参考市面上同类型的成熟软件的实现（参考其实现的规则） 测试设计阶段（文档阶段）：主要编写文档，测试计划、测试方案、测试策略、测试用例。 养成优秀测试的能力：测试、文档、编程 编写文档的方法：5W1H方法 测试计划说明书（测试计划、测试策略、测试方案） 测试计划的重点：时间、人员和资源的安排及分配 测试方案的重点：针对每个测试的内容如何开展测试、采用什么测试计划？使用什么测试工具 测试策略的重点：哪些内容先测试、哪些内容后测试、测试开始和结束的标准是什么 测试执行阶段： 测试总结阶段：            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/14.png?raw=true"></p><h2 id="day-3-测试用例的编写和bug管理"><a href="#day-3-测试用例的编写和bug管理" class="headerlink" title="day 3  测试用例的编写和bug管理"></a>day 3  测试用例的编写和bug管理</h2><p>测试用例为测试人员工作提供一个测试工作依据。</p><p>测试用例根据软件需求说明书进行编写，其执行的多少可估计为软件测试的覆盖率，测试用例覆盖到需求说明书中所有的软件功能，可以说测试用例覆盖率为100%。</p><p>测试方法：等价类、边界值、场景法（三个重要的）、因果图、判定表、路径覆盖、、、、</p><pre class="line-numbers language-none"><code class="language-none">等价类：分为无效等价类和有效等价类（即有效值和无效值）边界值：场景法：以微信发红包为例，用户的使用场景有发送成功和发送失败两种场景。发送成功：用户输入符合要求的数额，发送成功发送失败：用户什么都不输入发送失败；输入超出范围的数额发送失败；用户发送非数字的值，发送失败。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">测试用例要素：测试用例编号（唯一的）测试用例名称（言简意赅，用最少的字描述清楚测试用例的功能）前置条件（执行该测试用例之前必须满足的条件）优先级（执行该用例的时间要求紧急级别）重要级（这个被测的功能在系统里面的重要级别）测试数据测试步骤预期结果实际结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试用例编写练习</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/3-16.png?raw=true"></p><table><thead><tr><th>用例编号</th><th>用例名称</th><th>前置条件</th><th>优先级</th><th>重要级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th></tr></thead><tbody><tr><td>1</td><td>注册功能</td><td></td><td></td><td></td><td>账号：a11111 密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称，点击注册按钮</td><td>注册成功</td><td>注册成功</td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td>账号：a11111 222222密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称，点击注册按钮</td><td>注册成功</td><td>注册成功</td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td>账号：11111 222222/*&amp;asd12密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称，点击注册按钮</td><td>注册失败，提示账号格式不正确</td><td>注册失败，提示账号格式不正确</td></tr><tr><td>4</td><td></td><td></td><td></td><td></td><td>账号：aa11111 222222/aa112密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示账号长度不正确</td><td>注册失败，提示账号长度不正确</td></tr><tr><td>5</td><td></td><td></td><td></td><td></td><td>账号：a11111 222222密码：abcdefgf/12345678/*&amp;^#1234昵称：翼小白</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示密码格式不正确</td><td>注册失败，提示密码格式不正确</td></tr><tr><td>6</td><td></td><td></td><td></td><td></td><td>账号：a11111222222密码：abc12345 确认密码：acc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示确认密码和输入密码不一致</td><td>注册失败，提示确认密码和输入密码不一致</td></tr><tr><td>7</td><td></td><td></td><td></td><td></td><td>账号：a11111222222密码：abc12345 确认密码：abc12345 昵称：翼小白12</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示昵称格式不正确</td><td>注册失败，提示昵称格式不正确</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">测试的一些常识：1、测试是无穷无尽的2、评审：同行评审、小组评审、部门评审、项目评审、第三方评审、邮件评审<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试执行阶段：如果预期结果和实际结果一致，则测试通过；若不一致，则提交bug。测试执行阶段主要的工作就是提交bug和回归测试。</p><pre class="line-numbers language-none"><code class="language-none">bug的管理：bug的管理平台&#x2F;系统&#x2F;工具禅道、BUGFree、ALM&#x2F;QC、testlink、Bugzilla、JIRA等。bug生命周期bug六要素编号、BUG的名称、BUG的优先级（高、中、低）、BUG的严重级别（致命的：影响软件核心功能的正常使用；软件闪退、崩溃；和钱有关。严重的：导致功能无法正常使用；一般的：功能的某些场景异常有问题；轻微的：建议性、UI、用户体验方面的问题。）、BUG复现步骤（用例步骤+实际结果+预期结果）、附件（附件的作用佐证bug存在，可用截图、日志、视频等）bug的状态新建&#x2F;new、打开&#x2F;激活&#x2F;open、已确认、已解决、拒绝、重新打开&#x2F;reopen、关闭&#x2F;closed、延期处理、重复BUG回归测试：在版本2中检查版本1中发现的问题是否被修复解决。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">版本迭代：随着时间&#x2F;测试次数的推进会发布很多版本，其中版本号是不断叠加的。增量测试：只测试已知的有变化的部分全量测试：测试软件的所有功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="day-4-测试应用和测试报告"><a href="#day-4-测试应用和测试报告" class="headerlink" title="day 4  测试应用和测试报告"></a>day 4  测试应用和测试报告</h2><pre class="line-numbers language-none"><code class="language-none">测试应用：APP测试、WEB测试软件结构：B&#x2F;S （browser&#x2F;server  浏览器和服务器）   C&#x2F;S（client&#x2F;server  客户端和服务器）B&#x2F;S和C&#x2F;S的区别：浏览器不需要安装，版本更新时，只需要服务器更新，访问网页可以访问最新版本。客户端，版本更新时客户端和服务器都要更新。APP测试比WEB测试更加复杂，APP测试需要测试（APP专项测试）（1 安装、卸载； (2 消息推送、 (3 更新、 (4 弱网测试（2G&#x2F;3G&#x2F;4G&#x2F;5G&#x2F;WIFI等、 (5 场景交互测试（来电话、听音乐、调用相机、前后台的切换）、 (6 权限测试（7 离线测试 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">测试总结阶段要编写测试报告测试报告（核心包含）：对工作的总结、对BUG的统计分析、对被测软件的评估bug的统计分析：可以根据不同的属性对bug进行统计分析；如根据测试、开发、软件模块、bug等级、解决时间、软件版本、bug状态等对被测软件质量的评估一二级的bug全部关闭三级的bug关闭80%+四级的bug修不修改无所谓当软件的质量达到以上标准就认为软件已达到验收标准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试计划、测试方案、测试策略、测试用例的编写。<br> BUG的定义、BUG的分类、BUG的六要素、BUG的生命周期。<br> 测试和开发流程的关系、瀑布流、V字形、W字型（双V）、螺旋型、敏捷等等。<br> 戴明环、5W2H等分析管理的方法<br> 质量管理体系CMMI（了解）</p><h1 id="接口测试相关（公众号）"><a href="#接口测试相关（公众号）" class="headerlink" title="接口测试相关（公众号）"></a>接口测试相关（公众号）</h1><p>——阿里技术《如何编写有效的接口测试》</p><p><strong>接口测试的好处</strong></p><p>有效且覆盖完整的接口测试，能够保障新功能的开发质量；让开发在修改功能逻辑的时候有回归的能力；也是能优雅地进行重构的前提。</p><pre class="line-numbers language-none"><code class="language-none">测试能够保障代码的开发质量，新功能测试可以保障新功能逻辑正确；回归测试保障原有业务功能逻辑正确；测试的方式：人工测试和自动化测试自动化测试的特点：可持续、可重复、甚至可AI化。注：易测性也是代码结构合理的一个指标。测试的分层从大到小：全链路测试---&gt;域链路测试（架构域A）---&gt;(系统)接口测试---&gt;模块测试---&gt;单元测试单元测试：对单个类或单个方法的测试。当是一个工具或一段比较内聚又复杂的逻辑（如算法逻辑），应使用单元测试来保障逻辑的正确性。模块测试：系统比较大，模块比较多的情况下可以建立模块测试层，保障各模块功能的正确性。当前系统的发展趋势是微服务架构，模块测试非十分必要，可通过接口测试层来覆盖。接口测试：从系统入口出发进行集成测试。（入口测试）应用入口通常是HSF（一个分布式RPC服务框架）服务，消息，定时任务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口测试要遵循的原则</strong></p><pre class="line-numbers language-none"><code class="language-none">测试的原则基础原则：（1）自动化：接口测试是非交互式的自动化执行，不需要人参与（2）独立性：接口测试之间不应该相互依赖（3）可重复：接口测试可重复执行，不受环境影响（4）接口测试遵循BCDE原则，保障接口的交付质量。Border：边界测试Correct：正确的输入，正确的预期输出Design：按照需求和设计文档编写测试逻辑Error：错误输入，预期输出（5）数据准备：数据准备通过系统服务进行，不能通过直接插入db方式（插入数据库）（6）可测性：对于不可测的代码需要进行重构成合理的结构（7）覆盖性：接口测试需要覆盖所有的UC，同时代码覆盖率和分支覆盖率应达到一定标准，新增代码必须被覆盖（8）持续性：如果代码修改导致已有接口测试执行失败，必须修复代码问题或者测试代码逻辑（9）时间要求：接口测试应该在项目发布之前完成，不应该放到项目发布之后补充以上基本原则应适用于所有层的自动化测试用例，在编写接口测试时，除了以上原则，还有其它原则需要遵守有效接口测试的关键原则是要覆盖所有入口；mock所有依赖；校验执行过程中所留下的痕迹。（1）入口覆盖：接口测试用例必须覆盖HSF服务入口、消息入口、定时任务入口。（2）依赖mock：接口测试不能受环境依赖，需要mock掉对外依赖。但对于db依赖，不建议完全mock掉，一方面mock的成本高，另外可能覆盖不到sql和表约束逻辑。（3）校验完整：有效接口测试应具备完整的校验，没有校验的接口测试是没有意义的。执行过程中留下的的痕迹对业务有影响，都要进行完整校验，方能保障接口测试的有效性。HSF接口返回值校验：按照场景和接口约定进行HSF返回参数校验DB校验：校验落地数据的正确性缓存校验：校验存入缓存中数据的正确性HSF依赖入参校验：通过mock工具获得依赖HSF调用的入参，进行入参校验。消息校验：通过mock工具获得发送的消息对象，进行消息体校验。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试代码的结构</strong></p><pre class="line-numbers language-none"><code class="language-none">1、和业务代码一样，考虑可读、可拓展、可复用性。2、可根据系统的业务特性，在测试框架的基础上封装适合当前系统的测试组件，提高测试代码编写效率，规范测试代码结构。接口的测试代码结构：1、测试准备依赖数据准备配置数据：可通过定义配置文件来初始化配置业务数据：这里数据，禁止通过直接插入数据方式产生，而应通过调用业务服务产生。依赖mock对于外部依赖，需要对被依赖的服务进行mock，避免真实调用接口测试入参准备准备接口方面的入参。2、测试执行调用接口方法，执行业务逻辑。3、测试校验返回参数校验：检验接口的返回参数DB：校验DB落地数据缓存数据校验：校验落地到缓存中的数据消息校验：校验对外发送的消息对象对外HSF调用校验：校验对外HSF调用的入参。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口测试的实践技巧</strong></p><pre class="line-numbers language-none"><code class="language-none">1、执行效率（需要关注的点）提高测试执行效率的建议方案：（1）最小化启动测试上下文，例如spring boot的应用，启动spring就可以了（2）使用内存数据库，例如h2（3）将中间件依赖mock掉2、测试框架选择建议选择基于testng，能够提供通过配置文件做数据准备的测试框架。如果找不到合适的，可以自己基于testng进行封装。3、接口测试覆盖度（1）基于业务场景和测试经验枚举出正常和异常情况（2）一些固定需要测试的点：幂等测试、边界值测试、参数不正确测试等等。同时，要通过覆盖率工具查看接口未覆盖的代码或分支逻辑，进行针对性的场景覆盖测试。分支完整性覆盖非常重要，特别是异常的分支。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="51Testing"><a href="#51Testing" class="headerlink" title="51Testing"></a>51Testing</h1><h2 id="如何编写好一条测试用例"><a href="#如何编写好一条测试用例" class="headerlink" title="如何编写好一条测试用例"></a>如何编写好一条测试用例</h2><p>1、编写测试用例的时间：需求评审、技术方案确定后，提测之前</p><p>2、测试用例的好处：</p><pre class="line-numbers language-none"><code class="language-none">1、任何测试人员都可以执行2、减少不必要的沟通成本，节省实际执行时间3、尽可能减少重复劳动4、归档（为后续的迭代、回归、回溯或交接等提供清晰的依据以及指导。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、测试用例必要字段</p><pre class="line-numbers language-none"><code class="language-none">1、用例名称：简洁且完整的说明该条用例的作用2、前置条件：执行用例需要做哪些前置步骤3、用例步骤或输入步骤（执行用例的每步操作）4、预期结果（明确、清晰、完整的描写相关的检查点，确保能明确判断用例是否通过）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、测试用例的扩展字段</p><pre class="line-numbers language-none"><code class="language-none">1、用例编号：用例ID，一般命名方式为：需求编号+功能模块代号+测试类别+编号2、优先级：用例执行的优先级，一般将开发提测前自测的用例设置为最高级，一般为正常功能、主流程用例3、使用平台：测试平台，如安卓、iOS、PC、MAC等4、是否自动化5、关联需求：关联至该需求，便于回溯6、是否通过7、网络：测试环境的网络情况及相关参数8、备注：注明该用例需要注意的事项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试理论基础</title>
      <link href="2021/04/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>01什么是软件测试？软件测试的目的与原则是什么？</strong></p><p>在<strong>规定的条件下对程序进行操作</strong>，以发现<strong>程序错误</strong>，<strong>衡量软件质量</strong>，并对其是否能<strong>满足设计要求进行评估</strong>的过程。</p><p><strong>1）软件测试的目的：</strong></p><ul><li>想<strong>以最少的人力、物力和时间找出软件中潜在的各种错误和缺陷</strong>，通过<strong>修正各种错误和缺陷提高软件质量</strong>，回避软件发布后由于<strong>潜在的软件缺陷和错误造成的隐患</strong>所带来的商业风险</li><li>测试是以<strong>评价一个程序或者系统属性</strong>为目标的活动，测试是对<strong>软件质量的度量与评估</strong>，以<strong>验证软件的质量满足用户的需求的程度</strong>，为用户选择与接受软件提供有力的依据</li><li>通过分析错误产生的原因还可以<strong>帮助发现当前开发工作所采用的软件过程的缺陷，以便进行软件过程改进</strong>。同时，通过对测试结果的分析整理，还可以修正软件开发规则，并为软件可靠性分析提供了依据通过最终的验收测试，也可以<strong>证明软件满足了用户的需求，树立人们使用软件的信心。</strong></li></ul><p><strong>2）软件测试的原则：</strong></p><ul><li>所有的软件测试都应<strong>追溯到用户需求</strong></li><li>应当把“<strong>尽早地和不断地进行软件测试</strong>”作为软件测试者的座右铭</li><li>完全测试是不可能的，<strong>测试需要终止</strong></li><li>测试<strong>无法显示软件潜在的缺陷</strong></li><li>充分注意测试中的<strong>群集现象</strong></li><li><strong>程序员应避免检查自己的程序</strong></li><li><strong>尽量避免测试的随意性</strong></li></ul><p><strong>02目前主要的测试用例设计方法是什么？</strong></p><p><strong>1）白盒测试</strong>：逻辑覆盖、循环覆盖、基本路径覆盖。</p><p><strong>2）黑盒测试</strong>：边界值分析法、等价类划分、错误猜测法、因果图法、状态图法、测试大纲法、随机测试、场景法。</p><p><strong>03</strong>什么是<strong>测试用例</strong>? 什么是<strong>测试脚本</strong>? 两者的关系是什么？</p><p><strong>1）测试用例</strong>：为实施测试而向<strong>被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。</strong></p><p><strong>2）测试脚本</strong>：为了进行<strong>自动化测试而编写的脚本</strong>。</p><p><strong>3）关系</strong>：<strong>测试脚本的编写必须对应相应的测试用例</strong>。</p><p><strong>04简述什么是静态测试、动态测试、黑盒测试、白盒测试、α测试、β测试</strong></p><p><strong>1）静态测试</strong>是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。  </p><p><strong>2）动态测试</strong>是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。</p><p><strong>3）黑盒测试</strong>一般用来<strong>确认软件功能的正确性和可操作性</strong>，目的是检测软件的各个功能是否能得以实现，把被测试的程序当作一个黑盒，不考虑其内部结构，在知道该程序的输入和输出之间的关系或程序功能的情况下，依靠软件规格说明书来确定测试用例和推断测试结果的正确性。</p><p><strong>4）白盒测试</strong>根据<strong>软件内部的逻辑结构分析来进行测试</strong>，是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般黑盒测试由项目经理在程序员开发中来实现。</p><p><strong>5）α测试</strong>是由一个用户在<strong>开发环境</strong>下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，α测试不能由程序员或测试员完成。</p><p><strong>6）β测试</strong>是软件的多个用户在一个或多个用户的<strong>实际使用环境</strong>下进行的测试。开发者通常不在测试现场，β测试不能由程序员或测试员完成。</p><p><strong>05软件测试的策略是什么？</strong></p><p><strong>软件测试策略</strong>：在一定的软件测试标准、测试规范的指导下，依据测试项目的特定环境约束而规定的软件测试的原则、方式、方法的集合。</p><p><strong>06软件测试各个阶段通常完成什么工作？各个阶段的结果文件是什么？包括什么内容？</strong></p><p><strong>1）单元测试阶段</strong>：各独立单元模块在与系统的其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。</p><p><strong>2）集成测试阶段</strong>：集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。</p><p><strong>3）系统测试阶段</strong>：将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。</p><p><strong>07测试人员在软件开发过程中的任务是什么？</strong></p><ul><li>尽可能早的找出系统中的Bug</li><li>避免软件开发过程中缺陷的出现</li><li>衡量软件的品质，保证系统的质量</li><li>关注用户的需求，并保证系统符合用户需求</li></ul><p><strong>总的目标是</strong>：确保软件的质量。</p><p><strong>08黑盒测试的测试用例常见设计方法都有哪些？请分别以具体的例子来说明</strong></p><p><strong>1）等价类划分</strong>：等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据。取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类。</p><p><strong>2）边界值分析法</strong>：是对等价类划分方法的补充。测试工作经验告诉我，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。</p><p>使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。</p><p><strong>3）错误猜测法</strong>：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。</p><p>错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如，在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。</p><p><strong>4）因果图方法</strong>：前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型）。因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。</p><p><strong>5）正交表分析法</strong>：可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。</p><p><strong>6）场景分析方法</strong>：指根据用户场景来模拟用户的操作步骤，这个比较类似因果图，但是可能执行的深度和可行性更好。 </p><p><strong>7）状态图法</strong>：通过输入条件和系统需求说明得到被测系统的所有状态，通过输入条件和状态得出输出条件；通过输入条件、输出条件和状态得出被测系统的测试用例。</p><p><strong>8）大纲法</strong>：大纲法是一种着眼于需求的方法，为了列出各种测试条件，就将需求转换为大纲的形式。大纲表示为树状结构，在根和每个叶子结点之间存在唯一的路径。大纲中的每条路径定义了一个特定的输入条件集合，用于定义测试用例。树中叶子的数目或大纲中的路径给出了测试所有功能所需测试用例的大致数量。</p><p><strong>09软件测试项目从什么时候开始？为什么？</strong> </p><p>软件测试应该在需求分析阶段就介入，因为测试的对象不仅仅是程序编码，应该对软件开发过程中产生的所有产品都测试，并且软件缺陷存在放大趋势，缺陷发现的越晚，修复它所花费的成本就越大。</p><p><strong>10</strong></p><p>什么是回归测试？</p><p>回归测试：回归测试有两类，用例回归和错误回归；用例回归是过一段时间以后再回头对以前使用过的用例在重新进行测试，看看会重新发现问题。错误回归，就是在新版本中，对以前版本中出现并修复的缺陷进行再次验证，并以缺陷为核心，对相关修改的部分进行测试的方法。</p><p><strong>11你认为做好测试计划工作的关键是什么？</strong></p><p><strong>1）明确测试的目标，增强测试计划的实用性。</strong></p><p>编写软件测试计划的重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确。</p><p><strong>2）坚持“5W1H”规则，明确内容与过程。</strong></p><p>“5W1H”规则指的是“What（做什么）”、“Why（为什么做）”、“When（何时做）”、“Where（在哪里）”、“who（谁来做）”、“How（如何做）”。利用“5W1H”规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），确定项目有关人员（who），给出测试文档和软件的存放位置（Where）、指出测试的方法和工具（How）。</p><p><strong>3）采用评审和更新机制，保证测试计划满足实际需求。</strong></p><p>测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。</p><p><strong>4）分别创建测试计划与测试详细规格、测试用例。</strong></p><p>应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。</p><p><strong>12一份测试计划应该包括哪些内容？</strong></p><p>背景、项目简介、目的、测试范围、测试策略、人员分工、资源要求、进度计划、参考文档、常用术语、提交文档、风险分析。 </p><p><strong>13缺陷记录应包含的内容？</strong></p><p>缺陷标识、缺陷类型、缺陷严重程度、缺陷产生可能性、缺陷优先级、缺陷状态、缺陷起源、缺陷来源、缺陷原因。</p><p><strong>14测试结束的标准是什么？</strong></p><p>当这个软件彻底的消失以后，测试就结束了。</p><p><strong>15一个测试工程师应具备哪些素质？</strong></p><ul><li>责任心</li><li>沟通能力</li><li>团队合作精神</li><li>耐心、细心、信心</li><li>时时保持怀疑态度，并且有缺陷预防的意识</li><li>具备一定的编程经验</li></ul><p><strong>16你的测试职业发展目标是什么？</strong></p><p>我的职业发展：需要时间累积，一步步向着高级测试工程师的目标前进。前2年累积测试经验，不断的更新、改正自己，做好测试任务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/24/hello-world/"/>
      <url>2021/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引基础</title>
      <link href="2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h2><h3 id="三种数据结构"><a href="#三种数据结构" class="headerlink" title="三种数据结构"></a>三种数据结构</h3><ul><li>三种数据结构：哈希表，有序数组，搜索树；</li><li>哈希表结构适用于等值查询的场景</li><li>有序数组适用于静态存储引擎，查询多，改动少；</li><li>二叉搜索树:查找 O(logN)，插入也是O(logN)；</li></ul><h3 id="Innodb的索引模型"><a href="#Innodb的索引模型" class="headerlink" title="Innodb的索引模型"></a>Innodb的索引模型</h3><p>1.每一个索引在 innodb里对应一棵B+树；</p><p>2.根据叶子节点内容分：主键索引和非主键索引：</p><ul><li>主键索引：叶子节点存整行数据；</li><li>非主键索引：叶子节点存主键的值；</li></ul><p>3.<strong>提问：基于主键索引和普通索引的查询有什么区别？</strong></p><ul><li>查询语句：<code>select * from T where ID = 1</code>主键查询方式，只搜索ID这棵B+树；</li><li>查询语句：<code>select * from T where k = 1</code>，普通索引方式，先找k索引B+树，找到对应的ID，再找ID索引树。<strong>回表</strong>； </li></ul><p>4.普通索引的查询会多扫描一棵索引树；</p><p>5.Innodb是一棵N叉树，N的值是1200；</p><p>6.提问：一张没有主键的表，只有1个普通索引，查询时怎么回表？</p><p>   Innodb默认会将RowId作为主键；</p><p>7.思考题：<code>老师你好：之前看过一遍文章，一直有疑惑：一个innoDB引擎的表，数据量非常大，根据二级索引搜索会比主键搜索快，文章阐述的原因是主键索引和数据行在一起，非常大搜索慢，我的疑惑是：通过普通索引找到主键ID后，同样要跑一遍主键索引，还望老师解惑。。。</code></p><ol start="8"><li>B+树的插入可能会引起数据页的分裂，删除可能会引起数据页的合并，二者都是比较重的IO消耗，所以比较好的方式是顺序插入数据，这也是我们一般使用自增主键的原因之一。</li></ol><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>1.回表：回到主索引树搜索的过程，普通索引的查找就需要；</p><p>2.示例：<code>select ID from T where k between 3 and 5</code>，需要查找的ID在k索引树上已经存在了，可以直接获取结果，不需要回表。简而言之，在<strong>这个查询里索引k已经覆盖了查询需求，称为覆盖索引</strong></p><p>3.<strong>重点：覆盖索引可以减少树的搜索次数，提升查询性能，所以使用覆盖索引是常用的性能优化手段</strong>；</p><p>4.思考通过身份证号去查询姓名，在身份证号建立索引 和 （身份证号、姓名）联合索引对比？</p><p>   使用联合索引可用到覆盖索引，不需要回表查，减少了执行时间</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>1.B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录，最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符；</p><p>示例，查询（姓名，年龄）联合索引的表，找已张开头的数据<code>where name like &#39;张%&#39;</code>索引仍然有效</p><p>2.联合索引内的字段顺序如何安排？</p><p>   <strong>重点：第一原则，如果通过调整顺序，可以少维护一个索引，那么这个顺序就是优先考虑的</strong>，示例（a, b）联合索引，则不需要在a上建立索引了。</p><p>3.MySQL5.6之后引入了<strong>索引下推</strong>，在索引遍历过程中，对索引包含的字段进行判断，过滤掉不满足条件的记录，减少回表次数；</p><p>4.提问，什么情况下需要重建索引？</p><p>  索引因为删除，或者页分裂等原因，使得数据页有空洞，重建索引会创建新的索引，把数据按顺序插入，使得页面利用率最高。语句：<code>Alter table T engine=Innodb</code></p><p>示例：<code>让我想到了我们线上的一个表, 记录日志用的, 会定期删除过早之前的数据. 最后这个表实际内容的大小才10G, 而他的索引却有30G. 在阿里云控制面板上看,就是占了40G空间. 这可花的是真金白银啊.后来了解到是 InnoDB 这种引擎导致的,虽然删除了表的部分记录,但是它的索引还在, 并未释放.只能是重新建表才能重建索引.</code></p><h3 id="提问F-amp-Q"><a href="#提问F-amp-Q" class="headerlink" title="提问F&amp;Q"></a>提问F&amp;Q</h3><p>1.联合索引的技巧？（覆盖索引，最左前缀原则，索引下推）</p><p>2.<strong>好问题：</strong>老师，下面两条语句有什么区别，为什么都提倡使用2:<br>   <code>1.select * from T where k in(1,2,3,4,5)</code><br>   <code>2.select * from T where k between 1 and 5</code></p><p>   第1个树搜索5次，第2个树搜索1次。</p><h1 id="MySQL基础06-07"><a href="#MySQL基础06-07" class="headerlink" title="MySQL基础06-07"></a>MySQL基础06-07</h1><p>极客时间《MySQL实战45讲》</p><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p><strong>按照加锁范围，分为：全局锁、表级锁、行级锁</strong></p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>1.对整个数据库实例加锁，MySQL提供了加全局读锁的方法，命令<code>flush tables with read lock</code>（FTWRL），让库处于只读状态；</p><p>2.应用场景：全库逻辑备份；</p><p>3.备份期间不加锁有什么问题？得到的备份库不是一个逻辑时间点的，这个视图是逻辑不一致的；</p><p>4.给整个数据库加只读锁，为什么不用<code>set global readonly=true</code>的方式呢？</p><p> （a.readonly可能用于其他逻辑，比如判断是主库还是从库；b.异常处理机制上，如果客户端发生异常断开，FTWRL方式会自动释放全局锁，而设置readonly的方式，数据库会一直保持改状态）</p><p>5.备份方式，官方自带的逻辑备份工具mysqldump，使用参数<code>--single-transaction</code>时，会启动一个事务，确保拿到一致性视图。</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>1.MySQL里有2种表级锁：<strong>表锁、元数据锁</strong>（meta data lock，MDL）</p><p>2.表锁语法<code>lock tables ... read/write</code>，可通过<code>unlock tables</code>主动释放表锁，</p><p>3.lock tables不仅限制别的线程读写，也限制本线程的操作；</p><p>4.MDL锁是系统默认会加的，<strong>作用防止DDL和DML并发的冲突</strong>，保证读写正确性，对一个表做增删改查时，加MDL读锁；对表结构变更时，加MDL写锁；即（MDL不需要显示使用，在访问一个表时自动加上）</p><p>5.MDL直到数据提交才会释放；</p><p>5.<strong>思考：给一个小表加个字段，导致整个库挂了？</strong></p><p>​    原因：先查询，加了MDL读锁，再改表结构，加了MDL写锁，两个事务都没提交，导致后续操作会阻塞，如果客户端重试，库的线程很快爆满。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>MySQL的行锁由各个存储引擎自己实现，如MyISAM不支持行锁，任何一个更新都会锁住整张表</p><p>两阶段锁协议：Innodb事务中，行锁在需要的时候才加上，需要等到事务结束时才释放，而不是不需要了立刻释放；</p><p><strong>死锁和死锁检测</strong></p><p>并发系统中，不同线程出现循环资源依赖，都在等待其他线程释放资源时，会进入无限等待状态，即死锁。</p><p>死锁有2种策略解决：</p><p>1.进入等待，直到超时，可通过参数<code>innodb_lock_wait_timeout</code>来设置，默认50s；</p><p>2.发起死锁检测，发现死锁后，主动回滚死锁链中的一个事务，使得其他事务能执行，设置参数<code>innodb_deadlock_detect</code>为on开启死锁检测；</p><p><strong>死锁检测带来的问题？</strong></p><p><code>当一个事务被锁，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现循环等待，即死锁</code>。假设1000个线程同时更新同一行，死锁检测的操作就是100万量级的，结果：CPU利用率很高，每秒执行事务却很少。</p><p>上述问题解决方式：</p><p>1.控制并发度（客户端控制可能不太行，因为客户端会有多个，如果有中间件，在中间件控制）</p><p>2.从业务设计上进行优化，将一行的改动逻辑分成多行，减少锁冲突；</p><p><strong>提问：</strong></p><p>1.死锁检测什么时候执行？ 在事务需要加锁访问的行上有锁，才要检测；一致性读不会加锁，故不需要死锁检测；</p><p>2.Innodb行级锁通过锁索引记录实现，如果update的列没建索引，即使update一条记录也会锁整张表吗？</p><p>  （隔离级别是RR，会的；隔离级别是RC，不会，MySQL做了优化的）</p><h2 id="一致性读"><a href="#一致性读" class="headerlink" title="一致性读"></a>一致性读</h2><p>事务查询数据，在这期间，即使数据被改过，但是事务看到的数据结果都是一致的。称为一致性读。</p><p>判断逻辑：</p><p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，还有3种情况</p><p><code>1.版本未提交，不可见</code></p><p><code>2.版本已提交，但是是在视图创建后提交的，不可见；</code></p><p><code>3.版本已提交，且是在视图创建前提交的，可见;</code></p><p><strong>更新数据都是先读后写的，这个读只能读取当前值，即“当前读”</strong>。（更新和查询的区别）</p><p>例如：事务B执行更新语句，这期间事务C已经更新k=k+1，那么事务B更新时读到的k=2，更新后k=3;</p><p><strong>5.为什么rr能实现可重复读而rc不能,分两种情况</strong><br>(1)快照读的情况下,rr不能更新事务内的up_limit_id,<br>  而rc每次会把up_limit_id更新为快照读之前最新已提交事务的transaction id,则rc不能可重复读<br>(2)当前读的情况下,rr是利用record lock+gap lock来实现的,而rc没有gap,所以rc不能可重复读</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
