<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python高阶</title>
      <link href="2021/11/09/python%E9%AB%98%E9%98%B6/"/>
      <url>2021/11/09/python%E9%AB%98%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="python高阶"><a href="#python高阶" class="headerlink" title="python高阶"></a>python高阶</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h4><p>描述具有相同属性和行为的对象的集合，如：学生类（学号，姓名，班级，学习）</p><h4 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h4><p>通过类定义的数据结构的实例，是对类的具体实现</p><h5 id="属性：描述类的静态特征"><a href="#属性：描述类的静态特征" class="headerlink" title="属性：描述类的静态特征"></a>属性：描述类的静态特征</h5><h5 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h5><p>每一个对象都具有，并且值相同，如：学生的国籍</p><h5 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h5><p>每一个对象都具有，但值可能不同，如：学生姓名、年龄等</p><p>方法：描述类的动态行为</p><h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><p>通过装饰器@classmethod声明，通常通过类调用，一般用于修改类属性的值</p><h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><p>类中最常用的方法，常通过对象调用</p><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>通过装饰器@staticmethod声明，常通过类调用，通常是一些和类本身无关的方法</p><h5 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h5><p><strong>语法</strong></p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/1.jpg?raw=true">{width=”4.166666666666667in” height=”1.5074529746281715in”}</p></blockquote><p><strong>类名</strong>：符合标识符命名规范，通常每个单词首字母大写</p><p>例1：声明一个学生类</p><p><strong>属性</strong>：学号、姓名、年龄、国籍、班级</p><p><strong>方法</strong>：学习、吃饭、睡觉</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/2.jpg?raw=true">{width=”4.166666666666667in” height=”2.3263353018372706in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/3.jpg?raw=true">{width=”4.166666666666667in” height=”3.659326334208224in”}</p></blockquote><h5 id="对象的声明（实例化）"><a href="#对象的声明（实例化）" class="headerlink" title="对象的声明（实例化）"></a>对象的声明（实例化）</h5><p>语法：对象名 = 类名([实参1，实参2，......])</p><p>例1：实例化Student类</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/4.jpg?raw=true">{width=”4.166666666666667in” height=”2.542010061242345in”}</p></blockquote><h5 id="内置方法（重要）"><a href="#内置方法（重要）" class="headerlink" title="内置方法（重要）"></a>内置方法（重要）</h5><p>__new__()，new方法，在实例化是自动调用，用于创建对象</p><p>__init__()，构造方法，初始化对象，在实例化时自动调用</p><p>__del__()，析构方法，销毁对象，在对象生命周期结束时自动调用</p><p>例1：顺序：创建---》构造----》销毁</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/5.jpg?raw=true">{width=”4.166666666666667in” height=”3.444122922134733in”}</p></blockquote><p>例2：</p><p>声明一个学校类，学校类中声明一个类属性表示学校的总人数，声明一个类方法用于更新学校总人数</p><p>声明一个学生类，包含学生的基本信息，每实例化一个学生，则学校的总人数+1</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/6.jpg?raw=true">{width=”4.166666666666667in” height=”2.4410772090988626in”}</p></blockquote><p>例3：</p><p>声明一个学校类，学校类中声明4个类属性分别表示学校的总人数、高一、高二、高三年级的人数，声明一个类方法用于更新学校总人数以及对应年级的人数</p><p>声明一个学生类，包含学生的基本信息，每实例化一个学生，则学校的总人数+1</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/7.jpg?raw=true">{width=”4.166666666666667in” height=”2.312234251968504in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/8.jpg?raw=true">{width=”4.166666666666667in” height=”1.6754461942257217in”}</p></blockquote><h5 id="对象组合"><a href="#对象组合" class="headerlink" title="对象组合"></a>对象组合</h5><p>用于描述类与类之间的关系，多个类之间存在依赖关系，需要在A类中调用B的属性或者方法</p><p><strong>方式</strong></p><p>1、在A类的实例方法中传入B类的对象，通过该对象调用B类中的属性和方法（A类、B类相互依赖）</p><p>2、在A类的构造方法中传入B类的对象，通过该对象调用B类中的属性和方法（A类依赖于B类）</p><p>例1：饲养员与动物</p><p>有10个房间，每个房间中随机放入老虎或羊</p><p>饲养员不知道每个房间中的动物类型，可以选择敲门（房间中的动物发出叫声，同时体重-5）获知动物类型。饲养员给动物喂食，喂正确则体重+10，错误则体重-10（老虎吃肉，羊吃草）</p><p>游戏时间1分钟，统计每个房间中动物的体重</p><p>分析：完成整个事件有哪些对象，这些对象具有哪些属性和方法，将对象的属性和方法抽象为类</p><p>老虎</p><p>属性：名字、体重</p><p>方法：吃东西、发出叫声</p><p>羊</p><p>属性：名字、体重</p><p>方法：吃东西、发出叫声</p><p>房间</p><p>属性：房间号、动物类型</p><p>饲养员</p><p>属性：姓名</p><p>方法:敲门、喂食</p><p>代码实现</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/9.jpg?raw=true">{width=”4.166666666666667in” height=”3.3277088801399826in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/10.jpg?raw=true">{width=”4.166666666666667in” height=”3.031418416447944in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/11.jpg?raw=true">{width=”4.166666666666667in” height=”2.1454385389326336in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/12.jpg?raw=true">{width=”4.166666666666667in” height=”2.448050087489064in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/13.jpg?raw=true">{width=”4.166666666666667in” height=”1.9184426946631672in”}</p></blockquote><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>私有化：在属性或者方法名前面加2条下划线，此时属性或方法就变为私有的，只能在当前类的内部访问，在类的外部无法直接访问私有属性或者方法</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/14.jpg?raw=true">{width=”4.166666666666667in” height=”1.700269028871391in”}</p></blockquote><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>作用：提高代码重用性，降低代码冗余</p><p>基本概念：</p><p>子类：继承其它类的类</p><p>可以有多个父类</p><p>可以继承父类所有非私有的属性和方法</p><p>父类：也叫基类、超类，被别的类来继承的类</p><p>重写：子类继承父类的方法，在子类中重新实现该方法</p><p>例1：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/15.jpg?raw=true">{width=”4.166666666666667in” height=”3.9289107611548557in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/16.jpg?raw=true">{width=”4.166666666666667in” height=”1.063218503937008in”}</p></blockquote><p>例2：父类控制子类必须重写方法</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/17.jpg?raw=true">{width=”4.166666666666667in” height=”2.6574234470691165in”}</p></blockquote><p>例3：单例模式</p><p>在程序运行期间保证类的实例只有1个</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/18.jpg?raw=true">{width=”4.166666666666667in” height=”2.1680686789151355in”}</p></blockquote><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>作用：增加代码的灵活性、可扩展性</p><p>例</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/19.jpg?raw=true">{width=”3.8541666666666665in” height=”4.165555555555556in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/20.jpg?raw=true">{width=”4.166666666666667in” height=”0.8117399387576553in”}</p></blockquote><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>作用：提高代码的执行速度</p><p>线程：进程内部进行CPU调度的基本单位，一个进程至少存在一个线程</p><p>模块：threading</p><p>创建线程：Thread(target=func[args=(value1,value2,......)])</p><p>target，指定线程需要执行的任务（通常是函数名或者方法名，不要加括号）</p><p>args，指定线程执行的任务需要传入的实参，以元组形式传入</p><p>启动线程：start()</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/21.jpg?raw=true">{width=”4.166666666666667in” height=”3.2630522747156605in”}</p></blockquote><h5 id="线程守护"><a href="#线程守护" class="headerlink" title="线程守护"></a>线程守护</h5><p>作用：子线程跟随主线程结束而结束</p><p>方法：setDaemon(True)，必须在线程启动前设置</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/22.jpg?raw=true">{width=”4.166666666666667in” height=”3.4368832020997377in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/23.jpg?raw=true">{width=”4.166666666666667in” height=”2.677891513560805in”}</p></blockquote><h5 id="线程阻塞"><a href="#线程阻塞" class="headerlink" title="线程阻塞"></a>线程阻塞</h5><p>作用：主线程在子线程结束之后再结束</p><p>方法：join()，需要在线程启动后设置</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/24.jpg?raw=true">{width=”4.166666666666667in” height=”2.583507217847769in”}</p></blockquote><h5 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h5><p>作用：用于解决子线程共享全局变量时出现的数据冲突问题，从而确保数据的安全性和准确性</p><p>缺点：降低程序运行效率</p><p>使用步骤：</p><p>导入模块：Lock</p><p>1、创建锁：lock = Lock()</p><p>2、在编辑全局变量之前获取锁，锁定全局变量只能由当前子线程编辑</p><p>lock.acquire()</p><p>3、编辑完成后，释放锁（一定记得释放）</p><p>lock.release()</p><p>未加锁</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/25.jpg?raw=true">{width=”4.166666666666667in” height=”4.002409230096238in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/26.jpg?raw=true">{width=”4.166666666666667in” height=”0.7414271653543307in”}</p></blockquote><p>添加锁</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/27.jpg?raw=true">{width=”4.166666666666667in” height=”3.855485564304462in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/28.jpg?raw=true">{width=”4.166666666666667in” height=”2.603734689413823in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/29.jpg?raw=true">{width=”4.166666666666667in” height=”3.663277559055118in”}</p></blockquote><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>作用：实现对字符串的复杂控制</p><p>模块：re（系统模块）</p><p>方法：</p><p>split(pattern,string)，使用字符串中与pattern规则匹配的内容进行分隔，返回一个列表</p><p>pattern，正则表达式</p><p>string，待处理的字符串</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/30.jpg?raw=true">{width=”4.166666666666667in” height=”2.2630227471566053in”}</p></blockquote><p>sub(pattern,repl,string)，将字符串中与pattern规则匹配的内容进行替换（替换成repl），返回一个新字符串</p><p>pattern，正则表达式</p><p>string，待处理的字符串</p><p>repl，新内容</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/31.jpg?raw=true">{width=”4.166666666666667in” height=”2.40252624671916in”}</p></blockquote><p>findall(pattern，string[，控制字符串])：以列表返回字符串中与pattern规则匹配的内容，如果没有匹配的则返回空列表</p><p>pattern，正则表达式</p><p>string，待处理的字符串</p><h4 id="控制字符"><a href="#控制字符" class="headerlink" title="控制字符"></a>控制字符</h4><p>re.S，使用元字符.可以匹配包括换行符\n在内的所有字符</p><p>re.I，忽略大小写</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/32.jpg?raw=true">{width=”4.166666666666667in” height=”2.2089687226596677in”}</p></blockquote><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>\w，匹配一个单词字符（字母、数字、下划线）</p><p>\W，匹配一个非单词字符</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/33.jpg?raw=true">{width=”4.166666666666667in” height=”2.92294072615923in”}</p></blockquote><p>\d，匹配一个数字字符</p><p>\D，匹配一个非数字字符</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/34.jpg?raw=true">{width=”4.166666666666667in” height=”2.85534886264217in”}</p></blockquote><p>\s,匹配一个空白字符</p><p>\S，匹配一个非空白字符</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/35.jpg?raw=true">{width=”4.166666666666667in” height=”2.90325021872266in”}</p></blockquote><p>**.**，匹配除换行符\n以外的任意一个字符</p><p><strong>^</strong>，匹配字符串开头</p><p>**$**，匹配字符串结尾</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/36.jpg?raw=true">{width=”4.166666666666667in” height=”2.8333333333333335in”}</p></blockquote><p>*,匹配前一个字符任意次</p><p>ab*--a、ab、abb、abbb</p><p>+，匹配前一个字符至少1次</p><p>？，匹配前一个字符0次或1次</p><p>{n}，匹配前一个字符n次</p><p>{n，}，匹配前一个字符至少n次</p><p>{n,m}，匹配前一个字符至少n次，最多m次</p><p>{，m}，匹配前一个字符最多m次</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/37.jpg?raw=true">{width=”4.041666666666667in” height=”4.158301618547681in”}</p></blockquote><h3 id="网络编程-TCP-IP简介"><a href="#网络编程-TCP-IP简介" class="headerlink" title="网络编程-TCP/IP简介"></a>网络编程-TCP/IP简介</h3><p>OSI模型</p><p>TCP/IP模型（当今互联网网络模型）</p><p>应用层：HTTP、HTTPS、FTP（文件传输协议）、SMTP、IMAP、POP3</p><p>HTTP协议请求方法（最常用）：GET、POST</p><p>传输层：TCP、UDP</p><p>UDP，用户数据报协议，提供无连接、不可靠的通信服务（效率高、消耗少）</p><p>TCP，传输控制协议，提供面向连接、可靠的通信服务（安全性、可靠性高）</p><p>三次握手</p><p>建立连接</p><p>四次挥手</p><p>断开连接</p><p>socket编程</p><p>套接字，工作在传输层和应用层之间，通过TCP或UDP协议传输信息，分为客户端和服务端</p><p>模块，socket</p><p>使用步骤</p><p>服务端</p><p>1、创建socket对象：soc = socket.socket()</p><p>2、绑定IP端口：soc.bind(ip,port)</p><p>3、设置监听：soc.listen()</p><p>4、等待客户端连接：soc.accept()</p><p>客户端</p><p>1、创建socket对象：soc = socket.socket()</p><p>2、连接服务器：soc.connect(ip,port)</p><p>公共方法：</p><p>send()，发送消息</p><p>recv()，接收消息</p><p>例：</p><p>服务端</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/38.jpg?raw=true">{width=”4.166666666666667in” height=”2.345429790026247in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/39.jpg?raw=true">{width=”4.166666666666667in” height=”2.0285454943132106in”}</p></blockquote><p>客户端</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/40.jpg?raw=true">{width=”4.166666666666667in” height=”2.0153827646544182in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/41.jpg?raw=true">{width=”4.166666666666667in” height=”0.9444444444444444in”}</p></blockquote><p>request</p><p>作用：模拟客户端向服务端发送http或https请求</p><p>模块：requests</p><p>pip install requests</p><p>GET请求：</p><p>get(url[,params,headers,file])</p><p>url，请求地址</p><p>params，请求参数，一般使用字典传入</p><p>headers，请求头</p><p>file，一般用于上传文件</p><p>例1：获取豆瓣电影排行榜</p><p>1、抓包，获取请求地址、参数、请求头</p><p>2、使用代码模拟客户端发送请求，获取页面源码</p><p>3、使用正则表达式从页面源码中获取排行榜中的电影信息</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/42.jpg?raw=true">{width=”4.166666666666667in” height=”1.580155293088364in”}</p></blockquote><p>例2：下载网页图片</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/43.jpg?raw=true">{width=”4.166666666666667in” height=”1.7040343394575679in”}</p></blockquote><h2 id="高阶应用"><a href="#高阶应用" class="headerlink" title="高阶应用"></a>高阶应用</h2><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><h4 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h4><p>定义：外函数中声明了一个内函数，在内函数中引用了外函数的变量，外函数返回内函数的引用</p><p>例1：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/44.jpg?raw=true">{width=”4.166666666666667in” height=”2.2631135170603676in”}</p></blockquote><p>例2：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/45.jpg?raw=true">{width=”4.166666666666667in” height=”2.555858486439195in”}</p></blockquote><p>例3：内函数中修改外函数变量</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/46.jpg?raw=true">{width=”4.166666666666667in” height=”2.270722878390201in”}</p></blockquote><h3 id="装饰器-1"><a href="#装饰器-1" class="headerlink" title="装饰器"></a>装饰器</h3><p>在不改变函数的源码、调用方式的前提下，为函数添加新的功能</p><p>通用装饰器模板：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/47.jpg?raw=true">{width=”4.166666666666667in” height=”1.5924956255468066in”}</p></blockquote><p>例1：统计函数的运行时间</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/48.jpg?raw=true">{width=”4.166666666666667in” height=”2.5290365266841643in”}</p></blockquote><p>例2:执行顺序</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/49.jpg?raw=true">{width=”4.166666666666667in” height=”2.483672353455818in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/50.jpg?raw=true">{width=”4.166666666666667in” height=”1.2755107174103237in”}</p></blockquote><p>例3：为装饰器传参（三层的装饰器能够实现为装饰器传参）</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/51.jpg?raw=true">{width=”4.166666666666667in” height=”2.5325699912510937in”}</p></blockquote><h2 id="pytest框架"><a href="#pytest框架" class="headerlink" title="pytest框架"></a>pytest框架</h2><p>模块：pytest</p><p>pip insatll pytest</p><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p>说明：</p><p>函数名需要以test开头</p><p>类名需要以Test开头，类中的方法需要以test开头</p><p>类中不能有构造方法（初始化对象）</p><p>使用assert进行断言</p><p>脚本名需要以test开头</p><h4 id="作用于函数"><a href="#作用于函数" class="headerlink" title="作用于函数"></a>作用于函数</h4><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/52.jpg?raw=true">{width=”4.166666666666667in” height=”1.6981506999125109in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/53.jpg?raw=true">{width=”4.166666666666667in” height=”1.8821839457567804in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/54.jpg?raw=true">{width=”4.166666666666667in” height=”0.8638637357830271in”}</p></blockquote><h4 id="作用于类"><a href="#作用于类" class="headerlink" title="作用于类"></a>作用于类</h4><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/55.jpg?raw=true">{width=”4.166666666666667in” height=”1.7446237970253717in”}</p></blockquote><h5 id="用例执行"><a href="#用例执行" class="headerlink" title="用例执行"></a>用例执行</h5><p>方式</p><p>脚本：pytest.main([参数1，参数2，......])</p><p>命令行</p><p>pytest 参数 脚本</p><p>py.test 参数 脚本</p><p>python -m pytest 参数 脚本</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/56.jpg?raw=true">{width=”4.166666666666667in” height=”1.8027449693788276in”}</p></blockquote><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>-s</p><p>-v</p><p>-q</p><p>-k，通过关键字匹配脚本、函数名、类名、方法名</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/57.jpg?raw=true">{width=”4.166666666666667in” height=”2.1729385389326334in”}</p></blockquote><p>-x，如果测试执行过程中有fail的用例，则测试立即停止</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/58.jpg?raw=true">{width=”4.166666666666667in” height=”2.1729385389326334in”}</p></blockquote><p>--maxfail=n，当失败用例达到n条则停止测试</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/59.jpg?raw=true">{width=”4.166666666666667in” height=”2.1729385389326334in”}</p></blockquote><p>-m，对用例进行标记，执行指定的用例</p><p>1、在项目根目录下新建文件pytest.ini</p><p>2、在pytest.ini文件中添加标记</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/60.jpg?raw=true">{width=”4.166666666666667in” height=”2.8889971566054244in”}</p></blockquote><p>3、使用装饰器标记测试用例@pytest.mark.标记</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/61.jpg?raw=true">{width=”4.166666666666667in” height=”1.855275590551181in”}</p></blockquote><p>4、执行测试时使用-m 标记即可执行指定的用例</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/62.jpg?raw=true">{width=”4.166666666666667in” height=”1.7165102799650043in”}</p></blockquote><h5 id="跳过用例"><a href="#跳过用例" class="headerlink" title="跳过用例"></a>跳过用例</h5><p>@pytest .mark.skip(reason=xxxx)，无条件跳过指定用例</p><p>@pytest mark.skipif(条件，reason=xxxx)，有条件跳过指定用例</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/63.jpg?raw=true">{width=”4.166666666666667in” height=”2.893416447944007in”}</p></blockquote><h5 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h5><p>@pytest .mark.parametrize(&#39;参数1，参数2，......&#39;，值)</p><p>参数，与被装饰的函数的形参相同</p><p>值，传递给参数的数据，通常为一个列表，如果需要给多个参数传数据可以将这些数据封包到元组中</p><p>例1：一个参数情况</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/64.jpg?raw=true">{width=”4.166666666666667in” height=”1.4433300524934383in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/65.jpg?raw=true">{width=”4.166666666666667in” height=”1.9778094925634295in”}</p></blockquote><p>例2：多个参数（每条用例的数据封包到元组中）</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/66.jpg?raw=true">{width=”4.166666666666667in” height=”1.4064020122484688in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/67.jpg?raw=true">{width=”4.166666666666667in” height=”1.5560269028871392in”}</p></blockquote><p>例3：登录测试用例</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/68.jpg?raw=true">{width=”4.166666666666667in” height=”2.147295494313211in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/69.jpg?raw=true">{width=”4.166666666666667in” height=”1.432571084864392in”}</p></blockquote><h5 id="前置后置"><a href="#前置后置" class="headerlink" title="前置后置"></a>前置后置</h5><p>模块级，作用范围为当前模块，模块中的所有用例执行前后分别执行1次前置和后置</p><p>setup_module()，前置，所有用例执行前运行1次</p><p>teardown_module()，后置，所有用例执行后执行1次</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/70.jpg?raw=true">{width=”4.166666666666667in” height=”3.3808234908136483in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/71.jpg?raw=true">{width=”4.166666666666667in” height=”2.718675634295713in”}</p></blockquote><p>函数级，作用范围为当前模块中的每一个测试函数，模块中的每条用例执行前后分别运行1次前置和后置</p><p>setup_function()，前置，每条用例执行前运行1次</p><p>teardown_function()，后置，每条用例执行后运行1次</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/72.jpg?raw=true">{width=”4.166666666666667in” height=”3.1950885826771653in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/73.jpg?raw=true">{width=”4.166666666666667in” height=”3.486307961504812in”}</p></blockquote><p>类级，作用范围为当前类，类中的所有用例执行前后分别运行1次前置和后置</p><p>setup_class()，前置，所有用例执行前运行1次</p><p>teardown_class()，后置，所有用例执行后运行1次</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/74.jpg?raw=true">{width=”4.166666666666667in” height=”2.65544072615923in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/75.jpg?raw=true">{width=”4.166666666666667in” height=”2.337912292213473in”}</p></blockquote><p>方法级，作用范围为当前类中的每一个测试方法，每条用例执行前后分别运行1次前置和后置</p><p>setup_method()或者setup()，前置，每条用例执行前运行1次</p><p>teardown_method()或者teardown()，后置，每条用例执行后运行1次</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/76.jpg?raw=true">{width=”4.166666666666667in” height=”3.407755905511811in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/77.jpg?raw=true">{width=”4.166666666666667in” height=”2.5226760717410324in”}</p></blockquote><p>用例：新增会员</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/78.jpg?raw=true">{width=”4.166666666666667in” height=”2.254727690288714in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/79.jpg?raw=true">{width=”4.166666666666667in” height=”1.4150393700787403in”}</p></blockquote><h5 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h5><p>创建：@pytest .fixture([name,scope,params,autouse])</p><p>name，用于指定fixture名称，如果不指定默认为被装饰的函数名</p><p>scope，指定固件fixture作用范围，module,class,function(默认),session,package</p><p>params，参数</p><p>autouse,设置为True，实现自动调用fixture</p><p>例1：局部fixture</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/80.jpg?raw=true">{width=”4.166666666666667in” height=”2.110239501312336in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/81.jpg?raw=true">{width=”4.166666666666667in” height=”2.270722878390201in”}</p></blockquote><p>通过yield实现后置</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/82.jpg?raw=true">{width=”4.166666666666667in” height=”2.802257217847769in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/83.jpg?raw=true">{width=”4.166666666666667in” height=”1.7833891076115485in”}</p></blockquote><h5 id="全局fixture"><a href="#全局fixture" class="headerlink" title="全局fixture"></a>全局fixture</h5><p>1、在项目下创建conftest.py文件，在该文件中实现fixture</p><p>可在所有的脚本中使用该fixture（yeild返回一个值）</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/84.jpg?raw=true">{width=”4.166666666666667in” height=”1.8820220909886265in”}</p></blockquote><p>2、调用</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/85.jpg?raw=true">{width=”4.166666666666667in” height=”1.6881255468066492in”}</p></blockquote><p>执行结果</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python2/86.jpg?raw=true">{width=”4.166666666666667in” height=”1.9246030183727034in”}</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python入门</title>
      <link href="2021/11/08/Python%E5%9F%BA%E7%A1%80/"/>
      <url>2021/11/08/Python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><h2 id="标识符，变量名、函数名、类名统称"><a href="#标识符，变量名、函数名、类名统称" class="headerlink" title="标识符，变量名、函数名、类名统称"></a>标识符，变量名、函数名、类名统称</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><pre><code>只能包含字母、数字、下划线，并且不能以数字开头不能与系统关键字、模块名相同系统关键字</code></pre><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/1.jpg?raw=true"></p><pre><code>严格区分大小写尽量使用有意义的英文单词    a = 20（无意义）    age = 20多个单词之间使用下划线连接    student_age = 20</code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre><code>声明：取个名字，给一个值（必须赋值；运算符左右两边加空格，提高代码可读性）    var = \&#39;abc\&#39;    var = 100    var = 100.98    var = True</code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre><code>输入：input(\[\&#39;message\&#39;\])    接收外部输入，无论输入哪种数据类型的值，都统一作为字符串处理    代码遇到input函数会暂停，直到敲入回车键后代码继续运行    message为可选的参数，一般用于输入的提示输出：print(value1,value2,\...\...sep=\&#39; \&#39;,end=\&#39;\\n\&#39;,file=sys.stdout)</code></pre><p>​        value1,表示要输出的内容，可以同时输出多个对象，中间使用逗号隔开</p><p>​        sep，在结果中多个对象值的分隔符，默认为空格</p><p>​        end，表示输出完成后的结束符，默认为换行符（\n）</p><p>​        file，将内容输出到指定文件</p><p>​        例1</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/2.jpg?raw=true"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>​        type(obj)，返回对象的类型</p><p>​        布尔型：bool</p><p>​        声明后不能改变</p><p>​        只有两个值：True、False</p><p>​        0、None、空字符、空列表、空字典，返回False，其他返回True</p><p>​    整型：</p><p>​        int（整数）</p><p>​        声明后不能被改变</p><p>​    浮点型：</p><p>​        float（带小数）</p><p>​        声明后不能被改变</p><p>​    字符串：</p><p>​        str，包含在引号之间的内容（可以是单引号、双引号、三引号）</p><p>​        声明后不能被改变</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/3.jpg?raw=true"></p><p>​    元组：</p><p>​        tuple，包含在()之间的内容，每一个元素之间使用逗号分隔，元组中的元素可以是任意数据类型</p><p>​        声明：tup = (1,2,3,4)</p><p>​        声明后不能被改变</p><p>​    列表：</p><p>​        list，包含在[]之间的内容，每一个元素之间用逗号分隔，列表中的元素可以是任意数据类型</p><p>​        li = [1,2,1.2,&#39;abcd&#39;,True,[1,2,3]]</p><p>​    字典：</p><p>​        dict，包含在{}之间的内容，每一个元素为一个键值对（key:value）,键只能为不可变的数据类型（int、                float、布尔型、字符串、元组），值可以为任意数据类型</p><p>​        声明：dic = {&#39;name&#39;:&#39;lucy&#39;,1:[1,2,3],1.8:{},True:&#39;abc&#39;,(1,2):1000}</p><p>​    集合（不常用）：</p><p>​        set，包括在{}之间的内容，每一个元素之间使用逗号分隔，集合中的元素可以是任意数据类型</p><p>​        集合中的元素不会重复，常用集合来去重</p><p>​    数据类型转换</p><p>​        bool（obj），根据对象的值返回布尔值</p><p>​        0、None、空字符、空列表、空字典、空元组，返回False</p><p>​        int（obj），将对象转换为整型</p><p>​    布尔型------&gt;整型</p><p>​        True ------&gt; 1</p><p>​        False ------&gt; 0</p><p>​    浮点型------&gt;整型</p><p>​        做截取（取整），会损失精度</p><p>​        字符串------&gt;整型</p><p>​        字符串中不能包含任何非数字字符</p><p>​        float(obj)，将对象转换为浮点型</p><p>​    布尔型------&gt;浮点型</p><p>​        True ------&gt; 1.0</p><p>​        False ------&gt; 0.0</p><p>​    整型------&gt;浮点型</p><p>​    字符串------&gt;浮点型</p><p>​    字符串中不能包含小数点以外的任何非数字字符</p><p>​    tuple(obj)，将对象转换为元组</p><p>​        字符串------&gt;元组</p><p>​        列表------&gt;元组</p><p>​        字典------&gt;元组</p><p>​    元组中只有键</p><p>​    list(obj)，将对象转换成列表</p><p>​        字符串------&gt;列表</p><p>​        元组------&gt;列表</p><p>​        字典------&gt;列表</p><p>​    列表中只有键</p><p>​    集合------&gt;列表</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/4.jpg?raw=true"></p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>​    占位符</p><p>​    语法：%[-w.p]type</p><p>​        -，表示左对齐，默认是右对齐</p><p>​        w，表示宽度</p><p>​        p，表示精度</p><p>​        type，表示数据类型（d-整数，f-浮点数，s-字符串）</p><p>​    例1：</p><p>​        %5.2f，表示一个浮点数，宽度为5，精确到小数点后第2位</p><p>​        %-5s，表示一个字符串，宽度为5，左对齐</p><p>​    例2：</p><p>​        输入一个用户的姓名手机号，按以下格式输出：姓名--xxx；手机号--xxxxxxxxxxx</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/5.jpg?raw=true"></p><p>​    例3：</p><p>​        输入学生的姓名、成绩，按格式输出每个学生的成绩信息、平均成绩（保留2位小数）</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/6.jpg?raw=true"></p><p>format</p><p>语法：&#39; &#39;{:w.p}&#39;.format(var) &#39;</p><p>​    默认左对齐</p><p>​    w，宽度</p><p>​    pf，表示浮点数的精度</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/7.jpg?raw=true"></p><p>f-string</p><p>语法：f&#39;{var[:w.pf]}&#39;</p><p>​    w，宽度</p><p>​    pf，表示浮点数的精度</p><p>​    例：</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/8.jpg?raw=true"></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>+，加法，返回两个对象的和</p><p>如何两个对象是字符串，则做字符串拼接</p><p>&#39;abc&#39; + &#39;efg&#39; = &#39;abcefg&#39;</p><p>-，减法，返回两个对象的差</p><p>*，乘法，返回两个对象乘积</p><p>如果运算的对象为1个字符串，1个数字，则复制该字符串n次，如：&#39;a&#39; * 5 = &#39;aaaaa&#39;</p><p>/，除法，返回两个对象的商</p><p>//，整除，返回小于等于两个对象商的最大整数</p><p>5 // 2 = 2</p><p>5 // -2 = -3</p><p>**，幂运算</p><p>3 ** 2 = 9</p><p>10 ** 2 = 100</p><p>10 ** -2 = 0.01</p><p>%，返回两个对象相除的余数</p><p>公式：r = a % b = a - b * (a // b)</p><p>5 % -2 = -1</p><p>-5 % 2 = 1</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/9.jpg?raw=true"></p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>=</p><p>+=</p><p>-=</p><p>*=</p><p>/=</p><p>//=</p><p>**=</p><p>%=</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/10.jpg?raw=true"></p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>运算结果为布尔值：True、False</p><p>== ，比较两个对象的值是否相等</p><p>&gt;、&gt;=、&lt;、&lt;=、!=</p><p>字符串可以比较，比较的是ascii码</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>运算对象为布尔表达式，运算结果为布尔值</p><p>and，参与运算的对象结果都为True，整体表达式结果为True，否则为False</p><p>or，参与运算的对象只要任意一个结果为True，整体表达式结果为True，都为False，结果为False</p><p>not，参与运算的对象结果为True，整体结果则为False，参与运算的对象结果为False，整体结果则为True</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><p>len(obj),返回对象（字符串、列表、元组、字典、集合）中的元素个数</p><p>sum(obj)，返回对象（列表、元组、字典、集合）中所有元素的和</p><p>max(obj)，返回对象（列表、元组、字典、集合、字符串）中最大元素</p><p>zip(obj1，obj2，......)，将多个对象打包</p><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>语法：字符串.方法名（[参数]）</p><p>count(sub[,start[,end]])，返回字符串中指定范围内指定子字符串的数量</p><p>sub，表示待查找的子字符串</p><p>start，表示开始位置索引</p><p>end，表示结束位置索引</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/11.jpg?raw=true"></p><p>index(sub[,start[,end]])，返回子字符串在字符串中的索引</p><p>如果有多个相同的子字符串则返回第一个的索引</p><p>如果不存在指定的子字符串，则报错</p><p>upper()，将字符串转换成大写</p><p>lower()，将字符串转换成小写</p><p>title()，将单词的首字母转换成大写</p><p>startswith(sub)，检查是否以指定的子字符串开始，如果是返回True，否则返回False</p><p>endswith(sub)，检查是否以指定的子字符串结尾，如果是返回True，否则返回False</p><p>replace(old,new[,count])，替换，可以指定替换次数（默认全部替换）</p><p>strip()，去除字符串前后的空字符</p><p>split([char])，将字符串使用指定的字符（如果不指定则默认使用空字符）分割，返回一个列表（字符串---&gt;列表）</p><p>join(iterable)，将可迭代对象转换为字符串,数字不可使用</p><p>rjust(len,c)：右填充</p><p>center(len,c)：中间填充</p><p>ljust(len,c)：左填充</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/12.jpg?raw=true"></p><p>len，填充后字符串的长度</p><p>c，填充的字符</p><p>isdecimal():判断字符串是否由数字组成，如果是返回True，否则返回False</p><p>isdigit()：判断字符串是否由数字组成，如果是返回True，否则返回False</p><p>isnumeric()：判断字符串是否由数字组成，如果是返回True，否则返回False</p><p>isalpha()：判断字符串是否由字母组成，如果是返回True，否则返回False</p><p>isalnum()：判断字符串是否由字母或者数字组成，如果是返回True，否则返回False</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/13.jpg?raw=true"></p><h3 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h3><p>元组特点：声明后不可变</p><p>语法：元组名.方法名([参数])</p><p>index(obj)：返回指定元素在元组中的索引，指定元素不存在则报错</p><p>count(obj)：返回指定元素在元组中的数量，指定元素不存在返回0</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/14.jpg?raw=true"></p><h3 id="列表方法（修改列表）"><a href="#列表方法（修改列表）" class="headerlink" title="列表方法（修改列表）"></a>列表方法（修改列表）</h3><p>语法：列表.方法名([参数])</p><p>index(obj)：返回指定元素在列表中的索引，指定元素不存在则报错</p><p>count(obj)：返回指定元素在列表中的数量，指定元素不存在返回0</p><p>clear()：清空列表元素</p><p>remove(obj)：删除列表中指定的元素</p><p>如果不存在报错</p><p>如果存在多个相同元素，则删除索引最小的</p><p>pop([index])，根据索引删除列表元素（如果不指定索引则删除最后一个元素）</p><p>append([obj])，在列表末尾添加元素，可以是任何类型的元素</p><p>insert(index,obj)，在列表指定索引位置插入元素</p><p>extend(iterable)，将一个可迭代对象的元素分别添加到列表</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/15.jpg?raw=true"></p><p>区别：</p><p>append()和insert()将元素作为整体添加</p><p>extend()将元素拆开添加到列表</p><p>sort([reverse = True[,key = obj]]),排序，默认为升序</p><p>reverse = True，表示降序排列</p><p>key，指定用于排序的值</p><p>reverse()，将列表反向</p><p>copy()，复制列表值</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/16.jpg?raw=true"></p></blockquote><h3 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h3><p>语法：字典.方法名([参数])</p><p>pop(key)，删除指定的键</p><p>get(key)，返回指定键的值，如果键不存在返回None</p><p>values()，以dict_values类型返回字典中所有的值</p><p>keys()，以dict_keys类型返回字典中所有的键</p><p>update(obj)，将指定对象更新到字典中</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/17.jpg?raw=true"></p><p>setdefault(key,default_value)，返回指定键key的值，如果这个键不存在则新增键值(key:default_value)对，并且返回default_value</p></blockquote><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/18.jpg?raw=true"></p></blockquote><p>items()，元组的方式返回键值对</p><p>popitem(),删除键值对，随机删除</p><p>framkeys(),根据可迭代对象快速创建一个字典</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/19.jpg?raw=true"></p></blockquote><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p>字符串、元组、字典、列表、集合</p><p>含有__iter__（）方法的对象就是可迭代对象</p><p>支持循环遍历（for）</p><p>序列</p><p>​    数据类型：字符串、元组、列表</p><p>​    操作类型：</p><p>索引，可以根据索引访问序列中的元素（0，len（obj）-1）</p><p>语法：obj[index]</p><p>切片，通过索引返回对象的子元素片段</p><p>语法：obj[start:end:step]</p><p>start，开始位置，如果省略表示从第一个位置开始</p><p>end，结束位置，实际返回的是end-1位置上的元素，如果省略表示取到最后一个元素</p><p>step，表示步长(每间隔多少元素取一个)，省略表示1</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/20.jpg?raw=true"></p></blockquote><p>非序列</p><p>​    字典</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/21.jpg?raw=true"></p></blockquote><p>​    集合</p><h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><h4 id="分支语句（if）"><a href="#分支语句（if）" class="headerlink" title="分支语句（if）"></a>分支语句（if）</h4><p>单分支</p><p>描述了程序在布尔表达式结果为 True的情况下需要执行的操作</p><p>语法：注意冒号和缩进（默认为4个空格）</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/22.jpg?raw=true"></p></blockquote><p>例1:输出学生的成绩，成绩&gt;=60，输出合格，否则输出不合格</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/23.jpg?raw=true"></p></blockquote><p>双分支</p><p>描述了程序在布尔表达式结果为True或者False的情况下需要执行的操作</p><p>语法：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/24.jpg?raw=true"></p></blockquote><p>例2 判断奇偶数</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/25.jpg?raw=true"></p></blockquote><p>多分支</p><p>描述了程序在不同的布尔表达式下分别需要进行的操作</p><p>语法：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/26.jpg?raw=true"></p></blockquote><p>例3</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/27.jpg?raw=true"></p></blockquote><p>嵌套if语句</p><p>例4</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/28.jpg?raw=true"></p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/29.jpg?raw=true"></p></blockquote><h4 id="循环语句（while、for）"><a href="#循环语句（while、for）" class="headerlink" title="循环语句（while、for）"></a>循环语句（while、for）</h4><p>while语句</p><p>描述了程序在指定条件成立的情况下重复完成某个操作</p><p>语法：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/30.jpg?raw=true"></p></blockquote><p>例1:输出0-9这10个数字</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/31.jpg?raw=true"></p></blockquote><p>例2:计算1+2+3+...+10的和</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/32.jpg?raw=true"></p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/33.jpg?raw=true"></p></blockquote><p>例3:循环次数未知，可以通过变量值的变化控制循环继续还是结束</p><p>使用字典保存用户信息userinfo = {&#39;user1&#39;:[&#39;123456&#39;,&#39;张三&#39;],&#39;user2&#39;:[&#39;123456&#39;,&#39;李四&#39;]}，完成注册和登录功能</p><p>注册，如果用户名已经存在，提示错误；如果密码不是6位数字，提示错误</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/34.jpg?raw=true"></p></blockquote><p>for语句</p><p>适用于循环次数确定的循环</p><p>语法：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/35.jpg?raw=true"></p></blockquote><p>i，变量，可以不声明，在循环内部可以直接使用该变量的值</p><p>range(start,end)，生成【start，end】范围内的数字序列</p><p>例1:输出0-9这10个数字</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/36.jpg?raw=true"></p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/37.jpg?raw=true"></p></blockquote><p>例2:输入1个正整数n，计算1+2+...+n的和，如果n=1，和为1</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/38.jpg?raw=true"></p></blockquote><p>例3:将字符串s=&#39;qw$^e&amp;sASd1*23(&#39;中的特殊符号去掉</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/39.jpg?raw=true">{width=”4.166666666666667in” height=”0.5642782152230971in”}</p></blockquote><p>例4:嵌套for循环，打印5行5列*</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/40.jpg?raw=true">{width=”4.166666666666667in” height=”0.557244094488189in”}</p></blockquote><p>例5:打印九九乘法表</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/41.jpg?raw=true">{width=”4.166666666666667in” height=”0.5224912510936133in”}</p></blockquote><h4 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h4><p>continue,结束当前循环，开始下一次新的循环</p><p>break，终止循环</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/42.jpg?raw=true">{width=”4.166666666666667in” height=”0.7757294400699912in”}</p></blockquote><h2 id="函数（重要）"><a href="#函数（重要）" class="headerlink" title="函数（重要）"></a>函数（重要）</h2><p>声明：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/43.jpg?raw=true">{width=”4.166666666666667in” height=”1.2190682414698162in”}</p></blockquote><p>函数名：必须符合标识符命名规范</p><p>参数：也叫形参，可选，可以有多个。在函数内部可以直接使用形参</p><p>返回值：可选的，可以同时返回多个值，如果没有return语句默认返回None</p><p>调用：函数名([参数1，参数2，......])</p><p>参数：也叫实参，根据形参传入实参</p><p>例1:无参无返回值</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/44.jpg?raw=true">{width=”4.166666666666667in” height=”0.31559930008748904in”}</p></blockquote><p>例2:多个参数与多个返回值</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/45.jpg?raw=true">{width=”4.166666666666667in” height=”0.7960083114610673in”}</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h4><p>必须参数（位置参数）</p><p>要求在调用时必须严格按照形参的数量、顺序、数据类型传入实参</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/46.jpg?raw=true">{width=”4.166666666666667in” height=”0.5644094488188977in”}</p></blockquote><p>默认参数</p><p>在声明函数时通过键值对（key=value）的形式指定形参的值，指定了以后在调用函数时可以不为该参数传值（此时使用默认值），如果传入则使用实际传入的值</p><p>默认参数必须放在位置参数后面</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/47.jpg?raw=true">{width=”4.166666666666667in” height=”0.7123239282589676in”}</p></blockquote><p>可变参数</p><p>*args，接收若干的位置参数，将传入的值封包一个元组args中</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/48.jpg?raw=true">{width=”4.166666666666667in” height=”0.6301826334208224in”}</p></blockquote><p>**kwargs，接收若干的关键字参数，将传入的值封包一个字典kwargs中</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/49.jpg?raw=true">{width=”4.166666666666667in” height=”0.5736132983377078in”}</p></blockquote><h4 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h4><p>位置参数，根据形参的数量、顺序、数据类型传入实参</p><p>关键字参数（指定参数）</p><p>在调用函数时，通过键值对（key=value）形式指定将实参传给某个形参，此时可以不用再关心参数顺序</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/50.jpg?raw=true">{width=”4.166666666666667in” height=”0.7266546369203849in”}</p></blockquote><p>练习</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/51.jpg?raw=true">{width=”4.166666666666667in” height=”1.3433759842519686in”}</p></blockquote><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在函数内部声明的变量，只能在函数内部使用</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在函数外部声明的变量，可以在函数的内部使用，也可以在函数外部使用</p><p>global</p><p>在函数内部如果需要修改全局变量（不可变数据类型），需要使用global声明变量</p><p>如果全局变量为可变数据类型，在函数内部可以任意操作该全局变量，不需要使用global声明</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/52.jpg?raw=true">{width=”4.166666666666667in” height=”1.1883136482939634in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/53.jpg?raw=true">{width=”4.166666666666667in” height=”0.8601881014873141in”}</p></blockquote><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><p>在函数内部return返回函数本身</p><p>注意</p><p>递归需要向已知的方向进行</p><p>递归层数一般不超过1000层</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/54.jpg?raw=true">{width=”4.166666666666667in” height=”0.8414326334208224in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/55.jpg?raw=true">{width=”4.166666666666667in” height=”0.9002055993000875in”}</p></blockquote><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>应用场景：不会重复调用的函数</p><p>语法：lambda[参数1，......]:返回值</p><p>必须，并且只能有一个返回值</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/56.jpg?raw=true">{width=”4.166666666666667in” height=”0.8464227909011374in”}</p></blockquote><p>例：排序，通过匿名函数指定用于排序的key</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/57.jpg?raw=true">{width=”4.166666666666667in” height=”1.1776082677165354in”}</p></blockquote><h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><p>自定义模块，py文件即为一个模块</p><p>包，存在一个<strong>__init</strong>__.py文件的目录，在包中可以有若干的模块</p><p>导入</p><p>import 模块名/包名.模块名</p><p>导入一个模块，使用时通过模块名.成员名引用模块下的指定内容</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/58.jpg?raw=true">{width=”4.166666666666667in” height=”0.36897747156605426in”}</p></blockquote><p>from 模块名/包名 import 成员1，成员2，......</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/59.jpg?raw=true">{width=”4.166666666666667in” height=”0.8817202537182852in”}</p></blockquote><p>from 模块名.包名 import *</p><p>导入模块下的所有成员</p><p>as，可以为导入的模块或者成员取别名，使用时通过别名引用即可</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/60.jpg?raw=true">{width=”4.166666666666667in” height=”0.4782403762029746in”}</p></blockquote><h4 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h4><p>time</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/61.jpg?raw=true">{width=”4.166666666666667in” height=”0.358669072615923in”}</p></blockquote><p>time.time()，返回1970年1月1日到当前的秒数</p><p>time.localtime()，返回本地日期信息</p><p>time.sleep()，暂停指定时间</p><p>time.strftime(&#39;%Y-%m-%d %X&#39;)，返回格式化后的日期时间</p><p>%Y - 4位年；%m - 2位月；%d - 2位天</p><p>%X - 小时：分钟：秒</p><p>%H - 小时；%M - 分钟；%S - 秒</p><p>sys</p><p>sys.path，以列表返回python系统的环境变量</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/62.jpg?raw=true">{width=”4.166666666666667in” height=”0.38777340332458443in”}</p></blockquote><p>os</p><p>os.system(命令)，执行系统命令</p><p>os.getcwd()，获取当前工作命令</p><p>os.mkdir(path),创建目录</p><p>os.listdir(path)，以列表返回指定目录下的文件名、目录名</p><p>os.path.exists(path)，检查指定对象是否存在，存在返回True，否则返回False</p><p>os.path.isdir(path)，检查指定对象是否是目录，是返回True,否则返回False</p><p>os.path.isfile(path)，检查指定对象是否是文件，是返回True,否则返回False</p><p>os.path.abspath(path)，返回指定对象的绝对路径</p><p>os.path.abspath(<strong>__file__</strong>)，返回当前文件的绝对路径</p><p>os.path.dirname(<strong>__file__</strong>)，返回当前文件所在目录名称</p><p>os.path.join(path1,path2)，将两个对象拼接成一个路径</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/63.jpg?raw=true">{width=”4.166666666666667in” height=”1.6807261592300962in”}</p></blockquote><p>例1:输入1个目录路径，统计出该目录下有多少个文件和目录</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/64.jpg?raw=true">{width=”4.166666666666667in” height=”1.4678433945756781in”}</p></blockquote><p>安装第三方模块</p><p>pycharm安装：Preferences---&gt;Project Interpreter----&gt;&quot;+&quot;----&gt;搜索要安装的包</p><p>命令方式（推荐）:</p><p>pip -V，返回版本</p><p>pip list，列出已经安装的所有模块</p><p>pip show 模块名，列出已经安装的指定模块的信息</p><p>pip install 模块名，从默认镜像源安装指定模块</p><p>临时配置：-i 镜像源</p><p>pip install xlrd -i 镜像源</p><p>永久配置：pip config set global.index-url 镜像源</p><p>pip config set global.index-url 镜像源</p><p>pip install xlrd</p><p>pip uninstall 模块名，卸载已经安装的模块</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h3><p>模块:xlrd（读）</p><p>pip install xlrd</p><p>使用步骤</p><p>1、打开文件</p><p>open_workbook(path)，打开excel文件，返回一个文件对象</p><p>2、获取文件中的sheet名称</p><p>sheets（），返回excel文件中所有的sheet对象，通过对象调用name返回sheet名称</p><p>sheet_names()，返回excel文件中所有的sheet名称</p><p>sheet_by_name(sheet_name)，通过sheet名称获取指定的表</p><p>sheet_by_index(index)，通过索引获取指定的表</p><p>3、通过sheet名称获取指定表中的数据</p><p>行</p><p>nrows，返回sheet中的行数</p><p>row_values(row)，获取指定行中的数据，参数row为行号</p><p>列</p><p>ncols，返回sheet中的列数</p><p>col_values(col)，获取指定列中的数据，参数col为列号</p><p>单元格</p><p>cell_values(row,col)，返回指定单元格的数据</p><p>例</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/65.jpg?raw=true">{width=”4.166666666666667in” height=”2.912706692913386in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/66.jpg?raw=true">{width=”4.166666666666667in” height=”0.9751771653543307in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/67.jpg?raw=true">{width=”4.166666666666667in” height=”1.229942038495188in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/68.jpg?raw=true">{width=”4.166666666666667in” height=”3.0560520559930007in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/69.jpg?raw=true">{width=”4.166666666666667in” height=”2.922001312335958in”}</p></blockquote><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><p>模块：csv</p><p>使用步骤：</p><p>打开文件（open）</p><p>读取文件内容（csv.reader()）</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/70.jpg?raw=true">{width=”4.166666666666667in” height=”1.3182436570428697in”}</p></blockquote><h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><p>打开文件</p><p>语法：open(file[,mode=type,encoding=编码])，打开指定文件，返回一个文件对象</p><p>file，表示待操作文件，相对路径、绝对路径都行（不能是目录）</p><p>mode，表示打开文件的方式，如果省略则表示只读模式</p><p>r，只读，如果指定的文件不存在系统报错</p><p>w，覆盖写入，如果指定的文件不存在，系统会自动创建该文件，然后执行写入操作</p><p>a，追加写入，如果指定的文件不存在，系统会自动创建该文件，然后执行写入操作</p><p>b，表示二进制，一般用于对图片类的文件操作</p><p>encoding，指定编码，（如果打开文件提示编码错误，再加上encoding参数即可）</p><p>例1</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/71.jpg?raw=true">{width=”4.166666666666667in” height=”2.39501312335958in”}</p></blockquote><p>常用方法</p><p>closed，检查文件是否为关闭状态，如果是返回True，否则返回False</p><p>close()，关闭文件</p><p>encoding，返回打开文件的编码</p><p>注意：文件打开后需要关闭</p><p>例2</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/72.jpg?raw=true">{width=”4.166666666666667in” height=”2.6608070866141733in”}</p></blockquote><p>读文件</p><p>read（），将文件的所有内容读处理，保存在字符串中</p><p>readline()，读取文件中的一行，保存在字符串中</p><p>readlines（），将文件中所有内容读取出来，保存在列表中，文件中的每一行为列表中的一个元素</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/73.jpg?raw=true">{width=”4.166666666666667in” height=”2.424317585301837in”}</p></blockquote><p>写文件</p><p>write(s)，将一个字符串写入文件</p><p>writelines(iter)，将一个可迭代对象的所有元素写入文件</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/74.jpg?raw=true">{width=”4.166666666666667in” height=”1.8027963692038496in”}</p></blockquote><p>例：</p><p>有一个文件保存学生的成绩信息，计算出每个学生的总成绩</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/75.jpg?raw=true">{width=”4.166666666666667in” height=”1.3387489063867017in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/76.jpg?raw=true">{width=”4.166666666666667in” height=”2.4358431758530186in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/77.jpg?raw=true">{width=”4.166666666666667in” height=”0.8931813210848644in”}</p></blockquote><h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><p>管理上下文，可以实现打开文件后自动关闭</p><p>语法:with open(file) as f:</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/78.jpg?raw=true">{width=”4.166666666666667in” height=”1.6508759842519685in”}</p></blockquote><p>练习</p><p>例1：一个目录users，users中使用文件保存用户信息（每个用户一个文件，文件名为账号），文件中包含三行内容，分别是密码、姓名、账号余额，格式如下：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/79.jpg?raw=true">{width=”3.0208333333333335in” height=”1.0520833333333333in”}</p></blockquote><p>例2：实现系统的登录、注册功能</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>语法：</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/80.jpg?raw=true">{width=”3.0625in” height=”4.163225065616798in”}</p></blockquote><p>try</p><p>将有可能引发异常的语句放在try中</p><p>except</p><p>捕获异常，并且针对该异常进行相应的处理，可以同时存在多个except语句</p><p>except 异常，捕获1个指定异常</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/81.jpg?raw=true">{width=”4.166666666666667in” height=”2.7285181539807524in”}</p></blockquote><p>except (异常1，异常2，.….)，捕获元组中的异常</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/82.jpg?raw=true">{width=”4.166666666666667in” height=”2.828021653543307in”}</p></blockquote><p>except Exception，捕获所有的异常</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/83.jpg?raw=true">{width=”4.166666666666667in” height=”2.953678915135608in”}</p></blockquote><p>else</p><p>如果try中的语句没有引发异常，则执行else后的代码</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/84.jpg?raw=true">{width=”4.166666666666667in” height=”2.764896106736658in”}</p></blockquote><p>finally</p><p>无论是否引发异常，finally的代码段都会执行</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/85.jpg?raw=true">{width=”4.166666666666667in” height=”2.8982360017497815in”}</p></blockquote><p>raise</p><p>主动抛出异常</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/86.jpg?raw=true">{width=”4.166666666666667in” height=”3.451123140857393in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/87.jpg?raw=true">{width=”4.166666666666667in” height=”2.27in”}</p></blockquote><h2 id="数据库操作（重要）"><a href="#数据库操作（重要）" class="headerlink" title="数据库操作（重要）"></a>数据库操作（重要）</h2><p>模块：pymysql</p><p>pip install pymysql</p><p>使用步骤</p><p>1、导入pymysql模块</p><p>2、调用connect方法连接数据库，返回一个数据库对象</p><p>con = pymysql.connect(user=None,password=None,host=None,db=None,port=None,charset=None)</p><p>user,数据库用户名</p><p>password，数据库用户密码</p><p>host，数据库服务器地址</p><p>db，要连接的database</p><p>port，端口号</p><p>charset，字符集</p><p>常用方法</p><p>cursor()，创建游标</p><p>commit()，提交事务</p><p>rollback()，回滚事务</p><p>close()，关闭数据库连接</p><p>3、创建游标</p><p>cur = con.cursor(),通过数据库连接对象调用cursor（）方法创建游标，用于执行SQL语句</p><p>4、操作数据库</p><p>通过游标调用相应的方法执行SQL语句</p><p>execute（sql）,执行sql语句，返回该sql语句影响的行数</p><p>fetchone()，从select语句的查询结果中返回一行记录</p><p>fetchall()，从select语句的查询结果中返回所有记录</p><p>close()，关闭游标</p><p>5、关闭游标，关闭数据库连接</p><p>cur.close()</p><p>con.close()</p><blockquote><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/88.jpg?raw=true">{width=”4.166666666666667in” height=”1.537671697287839in”}</p><p><img src="https://github.com/yixiaobaiio/hexo-blogs/blob/master/source/img/python/89.jpg?raw=true">{width=”4.166666666666667in” height=”2.944983595800525in”}</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础(一)</title>
      <link href="2021/11/02/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/11/02/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试基础（一）"><a href="#软件测试基础（一）" class="headerlink" title="软件测试基础（一）"></a>软件测试基础（一）</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a><strong>要求</strong></h2><pre class="line-numbers language-none"><code class="language-none">1、掌握测试思维2、掌握测试常用工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试思维"><a href="#测试思维" class="headerlink" title="测试思维"></a><strong>测试思维</strong></h2><pre class="line-numbers language-none"><code class="language-none">1、站在不同角度去验证软件的质量（抵用券已使用、已过期-是否还能使用）2、不同应用场景去验证软件质量（淘宝双11-多人同时使用，服务器是否正常处理请求）3、不常用功能覆盖去验证软件质量（飞机手动模式，对功能全面覆盖验证）通过学习软件测试相关理论可提高测试思维<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试工具-编程"><a href="#测试工具-编程" class="headerlink" title="测试工具/编程"></a><strong>测试工具/编程</strong></h2><pre class="line-numbers language-none"><code class="language-none">1、使用测试工具来查找软件缺陷，可提高软件测试效率优点：容易上手，通用性强缺点：灵活度欠缺（如：支付信息加密）2、编写代码来查找软件缺陷，可提高软件测试效率优点：灵活度高（如：支付信息加密）缺点：学习成本高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="软件测试工作流程"><a href="#软件测试工作流程" class="headerlink" title="软件测试工作流程"></a><strong>软件测试工作流程</strong></h2><pre class="line-numbers language-none"><code class="language-none">需求--》测试点--》用例--》执行--》缺陷--》报告需求：分析需求根据产品需求文档，提取出规则要求。（明确需求，梳理规则）目的：1、明确软件有哪些功能和要求2、为设计测试点做准备功能：注册模块规则：1、手机号未注册2、手机号格式正确（1）位数11位（2）第一位为1（3）第二位不能为【0、1、2、6、9】3、不可为空测试点：针对需求设计测试点要进行验证的点，根据需求规则设计测试点。目的：1、防止测试有遗漏2、为编写测试用例做准备根据规则提取测试点。规则：1、手机号未注册2、手机号格式正确（1）位数11位（2）第一位为1（3）第二位不能为【0、1、2、6、9】3、不可为空测试点提取：正确：11位+未注册+格式正确（第一位1、第二位3）错误：手机号已注册用例：针对测试点设计测试用例将测试点转化为测试能执行的文档。目的：1、指导测试点正确测试实施2、为执行测试做准备执行：根据用例执行测试缺陷：针对缺陷进行管理当执行测试实际结果于预期结果不符时为缺陷，需要对缺陷进行管理。管理缺陷：缺陷创建--》缺陷跟踪--》缺陷验证目的：1、软件测试的目的就是减少软件缺陷（提交缺陷--》等待修复--》验证缺陷）2、为测试报告做准备报告：总结测试报告对于本次执行测试缺陷进行分析统计，对于本次测试实施进行总结。主要内容：1）缺陷统计2）缺陷分析3）遗留缺陷4）测试总结<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p><strong>什么是测试用例？</strong></p><pre class="line-numbers language-none"><code class="language-none">用例：（不同）用户使用的案例测试用例：执行测试时用户案例testcase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>为什么写测试用例？</strong></p><pre class="line-numbers language-none"><code class="language-none">保证测试点的正确执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>测试用例格式</strong></p><pre class="line-numbers language-none"><code class="language-none">八大要素用例编号：区分用例的唯一标识符，格式：项目简称_模块_数字编号用例标题：本条用例的测试点，格式：预期结果（测试点）项目&#x2F;模块：用例所属的项目模块，格式：模块名前置条件：执行本条用例的前置操作优先级：本条用例的优先级，P0-P4，P0最高测试步骤：执行用例的操作步骤测试数据：执行本条测试用例使用的测试数据预期结果：本条用例执行预期结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">实例：微信登录测试点：1、登录成功2、密码错误，登录失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例标题</th><th>项目/模块</th><th>前置条件</th><th>优先级</th><th>测试步骤</th><th>测试数据</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>wx_login_001</td><td>登录成功</td><td>登录</td><td>1、注册成功2、打开登录页面</td><td>P0</td><td>1、输入账号2、输入密码3、点击登录按钮</td><td>1、账号：13600001111 2、密码：123456</td><td>登录成功，跳转至个人主页</td><td></td><td></td></tr><tr><td>wx_login_002</td><td>登录失败（密码错误）</td><td>登录</td><td>1、注册成功2、打开登录页面</td><td>P1</td><td>1、输入账号2、输入密码3、点击登录按钮</td><td>1、账号：13600001111 2、密码：111111</td><td>登录失败，提示密码错误</td><td></td><td></td></tr></tbody></table><h2 id="测试点提取方法"><a href="#测试点提取方法" class="headerlink" title="测试点提取方法"></a>测试点提取方法</h2><h3 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h3><pre class="line-numbers language-none"><code class="language-none">说明：将测试数据中具有某种共同特征的数据集合，进行划分。如：未满18岁禁止入内。共同特征：1）&gt;&#x3D;18岁：19、20......2)&lt;18岁：17、16......分类:有效等价类：满足需求的数据集合  &gt;&#x3D;18岁无效等价类：不满足需求的数据集合 &lt;18岁步骤：1、明确需求2、确定有效和无效等价类3、提取数据编写测试用例&gt;&#x3D;18岁，允许进入有效：&gt;&#x3D;18  无效：&lt;18测试数据：17、19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例</strong></p><pre class="line-numbers language-none"><code class="language-none">验证qq账号的合法性要求：6-10位自然数1、明确需求位数：6-10位自然数：1、2、3、4....2、确定有效和无效等价类有效：8位无效：5位、11位、非自然数3、提取数据有效：12345678无效：12345、12345678901、a123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例标题</th><th>模块/项目</th><th>前置条件</th><th>优先级</th><th>测试步骤</th><th>测试数据</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>qq_account_001</td><td>合法（8位自然数）</td><td>qq</td><td>1、打开qq 2、打开账号验证页面</td><td>P0</td><td>1、输入账号</td><td>12345678</td><td>合法</td><td></td><td></td></tr><tr><td>qq_account_002</td><td>合法（5位自然数）</td><td>qq</td><td>1、打开qq 2、打开账号验证页面</td><td>P0</td><td>1、输入账号</td><td>12345</td><td>不合法</td><td></td><td></td></tr><tr><td>qq_account_003</td><td>不合法（11位自然数）</td><td>qq</td><td>1、打开qq 2、打开账号验证页面</td><td>P0</td><td>1、输入账号</td><td>12345678901</td><td>不合法</td><td></td><td></td></tr><tr><td>qq_account_004</td><td>不合法（非自然数）</td><td>qq</td><td>1、打开qq 2、打开账号验证页面</td><td>P0</td><td>1、输入账号</td><td>a123456</td><td>不合法</td><td></td><td></td></tr></tbody></table><p><strong>适用场景</strong></p><pre class="line-numbers language-none"><code class="language-none">针对：需要有大量数据测试输入，但是没法穷举测试的地方。1）输入框2）下拉列表3）单选复选框典型代表：页面输入框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习</strong></p><pre class="line-numbers language-none"><code class="language-none">需求：验证某城市电话号码正确性要求：1、区号：空或是三位数字2、前缀码：非0且非1开头的三位数字3、后缀码：四位数字1、明确需求区号：空、三位数字前缀码：非0和非1开头  三位数字后缀码：四位数字整合需求：位数：7位或10位自然数：7位时，第一位不为0或1；10位时，第四位不为0或12、确定有效等价类和无效等价类有效：7位，第一位不为0或1；10位第四位不为0或1无效：6位，8位，11位，7位第一位为0或1，10位第四位为0或1，非自然数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th></th><th>有效</th><th>有效数据</th><th>无效</th><th>无效数据</th></tr></thead><tbody><tr><td>区号</td><td>长度</td><td>1、空    2、3位</td><td>1、空  2、123</td><td>大于0小于3位；大于3位</td><td>12；1234</td></tr><tr><td>前缀码</td><td>长度</td><td>3位</td><td>223</td><td>小于3位或大于3位</td><td>2234；22</td></tr><tr><td>后缀码</td><td>长度</td><td>4位</td><td>1234</td><td>小于4位或大于4位</td><td>12345；123</td></tr><tr><td>区号</td><td>类型</td><td>数字</td><td>123</td><td>非数字</td><td>a12</td></tr><tr><td>前缀码</td><td>类型</td><td>数字</td><td>223</td><td>非数字</td><td>a12</td></tr><tr><td>后缀码</td><td>类型</td><td>数字</td><td>1234</td><td>非数字</td><td>a123</td></tr><tr><td>区号</td><td>规则</td><td>/</td><td>/</td><td>/</td><td>/</td></tr><tr><td>前缀码</td><td>规则</td><td>非0非1开头</td><td>223</td><td>0开头或1开头</td><td>012；123</td></tr><tr><td>后缀码</td><td>规则</td><td>/</td><td>/</td><td>/</td><td>/</td></tr></tbody></table><h3 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h3><p><strong>概念名词</strong></p><pre class="line-numbers language-none"><code class="language-none">1、边界值节点：选择正好等于、刚好大于、刚好小于边界值作为测试数据.上点：边界上的点（正好等于）离点：距离商店最近的点（刚好大于、刚好小于）内点：范围内的点（区间范围内的数据）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤</strong></p><pre class="line-numbers language-none"><code class="language-none">1、明确需求2、确定有效和无效等价类3、确定边界范围值4、提取数据编写测试用例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习</strong></p><pre class="line-numbers language-none"><code class="language-none">需求：通过边界值法验证标题长度的合法性要求：标题长度大于0，小于等于30个字符1、明确需求（0，30】2、确定有效和无效等价类（优化：离点：开内闭外）有效：4  无效：-1， 31上点：0，30  离点：-1，1，29，30  内点：10上点必选，内点必选，离点开内闭外3、测试用例上点：0，30内点：10离点：1，30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用场景</strong></p><pre class="line-numbers language-none"><code class="language-none">在等价类的基础上针对有边界范围的测试数据输入的地方（重点关注边界）常见词语描述：大小、尺寸、重量、最大、最小、至多、至少等词语修饰典型代表：有边界范围的输入框类测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="判定表"><a href="#判定表" class="headerlink" title="判定表"></a>判定表</h3><pre class="line-numbers language-none"><code class="language-none">1、为什么使用判定表例：验证“若用户欠费或者关机，则不允许主被叫”功能测试（相互制约关系）2、判定表是什么定义：一种以表格形式表达多条件逻辑判断的工具组成：条件桩：列出问题中的所有条件，列出条件的次序无关紧要动作桩：列出问题中可能采取的操作，操作排列顺序没有约束条件项：列出条件对应的取值，所有可能情况下的真假值动作项：列出条件项的、各种取值情况下应该采取的动作结果规则：判定表中贯穿条件项和动作项的一列就是一条规则假设有n个条件，每个条件的取值有两个，全组合有2的n次方种规则3、使用步骤3.1 明确需求3.2 画判定表1）列出条件桩和动作桩2)填写条件项，对条件进行全组合3）根据条件项的组合确定动作项4）简化、合并相似规则（有相同的动作）3.3 根据规则编写测试用例应用场景有多个输入条件，多个输出结果，输入条件之间有组合关系，输入条件和输出结果之间有依赖（制约）关系。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>条件</th><th>是否欠费</th><th>是</th><th>是</th><th>否</th><th>否</th></tr></thead><tbody><tr><td>条件</td><td>是否关机</td><td>是</td><td>否</td><td>是</td><td>否</td></tr><tr><td>操作</td><td>是否允许主被叫</td><td>否</td><td>否</td><td>否</td><td>是</td></tr></tbody></table><p><strong>练习</strong></p><p><strong>订购单检查</strong></p><pre class="line-numbers language-none"><code class="language-none">规则：1、如果金额大于500，又未过期，则发出批准单和提货单2、如果金额大于500，但过期了，则不发批准单和提货单3、如果金额小于等于500，则不论是否过期都发出批准单和提货单4、在过期的情况下不论金额大小还需要发出通知单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>判定表</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>是否大于500</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td></td><td>是否过期</td><td>是</td><td>否</td><td>是</td><td>否</td></tr><tr><td></td><td>批准单</td><td>不发</td><td>发</td><td>发</td><td>发</td></tr><tr><td></td><td>提货单</td><td>不发</td><td>发</td><td>发</td><td>发</td></tr><tr><td></td><td>通知单</td><td>发</td><td>不发</td><td>发</td><td>不发</td></tr></tbody></table><table><thead><tr><th>用例编号</th><th>用例标题</th><th>模块/项目</th><th>前置条件</th><th>优先级</th><th>操作步骤</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>order_001</td><td>发通知单（大于500，过期）</td><td>订单模块</td><td>/</td><td>P0</td><td>/</td><td>发通知单</td><td></td><td></td></tr><tr><td>order_002</td><td>发批准单/提货单（大于500，未过期）</td><td>订单模块</td><td>/</td><td>P0</td><td>/</td><td>发批准单/提货单</td><td></td><td></td></tr><tr><td>order_003</td><td>发批准单/提货单（不大于500，未过期）</td><td>订单模块</td><td>/</td><td>P0</td><td>/</td><td>发批准单/提货单</td><td></td><td></td></tr><tr><td>order_004</td><td>发批准单/提货单/通知单（不大于500，已过期）</td><td>订单模块</td><td>/</td><td>P0</td><td>/</td><td>发批准单/提货单/通知单</td><td></td><td></td></tr></tbody></table><h3 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h3><pre class="line-numbers language-none"><code class="language-none">说明：场景法也叫流程图法，是用流程图描述用户的使用场景，然后通过覆盖流程路径来设计测试用例。意义：用户使用角度：用户平时使用的不是单功能，而是多个功能组合起来进行使用测试人员角度：平时测试的都是单个功能进行测试，容易忽略多功能的组合测试场景法：用流程图描述用户的使用场景，然后通过覆盖流程路径来设计测试用例意义：平时测试的都是单个功能点进行测试，容易忽略多个功能的组合测试应用场景：根据实际的应用场景，来测试业务用例可使用场景法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ATM机取款测试</strong></p><table><thead><tr><th>用例编号</th><th>用例标题</th><th>模块/项目</th><th>前置条件</th><th>优先级</th><th>操作步骤</th><th>测试数据</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>ATM_001</td><td>取款失败（非银行卡）</td><td></td><td>非银行卡</td><td>P1</td><td>1、插入卡片</td><td>无</td><td>取款失败，提示非银行卡</td><td></td><td></td></tr><tr><td>ATM_002</td><td>取款失败（密码错误）</td><td>ATM</td><td>银行卡一张</td><td>P1</td><td>1、插入卡片      2、输入密码错误3次</td><td>123456</td><td>取款失败，提示密码错误</td><td></td><td></td></tr><tr><td>ATM_003</td><td>取款失败（金额为0）</td><td>ATM</td><td>银行卡一张</td><td>P1</td><td>1、插入卡片      2、输入正确密码</td><td>111111</td><td>取款失败，提示余额不足</td><td></td><td></td></tr><tr><td>ATM_004</td><td>取款失败（取款金额大于余额）</td><td>ATM</td><td>银行卡一张，余额200</td><td>P1</td><td>1、插入卡片      2、输入正确密码      3、输入取款金额2000</td><td>111111      2000</td><td>取款失败，提示余额不足</td><td></td><td></td></tr><tr><td>ATM_005</td><td>取款失败（ATM机钞票不足）</td><td>ATM</td><td>银行卡一张，余额2000      ATM机可用钞票200</td><td>P1</td><td>1、插入卡片      2、输入正确密码      4、输入取款金额2000</td><td>111111      2000</td><td>取款失败，ATM机可用钞票不足</td><td></td><td></td></tr><tr><td>ATM_006</td><td>取款成功</td><td>ATM</td><td>银行卡一张，余额2000      ATM机可用钞票20000</td><td>P0</td><td>1、插入卡片      2、输入正确密码      4、输入取款金额2000</td><td>111111      2000</td><td>取款成功</td><td></td><td></td></tr></tbody></table><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p><strong>定义</strong></p><p>软件使用过程中存在的任何问题都叫软件的缺陷，简称bug。</p><p><strong>判定标准</strong></p><p>1、少功能—软件未实现需求说明书中明确要求的功能。</p><p>2、功能错误—软件出现需求说明书中指明不应该出现的错误。</p><p>3、多功能—软件实现的功能超出需求说明书指明的范围。</p><p>4、隐形功能错误—软件未实现需求说明书中虽未明确但应该实现的要求。</p><p>5、不易使用—软件难以理解，不易使用，运行缓慢，用户体验不好。</p><p><strong>产生原因</strong></p><p>软件开发流程</p><p>需求—》设计—》编码—》运行</p><pre class="line-numbers language-none"><code class="language-none">需求阶段：需求描述不易理解，有歧义、错误等设计阶段：设计文档存在错误或者缺陷编码阶段：代码出现错误运行系统：软硬件系统本身故障导致软件缺陷<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺陷生命周期</strong></p><pre class="line-numbers language-none"><code class="language-none">注入bug阶段：需求规格说明、设计、编码发现bug阶段：测试清除bug阶段：故障分类、故障隔离、故障解决<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>缺陷类型</strong></p><p>功能错误、界面UI错误、兼容性、数据、易用性、改进建议、架构</p><p><strong>缺陷编写</strong></p><pre class="line-numbers language-none"><code class="language-none">**核心内容**缺陷的标题：描述缺陷的核心问题缺陷的预置条件：缺陷产生的前提缺陷复现步骤：复现缺陷过程缺陷预期结果：希望得到的结果缺陷实际结果：实际得到的结果缺陷的必要附件：图片、日志等信息（证据）**缺陷描述**缺陷ID、缺陷标题、所属模块、预置条件、严重程度、预期结果、实际结果、复现步骤、附件**缺陷提交要素**缺陷报告编号 --缺陷的唯一性标志严重程度  --严重（主功能）、一般（次要功能）、微小（易用性、界面）、建议（建议性问题）缺陷优先级 --0（24小时之内解决）、1（发布前必须修复）、2（可以在下一个版本中修复）bug类型   --代码错误、兼容性问题、设计缺陷、性能问题缺陷状态  --new新建、open打开、closed关闭、postponed延期**提交缺陷注意事项**可重现--缺陷可以复现唯一性--一个缺陷上报一个问题规范性--符合公司或者项目要求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抓包介绍"><a href="#抓包介绍" class="headerlink" title="抓包介绍"></a>抓包介绍</h2><pre class="line-numbers language-none"><code class="language-none">1、为什么要进行抓包？1）功能测试时跳过ui界面验证，验证后端程序处理能力如：请求支付100元，通过抓包修改请求价格0.1元，查看后端程序是否正常处理2）分析前端bug还是后端bug如：ui显示数据错误，提交bug时需要指定提交人，那是提交给前端开发还是后端开发呢3）弱网测试如：app应用模拟4g、3g网络4）接口测试时，缺乏接口描述文档，需要抓包获取如：查看支付宝请求信息2、什么是抓包？通过工具抓取前端与后端的通信内容3、需要掌握哪些知识？1）抓包操作（http、https）2）断点操作--拦截修改（请求、响应）3）弱网测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="linux介绍"><a href="#linux介绍" class="headerlink" title="linux介绍"></a>linux介绍</h2><pre class="line-numbers language-none"><code class="language-none">1、为什么学习linux？项目服务器--linux操作系统数据库服务器--linux服务器1）部署被测项目环境2）查看日志如：项目测试出bug，有时需要查看程序日志协助定位缺陷2、linux是什么？操作系统作用：调度计算机硬件工作3、需要掌握哪些知识1）环境部署远程链接服务器操作（客户端连接服务器）常用命令（查看目录内容、当前工作目录......）文件操作(复制、移动、删除)压缩操作（解压）权限操作（切换账户、文件授权）系统命令操作（进程相关、重启、关机）2）日志查看文件查看（全部查看、从头查看、从尾查看、过滤）文件编辑（编辑器命令）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><pre class="line-numbers language-none"><code class="language-none">1、为什么学习数据库？功能测试时，检查ui界面显示结果和数据库是否一致自动化测试与性能测试时，从数据库中获取依赖数据、构造测试数据、清除测试脏数据2、数据库是什么？存储数据的仓库3、需要掌握哪些知识使用工具（navicat）对数据库具备增、删、改、查操作使用sql语言针对数据库具备增删改查操作插入数据语法修改数据语法删除数据语言查询数据语法（重点）多表查询（内连接、左连接、右连接）子查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础（一）--charles学习入门</title>
      <link href="2021/07/26/charles%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
      <url>2021/07/26/charles%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="charles学习"><a href="#charles学习" class="headerlink" title="charles学习"></a>charles学习</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>1、能够使用charles来分析前后端的问题</p><p>2、能够用charles模拟弱网测试环境</p><h2 id="charles简介"><a href="#charles简介" class="headerlink" title="charles简介"></a>charles简介</h2><p><strong>1、charles是什么？</strong></p><pre class="line-numbers language-none"><code class="language-none">charles是一款基于HTTP协议的代理服务器，通过成为电脑或浏览器的代理，然后截取请求和请求结果达到分析抓包的目的。特点：跨平台、半免费<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2、charles工作原理</strong></p><pre class="line-numbers language-none"><code class="language-none">PC机&#x2F;手机（客户端）《---》代理服务器（charles）《---》web服务器前置步骤：1、需要运行charles并配置代理2、在客户端上面需要配置代理步骤：1、由客户端发送请求2、charles接收再发送给服务端3、服务端返回请求结果给charles4、由charles转发给客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、charles能做什么？</strong></p><pre class="line-numbers language-none"><code class="language-none">支持HTTP及HTTPS代理支持流量控制支持接口并发请求支持重发网络请求支持断点调试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4、charles的优点</strong></p><pre class="line-numbers language-none"><code class="language-none">对比fiddlercharles能够支持linux、Macoscharles支持按域名和按接口查看报文，简洁明了charles支持反向代理charles网络限速可选择网络类型charles可以解析AMF协议<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="charles安装配置"><a href="#charles安装配置" class="headerlink" title="charles安装配置"></a>charles安装配置</h2><p><strong>1、charles安装</strong></p><p>​    下载：<a href="https://www.charlesproxy.com/download/">https://www.charlesproxy.com/download/</a></p><p>​    安装：双击可执行文件（windows）</p><p><strong>2、charles组件介绍</strong></p><pre class="line-numbers language-none"><code class="language-none">主导航栏    1、清除请求数据    2、开始&#x2F;取消抓包    3、开启&#x2F;关闭SSL安全代理    4、开启&#x2F;关闭慢速网络    5、开启&#x2F;关闭断点设置    6、修改请求数据    7、重新发送请求    8、校验返回的请求    9、工具设置请求栏1、Structure  按域名显示接口请求数据2、Sequence   按接口请求时间显示数据3、Filter     通过域名进行请求过滤请求数据和响应数据栏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、charles代理设置</strong></p><pre class="line-numbers language-none"><code class="language-none">Proxy----》Proxy  Settings -----》port：8888（默认，若该端口被占用需要修改成未被占用的端口）-----》点击“OK”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4、charles访问控制</strong></p><pre class="line-numbers language-none"><code class="language-none">Proxy---&gt;Access Control  Settings---&gt;点击“add”---&gt;在IP Range编辑框中输入ip地址----&gt;勾选编辑栏下方的小方框（不在列表的ip通过charles访问网页，会有提示信息，不勾选时不会有提示）---&gt;点击“OK”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>客户端-windows代理设置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在chrome浏览器中输入Chrome：&#x2F;&#x2F;setting2、在搜索框中输入“代理”3、点击“打开您计算机的代理设置”输入代理服务器ip地址和端口快捷设置代理方式：同一台电脑（安装charles和客户端是同一台电脑）：proxy---》Windows  Proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端-Mac代理设置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、点击苹果图标，选择系统偏好设置2、点击“网络”--》高级3、选择“代理”选项卡4、勾选“Web代理（HTTP）”web代理服务器：输入代理服务器ip地址和端口快捷设置代理：proxy---&gt;Macos Proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端-IOS手机代理设置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在ios手机中选择“设置”-“无线局域网”2、点击已连接的无线网络名称3、在“HTTP代理”的“配置代理”中选择“手动”4、输入服务器ip地址及端点，点击“存储”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端-android手机代理设置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在安卓手机中选择“设置”--》“WLAN”2、长按已连接的无线网络名称，点击“修改网络”3、勾选“显示高级选项”4、在代理选择项中选择“手动”5、输入代理服务器ip地址及端口，点击“保存”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="charles实战"><a href="#charles实战" class="headerlink" title="charles实战"></a>charles实战</h2><p><strong>1、charles抓包分析问题</strong></p><p>抓包分析问题的步骤：</p><pre class="line-numbers language-none"><code class="language-none">charles代理配置---》客户端代理配置---》操作客户端软件---》分析请求数据问题分析：修改用户名，用户名编辑很长，点击保存，提示：系统繁忙，且提示显示两次分析：通过抓包，发现提示信息由后端接口返回，所以显示“系统繁忙”是后端代码问题，后端只调用了一次接口且只返回一次显示两次提示信息是前端代码的问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、https抓包</strong></p><pre class="line-numbers language-none"><code class="language-none">1、需要安装SSL证书<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1、windows证书配置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、打开charles，选择“help”---》“SSL Proxying”---&gt;“install  charles  root certificate”2、在打开的证书框中，点击“安装证书”，选择“本地计算机”，点击“下一步”3、选择“将所有证书都存放下列存储”，再点击“浏览”4、选择“受信任的根证书颁发机构”，点击“确定”--》“下一步”--》“完成”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、charles HTTPS代理配置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在charles窗口中点击菜单“proxy”--》“SSL proxying setting”2、在打开的设置窗口中勾选“Enable SSL Proxying”3、点击“OK”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>MacOS证书配置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、打开charles，选择“help”--》“SSL  Proxy”--》“install charles root certificate”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>IOS证书配置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在电脑上运行charles，且手机设置好代理，在浏览器中地址栏输入：http:&#x2F;&#x2F;charlesproxy.com&#x2F;getssl2、设置--》点击“已下载描述文件”---》点击“安装”--》点击“安装”3、返回到“通用”页面，选择“关于本机”4、点击“证书信任设置”，启用charles  Proxy CA证书并确认。启用--》继续<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>charles流量配置</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在charles窗口中点击菜单“Proxy”--》“Throttle Setting”2、在打开的设置窗口中勾选“EnableThrottling”3、在“Throttlepreset”下拉框中选择对应的网络类型4、点击&quot;OK&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>弱网测试实例</strong></p><pre class="line-numbers language-none"><code class="language-none">将charles的网络流量配置成56k modem的网络，查看网页打开情况结果分析：从时间分析（慢）页面展示状态（是否闪退，。。。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>charles断点配置</strong></p><pre class="line-numbers language-none"><code class="language-none">作用：用来构建异常的测试场景1、右击接口链接，选择“Breakpotions”2、在浏览器刷新对应接口的页面3、此时会自动跳转至charles并显示出接口请求信息4、点击“Edit  Request”，修改请求信息，点击“Execute”5、点击“Edit Response”6、在数据格式栏中选择合适的显示格式，如：json7、修改对应的数据，点击“Execute”8、回到浏览器查看数据应该为修改之后的Response的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MeterSphere使用入门（一）</title>
      <link href="2021/07/04/MeterSphere%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2021/07/04/MeterSphere%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="MeterSphere使用入门（一）"><a href="#MeterSphere使用入门（一）" class="headerlink" title="MeterSphere使用入门（一）"></a>MeterSphere使用入门（一）</h1><h2 id="测试跟踪"><a href="#测试跟踪" class="headerlink" title="测试跟踪"></a>测试跟踪</h2><h3 id="1、导入测试用例"><a href="#1、导入测试用例" class="headerlink" title="1、导入测试用例"></a>1、导入测试用例</h3><p>选中项目，导入测试用例有两种方式：导入表格和导入思维导图</p><p>可下载模板，编辑好测试用例后上传文件。导入新建会添加至原测试用例后，导入更新会将相同ID的用例更新为最新的状态。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/96ce8e0b2a7a026a5f406d3a75c8d0788466760c/source/img/MeterSphere/1.png"></p><h3 id="2、创建用例评审"><a href="#2、创建用例评审" class="headerlink" title="2、创建用例评审"></a>2、创建用例评审</h3><h4 id="2-1-创建用例评审"><a href="#2-1-创建用例评审" class="headerlink" title="2.1 创建用例评审"></a>2.1 创建用例评审</h4><p>选中用例评审，点击左侧创建用例评审，会有创建用例评审弹框，输入评审名称、标签、截止时间、评审人可多选。点击确定。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/96ce8e0b2a7a026a5f406d3a75c8d0788466760c/source/img/MeterSphere/2.png"></p><h4 id="2-2-关联评审用例"><a href="#2-2-关联评审用例" class="headerlink" title="2.2  关联评审用例"></a>2.2  关联评审用例</h4><p>点击操作中的编辑图标按钮，可编辑用例评审的状态，修改用例评审的编辑内容。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/3.png"></p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/4.png"></p><p>点击规划&amp;执行，弹出关联评审用例。点击关联测试用例，选择要评审的项目，勾选测试用例，点击确定。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/5.png"></p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/6.png"></p><p>点击操作栏中编辑按钮或上方开始评审，进行用例评审。可选择评审状态，编辑评论内容。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/7.png"></p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/8.png"></p><h3 id="3、创建测试计划"><a href="#3、创建测试计划" class="headerlink" title="3、创建测试计划"></a>3、创建测试计划</h3><p>点击测试计划，再点击创建测试计划。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/9.png"></p><p>点击操作栏中编辑框可关联测试用例，查看按钮可查看测试计划报告，可设置定时任务，删除关联用例。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/12.png"></p><p>点击编辑按钮，弹出创建测试计划编辑框，可编辑相应的内容。</p><p>点击规划执行，可关联测试用例。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/10.png"></p><p>进入关联测试用例界面，点击用例列表中的编辑图标，可编辑用例是否通过测试，并可以添加评论。</p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/11.png"></p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/hexo-blogs/master/source/img/MeterSphere/14.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何写好测试用例</title>
      <link href="2021/04/29/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B/"/>
      <url>2021/04/29/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="如何写好测试用例教程"><a href="#如何写好测试用例教程" class="headerlink" title="如何写好测试用例教程"></a>如何写好测试用例教程</h1><p>—浪晋慕课网视频教程笔记</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>软件相关概念       软件测试基础      测试流程     测试生命周期</p><h2 id="测试常用术语"><a href="#测试常用术语" class="headerlink" title="测试常用术语"></a>测试常用术语</h2><p>方法：黑盒   灰盒    白盒</p><p>方向：功能   性能    安全</p><p>测试点：兼容性   易用性   UI元素</p><h2 id="测试用例是什么"><a href="#测试用例是什么" class="headerlink" title="测试用例是什么"></a>测试用例是什么</h2><pre class="line-numbers language-none"><code class="language-none">1、测试用例是测试工作的核心2、一组在测试时输入输出的标准3、软件需求的具体对照<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的作用"><a href="#测试用例的作用" class="headerlink" title="测试用例的作用"></a>测试用例的作用</h2><pre class="line-numbers language-none"><code class="language-none">1、检验软件是否满足客户需求2、体现一个测试人员的工作量3、展现测试用例的设计思路<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试用例包含的内容"><a href="#测试用例包含的内容" class="headerlink" title="测试用例包含的内容"></a>测试用例包含的内容</h2><pre class="line-numbers language-none"><code class="language-none">用例编号：编号唯一用例名称：言简意赅测试背景：说明用例属于某个项目，且测试哪些东西前置条件：执行这条用例之前需要满足哪些条件 优先级重要级   测试数据测试步骤：操作步骤   预期结果：功能实现的结果  实际结果：测试用例执行的结果 备注：其它一些信息描述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的编写流程"><a href="#测试用例的编写流程" class="headerlink" title="测试用例的编写流程"></a>测试用例的编写流程</h2><pre class="line-numbers language-none"><code class="language-none">需求分析----&gt;提取测试点----&gt;测试用例编写----&gt;测试用例评审<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="需求分析和测试点编写"><a href="#需求分析和测试点编写" class="headerlink" title="需求分析和测试点编写"></a>需求分析和测试点编写</h2><pre class="line-numbers language-none"><code class="language-none">需求分析业务需求：关注系统是否满足业务用户需求：关注系统是否满足用户习惯功能需求：关注系统是否满足功能需求如果没有需求怎么办？参考市面上已经上线的同类产品需求模糊怎么办？1、收集整理已有需求和产品经理逐条确认2、参考市面上已经上线的同类产品的实现情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提取测试点"><a href="#提取测试点" class="headerlink" title="提取测试点"></a>提取测试点</h2><pre class="line-numbers language-none"><code class="language-none">1、什么是测试点？测试点即通过需求分析后对得出的需要进行测试的具体内容2、测试点对测试用例有什么好处？（1）快速   ---根据测试点可以快速设计出测试用例（2）覆盖   ---测试点能够完全覆盖需求（3）方法   ---在测试点上能够迅速运用测试方法（4）细节   ---测试点能够展现出需求的一些细节3、如何提取测试点？举例-以慕课网为例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>功能模块</th><th>测试点编号</th><th>测试点描述</th></tr></thead><tbody><tr><td>注册功能</td><td>1</td><td>点击注册按钮显示注册对话框</td></tr><tr><td></td><td>2</td><td>对输入的邮箱和手机号进行验证是否可用</td></tr><tr><td></td><td>3</td><td>判断验证码是否输入正确</td></tr><tr><td></td><td>4</td><td>点击注册跳转首页</td></tr><tr><td>登录功能</td><td>1</td><td>正常登录</td></tr><tr><td></td><td>2</td><td>判断输入的邮箱和手机号是否符合规范</td></tr><tr><td></td><td>3</td><td>账号为空时点击登录</td></tr><tr><td></td><td>4</td><td>账号错误时点击登录</td></tr><tr><td></td><td>5</td><td>密码为空时点击登录</td></tr><tr><td></td><td>6</td><td>密码错误时点击登录</td></tr><tr><td></td><td>7</td><td>账号密码都为空时点击登录</td></tr><tr><td></td><td>8</td><td>自动登录功能是否有效</td></tr><tr><td></td><td>9</td><td>点击忘记密码跳转至找回密码界面</td></tr><tr><td></td><td>10</td><td>使用QQ登录</td></tr><tr><td></td><td>11</td><td>使用微信登陆</td></tr><tr><td></td><td>12</td><td>使用微博登录</td></tr><tr><td></td><td>13</td><td>使用慕课网APP扫描二维码登录</td></tr><tr><td>搜索功能</td><td>1</td><td>输入任意信息点击搜索跳转至搜索结果页面</td></tr><tr><td></td><td>2</td><td>在搜索结果页面输入任意信息可以进行全站搜索</td></tr><tr><td></td><td>3</td><td>可以筛选搜索结果</td></tr><tr><td></td><td>4</td><td>可以点击热门搜索进行快捷操作</td></tr><tr><td></td><td>5</td><td>点击搜索结果可以跳转至对应界面</td></tr><tr><td></td><td>6</td><td>搜索完成后显示搜到的结果数目</td></tr><tr><td>下载APP功能</td><td>1</td><td>鼠标移动至相应图标位置出现扫描下载二维码</td></tr><tr><td></td><td>2</td><td>扫描二维码跳转至下载页面</td></tr></tbody></table><h2 id="测试用例编写注意事项"><a href="#测试用例编写注意事项" class="headerlink" title="测试用例编写注意事项"></a>测试用例编写注意事项</h2><pre class="line-numbers language-none"><code class="language-none">1、根据项目的实际情况设计测试用例表格2、用例格式不是固定的，切忌生搬硬套3、根据具体的情况编写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="测试用例编写方法（常用）"><a href="#测试用例编写方法（常用）" class="headerlink" title="测试用例编写方法（常用）"></a>测试用例编写方法（常用）</h2><pre class="line-numbers language-none"><code class="language-none">等价类划分法有效等价类   无效等价类如何选择适当的数据子集，来代表整个数据集。作用：通过降低测试的数目来实现“合理的”覆盖，覆盖了更多的可能数据，以发现更多的软件缺陷。边界值分析法作为等价类划分法的补充，将测试的边界情况作为重点目标。选取正好等于、刚刚大于或刚刚小于边界值的测试数据场景法通过运用场景来对系统的功能点或业务流程描述，从而提高测试效果。场景法一般包含基本流和备用流，从一个流程开始，通过描述经过的路径来确定的过程，经过遍历所有的基本流和备用流来完成整个场景。错误猜测法需要有丰富的测试经验。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的编写"><a href="#测试用例的编写" class="headerlink" title="测试用例的编写"></a>测试用例的编写</h2><p>根据功能点编写测试用例</p><p>1、慕课网注册功能测试用例编写</p><pre class="line-numbers language-none"><code class="language-none">注册功能 1  点击注册按钮显示注册对话框   2  对输入的邮箱和手机号进行验证是否可用    3  判断验证码是否输入正确    4  点击注册跳转首页(跳转在手机注册和邮箱注册都有验证，不需单独设计用例验证)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例名称</th><th>测试背景</th><th>前置条件</th><th>重要级</th><th>优先级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th><th>编写人</th><th>执行人</th></tr></thead><tbody><tr><td>1</td><td>点击注册按钮弹出注册对话框</td><td>该功能已经完善</td><td>该功能已经开发完成，并通过了开发自验证</td><td>高</td><td>高</td><td></td><td>1、进入慕课网   2、点击注册按钮</td><td>弹出注册对话框</td><td></td><td></td><td></td></tr><tr><td>2</td><td>使用邮箱注册成功</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：<a href="mailto:&#121;&#x69;&#x78;&#105;&#97;&#111;&#98;&#x61;&#105;&#49;&#x32;&#51;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;">&#121;&#x69;&#x78;&#105;&#97;&#111;&#98;&#x61;&#105;&#49;&#x32;&#51;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;</a>    密码：qwe123456</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入正确的验证码   6、点击注册</td><td>跳转到注册成功，提示已发送邮件</td><td></td><td></td><td></td></tr><tr><td>3</td><td>使用错误的邮箱注册失败</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：慕课网  密码：qwe123456</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入正确的验证码   6、点击注册</td><td>提示请输入正确的邮箱地址</td><td></td><td></td><td></td></tr><tr><td>4</td><td>注册时输入不符合规范的密码注册失败（要求密码长度6-16位，不能有空格）</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：<a href="mailto:&#x79;&#105;&#x78;&#105;&#x61;&#111;&#98;&#97;&#105;&#x31;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#x79;&#105;&#x78;&#105;&#x61;&#111;&#98;&#97;&#105;&#x31;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;</a>    密码：12345                       账号：<a href="mailto:&#x79;&#105;&#x78;&#105;&#x61;&#x6f;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x79;&#105;&#x78;&#105;&#x61;&#x6f;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>    密码：12345678910111314账号：<a href="mailto:&#x79;&#x69;&#x78;&#105;&#97;&#x6f;&#98;&#97;&#x69;&#49;&#x32;&#x33;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#x79;&#x69;&#x78;&#105;&#97;&#x6f;&#98;&#97;&#x69;&#49;&#x32;&#x33;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a>    密码：12   67</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入正确的验证码   6、点击注册</td><td>提示密码不符合规范</td><td></td><td></td><td></td></tr><tr><td>5</td><td>使用手机号注册</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>手机号：18365182306</td><td>1、进入慕课网   2、点击注册按钮3、输入手机号   4、输入正确的验证码   5、点击注册</td><td>跳转到输入手机验证码界面</td><td></td><td></td><td></td></tr><tr><td>6</td><td>使用错误的手机号注册失败</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>手机号：1836518236手机号：183651823066</td><td>1、进入慕课网   2、点击注册按钮3、输入手机号   4、输入正确的验证码   5、点击注册</td><td>提示请输入正确的手机号</td><td></td><td></td><td></td></tr><tr><td>7</td><td>判断验证码输入错误时注册失败</td><td>该功能已经完善</td><td>输入的账号未注册</td><td>高</td><td>高</td><td>账号：<a href="mailto:&#121;&#x69;&#120;&#105;&#97;&#111;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#121;&#x69;&#120;&#105;&#97;&#111;&#x62;&#x61;&#x69;&#49;&#x32;&#x33;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a>    密码：qwe123456</td><td>1、进入慕课网   2、点击注册按钮3、输入邮箱地址4、输入密码5、输入错误的验证码   6、点击注册</td><td>提示验证码错误</td><td></td><td></td><td></td></tr></tbody></table><p>2、搜索功能的测试用例</p><pre class="line-numbers language-none"><code class="language-none">搜索功能1 输入任意信息点击搜索跳转至搜索结果页面2 在搜索结果页面输入任意信息可以进行全站搜索3 可以筛选搜索结果4 可以点击热门搜索进行快捷操作5 点击搜索结果可以跳转至对应界面6 搜索完成后显示搜到的结果数目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例名称</th><th>测试背景</th><th>前置条件</th><th>重要级</th><th>优先级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th><th>编写人</th><th>执行人</th></tr></thead><tbody><tr><td>1</td><td>搜索功能正常有效</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、进入慕课网   2、在搜索框中输入搜索内容   3、点击搜索按钮</td><td>跳转至搜索界面，并搜索出系统里所有包含搜索内容的信息</td><td></td><td></td><td></td></tr><tr><td>2</td><td>搜索页面的搜索功能正常有效</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据，已进入搜索页面</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、在搜索页面的搜索框中输入搜索内容   2、点击搜索按钮</td><td>搜索出系统里所有包含搜索内容的信息</td><td></td><td></td><td></td></tr><tr><td>3</td><td>搜索结果筛选功能正常有效</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据，已进入搜索页面</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、在搜索页面的搜索框中输入搜索内容   2、点击搜索按钮      3、点击搜索框下方的课程    4、点击搜索框下方的猿问   5、点击搜索框下方的手记</td><td>1、搜索出系统中所有包含搜索内容的信息   2、仅显示课程里包含搜索内容的条目       3、仅显示猿问里包含搜索内容的条目     4、仅显示手记里包含搜索内容的条目</td><td></td><td></td><td></td></tr><tr><td>4</td><td>点击热门搜索可快速搜索热门搜索的内容</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据，已进入搜索页面</td><td>高</td><td>高</td><td>搜索内容：</td><td>1、点击搜索框下面的热门搜索条码</td><td>搜索出该热门搜索的所有条目</td><td></td><td></td><td></td></tr><tr><td>5</td><td>搜索完成后显示搜索到的条目数量</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、进入慕课网   2、在搜索框中输入搜索内容   3、点击搜索按钮</td><td>1、搜索出系统里所有包含搜索内容的信息          2、显示搜索到的结果数量，并和实际的保持一致</td><td></td><td></td><td></td></tr><tr><td>6</td><td>点击搜索结果可以跳转到对应的界面</td><td>测试搜索功能完善，满足用户的需求</td><td>系统内已有各类型的数据</td><td>高</td><td>高</td><td>搜索内容：1111</td><td>1、进入慕课网   2、在搜索框中输入搜索内容   3、点击搜索按钮       4、点击任意搜索到的信息</td><td>1、搜索出系统里所有包含搜索内容的信息          2、跳转到对应的界面</td><td></td><td></td><td></td></tr></tbody></table><p>3、下载APP功能测试用例</p><pre class="line-numbers language-none"><code class="language-none">下载APP功能1  鼠标移动至相应图标位置出现扫描下载二维码    2  扫描二维码跳转至下载页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>用例编号</th><th>用例名称</th><th>测试背景</th><th>前置条件</th><th>重要级</th><th>优先级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th><th>编写人</th><th>执行人</th></tr></thead><tbody><tr><td>1</td><td>鼠标移动到对应图标，显示二维码</td><td>测试下载APP功能完成，满足客户需求</td><td>该功能开发已完成，并且通过了开发自验证</td><td>高</td><td>中</td><td></td><td>1、进入慕课网         2、鼠标移动到下载APP图标上</td><td>1、显示二维码</td><td></td><td></td><td></td></tr><tr><td>2</td><td>扫描二维码跳转至下载页面</td><td>测试下载APP功能完成，满足客户需求</td><td>该功能开发已完成，并且通过了开发自验证</td><td>高</td><td>中</td><td></td><td>1、进入慕课网         2、鼠标移动到下载APP图标上      3、手机扫描二维码</td><td>1、正确识别二维码，跳转至对应的下载页面</td><td></td><td></td><td></td></tr></tbody></table>  <pre class="line-numbers language-none"><code class="language-none">注意：为更加完善测试用例，可加上所属模块、模块编号、功能介绍、版本号、测试环境、测试类型、测试阶段、开发人员等信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试用例评审"><a href="#测试用例评审" class="headerlink" title="测试用例评审"></a>测试用例评审</h2><pre class="line-numbers language-none"><code class="language-none">1、什么是测试用例评审？1、简单来说，评审就是对测试用例进行检查2、评审包括同行评审、小组评审、部门评审、三方（开发、产品、客户等）评审等3、不同的评审类型会有不同的角色参加2、评审的意义是什么？1、通过评审可以发现测试用例的不足2、方便测试人员改进测试用例3、达到在测试时提高测试质量的目的3、评审的流程（直到测试用例被认可通过）改进测试用例----&gt;评审----&gt;改进测试用例----&gt;评审注意：评审的过程不是一次性的，是一个持续改进的过程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试用例的管理"><a href="#测试用例的管理" class="headerlink" title="测试用例的管理"></a>测试用例的管理</h2><pre class="line-numbers language-none"><code class="language-none">1、如何管理测试用例？（1）原始的excel表格管理方式（2）专业的项目管理系统2、如何管理测试用例？ALM    禅道     testlink     Bugzilla     JIRA    3、禅道的基本应用（1）专业的研发项目管理软件（2）完整支持敏捷开发流程（3）完整软件生命周期管理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python核心技术与实战（一）</title>
      <link href="2021/04/29/python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98(%E4%B8%80)/"/>
      <url>2021/04/29/python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="python核心技术与实战"><a href="#python核心技术与实战" class="headerlink" title="python核心技术与实战"></a>python核心技术与实战</h1><h2 id="01-列表（list）和元组（tuple）"><a href="#01-列表（list）和元组（tuple）" class="headerlink" title="01 列表（list）和元组（tuple）"></a>01 列表（list）和元组（tuple）</h2><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><p>列表和元组都是<strong>可以放置任意数据类型的有序集合</strong>。</p><p>python中列表和元组中的数据<strong>类型不需要必须一致</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token comment">#列表含int和string类型元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token comment">#元组含int和string类型元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">列表和元组的区别：1、列表，动态的，长度大小不固定，可随意增、删或改变元素。2、元组，静态的，长度大小固定，无法增、删或修改。想要对已有的元组进行修改，需要重新开辟一块内存，创建新的元组。而列表是修改原来列表中的元素，不会创建新的列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">]</span>l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:/python_project/jike/list_tuple.py"</span><span class="token punctuation">,</span> line <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignmentProcess finished <span class="token keyword">with</span> exit code <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#添加元素5到原来的列表末尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>new_tup <span class="token operator">=</span> tup <span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment">#创建新的new_tup，并依次填充原元组的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_tup<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本操作和注意事项"><a href="#基本操作和注意事项" class="headerlink" title="基本操作和注意事项"></a>基本操作和注意事项</h3><p>1、Python中的<strong>列表和元组都支持负数索引</strong>。-1表示最后一个元素，-2表示倒数第二个元素，以此类推。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>new_tup <span class="token operator">=</span> tup <span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_tup<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token number">5</span><span class="token number">4</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、<strong>列表和元组都支持切片操作。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#返回列表中索引从1到2的子列表</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>new_tup <span class="token operator">=</span> tup <span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#返回元组中索引从1到2的子元组</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、<strong>列表和元组可以随意嵌套。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、两者之间可以<strong>通过list()和tuple()函数互相转换。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5、列表和元组常用的内置函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''count(item):表示统计列表/元组中item出现的次数index(item):表示返回列表/元组中item第一次出现的索引list.reverse()和list.sort()：表示原地倒转和排序（元组中没有这两个内置的函数）reversed()和sorted():同样表示对列表/元组进行倒转和排序，reversed()返回一个倒转后的迭代器，sorted()返回排好序的新列表'''</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表和元组存储方式的差异"><a href="#列表和元组存储方式的差异" class="headerlink" title="列表和元组存储方式的差异"></a>列表和元组存储方式的差异</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''放置相同的元素，元组比列表的存储空间少16字节列表是动态的，需要存放指针来指向对应的元素，（对于int类型，8字节）此外，由于列表可变，需要额外存储已经分配的长度大小（8字节），这样才可以实时追踪列表空间的使用情况，当空间不足时，及时分配额外空间当空间不足时，每次分配空间会额外多分配一些空间：保证其操作的高效性增加/删除的时间复杂度均为O(1)元组长度大小固定，元素不可变，存储空间固定。元组的性能速度略优于列表：python对静态数据做一些资源缓存。初始化操作元组速度优于列表，索引操作两者的差异可忽略不计'''</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#（88-56）/8 = 4个元素的存储空间</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token number">56</span><span class="token number">88</span><span class="token number">88</span><span class="token number">40</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表和元组的使用场景"><a href="#列表和元组的使用场景" class="headerlink" title="列表和元组的使用场景"></a>列表和元组的使用场景</h3><p>1、若存储的数据和数量不变，适合使用元组</p><p>2、若存储的数据或数量是可变的，适合选择列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">创建空列表，<span class="token punctuation">[</span><span class="token punctuation">]</span>比<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>效率高<span class="token keyword">import</span> timeit<span class="token keyword">print</span><span class="token punctuation">(</span>timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">'a = list()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">'a = []'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token number">0.0663261</span><span class="token number">0.0209299</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-字典和集合"><a href="#02-字典和集合" class="headerlink" title="02 字典和集合"></a>02 字典和集合</h2><h3 id="字典（dict）和集合（set）基础"><a href="#字典（dict）和集合（set）基础" class="headerlink" title="字典（dict）和集合（set）基础"></a>字典（dict）和集合（set）基础</h3><p>字典：<strong>一系列由键(key)和值(value)配对组成的元素的集合</strong>，在python3.7+，字典被确定为<strong>有序</strong>，3.6中无法100%确定有序，3.6之前是无序的。<strong>其长度大小可变，元素可任意删减和改变</strong>。</p><p>与元组和列表相比，字典性能更优，对于查找、添加、删除操作，都能在常数时间复杂度内完成。</p><p>集合：集合和字典基本相同，区别：集合没有键和值的配对，是一系列无序的、唯一的（不重复）元素组合。</p><p><strong>字典和集合的创建</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#创建字典</span>d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span>d2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>d3 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'jason'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d4 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'jason'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2 <span class="token operator">==</span>d3 <span class="token operator">==</span>d4<span class="token punctuation">)</span><span class="token comment">#True</span><span class="token comment">#创建集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token comment">#True</span><span class="token comment">#字典和集合中，无论键和值都可以是混合类型。</span>s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">&#125;</span>元素访问，字典访问可以直接索引键，不存在就会抛出异常，也可以通过使用get<span class="token punctuation">(</span>key<span class="token punctuation">,</span>default<span class="token punctuation">)</span>函数来进行索引，若键不存在，调用get<span class="token punctuation">(</span><span class="token punctuation">)</span>函数可以返回一个默认值。default没有指定时，默认为<span class="token boolean">None</span>：d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span>d2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>d3 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'jason'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d4 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'jason'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2 <span class="token operator">==</span>d3 <span class="token operator">==</span>d4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:/python_project/jike/list_tuple.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>KeyError<span class="token punctuation">:</span> <span class="token string">'location'</span><span class="token boolean">True</span>jason集合不支持索引操作，集合本质上是一个哈希表，和列表不一样。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断一个元素在不在字典/集合中，可以使用<strong>value in dict/set</strong>来判断。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#创建字典</span>d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> d1<span class="token punctuation">)</span> <span class="token comment">#判断键</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'jason'</span> <span class="token keyword">in</span> d1<span class="token punctuation">)</span><span class="token comment">#创建集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token boolean">True</span><span class="token boolean">False</span><span class="token boolean">True</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字典和集合的增、删和更新操作</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#创建字典</span>d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">:</span><span class="token string">'male'</span><span class="token punctuation">&#125;</span>d1<span class="token punctuation">[</span><span class="token string">'dob'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1999-02-01'</span>    <span class="token comment">#增加元素对：'dob':'1999-02-01'</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'dob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#删除d1中键为'dob'的元素对</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token comment">#创建集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment">#增加元素5到集合</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#从集合中删除元素5，集合的pop()操作删除集合中的最后一个元素，由于集合本身是无序的，慎用pop()</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jason'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token string">'dob'</span><span class="token punctuation">:</span> <span class="token string">'1999-02-01'</span><span class="token punctuation">&#125;</span><span class="token number">1999</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jason'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字典和集合的排序</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#创建字典</span>d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token comment">#根据字典键升序排列,返回列表</span>d1_sorted_bykey <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#根据字典值升序排列，返回列表</span>d1_sorted_byvalue <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1_sorted_bykey<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1_sorted_byvalue<span class="token punctuation">)</span><span class="token comment">#创建集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">#升序排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#返回排序后的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考题</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>d1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token comment">#&#123;&#125;是关键字，直接调用底层c代码，效率高</span>d2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#函数，效率低</span><span class="token number">2</span><span class="token punctuation">.</span>列表不可以做字典的键，因为列表是可变的。key是要求不可变的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-字符串（string）"><a href="#03-字符串（string）" class="headerlink" title="03 字符串（string）"></a>03 字符串（string）</h2><h3 id="字符串基础"><a href="#字符串基础" class="headerlink" title="字符串基础"></a>字符串基础</h3><p>字符串：由独立字符组成的一个序列，通常包含在单引号(‘ ‘)、双引号(“ “)和三引号(‘’’  ‘’’)或(“””   “””)之中。</p><p>这样便于在字符串中内嵌带引号的字符。</p><p>python也支持转义字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">常见的转义字符\newline接下一行\\表示\\<span class="token string">'表示单引号'</span>\<span class="token string">"表示双引号"</span>\n换行\t横向制表符\b退格\v纵向制表符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'a\nb\tc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>pyabc<span class="token number">5</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a><strong>字符串常用操作</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'jason'</span><span class="token comment">#索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#切片,[index1:index2]表示第index1到index2 - 1个元素组成的子字符串</span>s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#遍历字符串</span><span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">#修改字符串，因为字符串不可变，所以通常只能通过创建新字符串来完成</span><span class="token comment">#s = 'J' + s[1:]    #'H'和原字符串切片拼接</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">)</span>  <span class="token comment">#扫瞄原字符串替换</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#字符串拼接</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'ab'</span>str1 <span class="token operator">=</span> <span class="token string">'cd'</span><span class="token builtin">str</span> <span class="token operator">+=</span> str1     <span class="token comment">#str没有其它引用时，会尝试在原地扩充字符串大小，不会重新分配内存来创建新字符串进行拷贝</span>str2 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span> <span class="token comment">#按照指定格式将每个元素拼接起来</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>list_tuple<span class="token punctuation">.</span>pyj<span class="token keyword">as</span><span class="token number">5</span>jasonJasonabcda b c dProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span>常见函数：string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>，表示去掉首尾的<span class="token builtin">str</span>字符string<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>，表示只去掉开头的<span class="token builtin">str</span>字符string<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>，表示只去掉尾部的<span class="token builtin">str</span>字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h3><p><strong>格式化函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no data available for person with id:&#123;&#125;,name:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    string<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>格式化函数<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>格式符，为后来的真实值预留位置    <span class="token number">2</span>、<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no data available for person with id:%s,name:%s'</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python面向对象（一）</title>
      <link href="2021/04/29/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2021/04/29/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h1><p>抽象类：作为父类存在，一旦对象化会报错，python3.8可对象化。抽象函数定义在抽象类中，子类必须重写该函数才能使用，相应的抽象函数，则是使用装饰器@abstractmethod来表示。</p><p>抽象类是一种自上而下的设计风范，只需要用少量的代码描述清楚要做的事情，定义好接口。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod<span class="token keyword">class</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">set_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>Entity<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">def</span> <span class="token function">set_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>title <span class="token operator">=</span> titledocument <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Harry Potter'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>entity <span class="token operator">=</span> Entity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span>entity<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyHarry Potter<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Entity <span class="token builtin">object</span> at <span class="token number">0x000001F705F966A0</span><span class="token operator">></span><span class="token boolean">None</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面向对象的四要素：类、属性、对象、函数（方法）</p><p>类：具有相同属性和函数（方法）的对象（实例）的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">多继承，构造函数的执行顺序：<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter A'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave A'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter B'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave B'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter C'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave C'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter D'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave D'</span><span class="token punctuation">)</span>D<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyenter Denter Benter Center Aleave Aleave Cleave Bleave DProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python核心技术与实战（二）</title>
      <link href="2021/04/29/python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2021/04/29/python%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python核心技术与实战（二）"><a href="#python核心技术与实战（二）" class="headerlink" title="python核心技术与实战（二）"></a>python核心技术与实战（二）</h1><h2 id="04-输入输出"><a href="#04-输入输出" class="headerlink" title="04 输入输出"></a>04 输入输出</h2><h3 id="1、键盘输入输出"><a href="#1、键盘输入输出" class="headerlink" title="1、键盘输入输出"></a>1、键盘输入输出</h3><pre class="line-numbers language-none"><code class="language-none">input()函数暂停程序运行，同时等待键盘输入，直到回车键被按下；函数的参数即为提示语，输入的类型永远是字符型（str）。print()函数则接受字符串、数字、字典、列表甚至一些自定义类型的输出。python对int类型没有最大限制，但对float类型有精度限制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、文件输入输出"><a href="#2、文件输入输出" class="headerlink" title="2、文件输入输出"></a>2、文件输入输出</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#读取文件内容到列表中</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">'./score'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>info <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment">#计算总成绩</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># info[i]='姓名        系统测试       数据库     linux\n'</span>        info<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\t\t总成绩\n'</span>        <span class="token comment">#print(info[i])</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#['a1','80','87','78']</span>        s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        info<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\t\t'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment">#将处理后的内容覆盖写入文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">'./score'</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>info<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span>语句不需要显示调用close<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，能够在任务执行完毕后自动执行关闭文件操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、json序列化与实战"><a href="#3、json序列化与实战" class="headerlink" title="3、json序列化与实战"></a>3、json序列化与实战</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonparams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'symbol'</span><span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">,</span>    <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'limit'</span><span class="token punctuation">,</span>    <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token number">123.4</span><span class="token punctuation">,</span>    <span class="token string">'amount'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span>params_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>params<span class="token punctuation">)</span>     <span class="token comment">#接受python基本数据类型，将其序列化为string</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after json serialization'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type of params_str = &#123;&#125;,params_str=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>params_str<span class="token punctuation">)</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************************'</span><span class="token punctuation">)</span>original_params <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>params_str<span class="token punctuation">)</span>        <span class="token comment">#接受一个合法字符串，将其反序列化为Python的基本数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after json deserialization'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type of original_params=&#123;&#125;,original_params=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>original_params<span class="token punctuation">)</span><span class="token punctuation">,</span>original_params<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyafter json serialization<span class="token builtin">type</span> of params_str <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span>params_str<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'symbol'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> <span class="token number">123.4</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>after json deserialization<span class="token builtin">type</span> of original_params<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token punctuation">,</span>original_params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'symbol'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> <span class="token number">123.4</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输入字符串到文件，从文件读取json字符串</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonparams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'symbol'</span><span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">,</span>    <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'limit'</span><span class="token punctuation">,</span>    <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token number">123.4</span><span class="token punctuation">,</span>    <span class="token string">'amount'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'params.json'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>    params_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>params<span class="token punctuation">,</span>fout<span class="token punctuation">)</span> <span class="token comment">#接受python基本数据类型，将其序列化为string</span><span class="token comment">#params_str = json.dumps(params)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after json serialization'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type of params_str = &#123;&#125;,params_str=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>params_str<span class="token punctuation">)</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************************'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'params.json'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fin<span class="token punctuation">:</span>    original_params <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fin<span class="token punctuation">)</span>        <span class="token comment">#接受一个合法字符串，将其反序列化为Python的基本数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after json deserialization'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type of original_params=&#123;&#125;,original_params=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>original_params<span class="token punctuation">)</span><span class="token punctuation">,</span>original_params<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyafter json serialization<span class="token builtin">type</span> of params_str <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NoneType'</span><span class="token operator">></span><span class="token punctuation">,</span>params_str<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'symbol'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> <span class="token number">123.4</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>after json deserialization<span class="token builtin">type</span> of original_params<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token punctuation">,</span>original_params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'symbol'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> <span class="token number">123.4</span><span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>1、I/O操作要谨慎，一定要进行充分的错误处理，并细心编码，防止出现编码漏洞；</p><p>2、编码时，对内存占用和磁盘占用要有充分的估计，这样在出错时可以更容易找到原因。</p><h2 id="05-条件与循环2"><a href="#05-条件与循环2" class="headerlink" title="05 条件与循环2"></a>05 条件与循环2</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#条件</span>python不支持switch语句，多条件判断时，只能使用<span class="token keyword">if</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elif</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python中的数据结构只要是可迭代的，都可以利用<span class="token keyword">for</span>循环遍历。字典本身只有键是可迭代的，如果要遍历它的值或者键值对，需要通过其内置函数values<span class="token punctuation">(</span><span class="token punctuation">)</span>或items<span class="token punctuation">(</span><span class="token punctuation">)</span>实现。values<span class="token punctuation">(</span><span class="token punctuation">)</span>返回字典值的集合，items<span class="token punctuation">(</span><span class="token punctuation">)</span>返回键值对的集合。params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'symbol'</span><span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'limit'</span><span class="token punctuation">,</span><span class="token string">'price'</span><span class="token punctuation">:</span><span class="token number">123.4</span><span class="token punctuation">,</span><span class="token string">'amount'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> k <span class="token keyword">in</span> params<span class="token punctuation">:</span>    <span class="token comment">#遍历字典的键</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token keyword">for</span> v <span class="token keyword">in</span> params<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#遍历字典的值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">for</span> w<span class="token punctuation">,</span>n <span class="token keyword">in</span> params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#遍历字典的键值对</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key:&#123;&#125;,value:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pysymbol<span class="token builtin">type</span>priceamount<span class="token number">123456</span>limit<span class="token number">123.4</span><span class="token number">23</span>key<span class="token punctuation">:</span>symbol<span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token number">123456</span>key<span class="token punctuation">:</span><span class="token builtin">type</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span>limitkey<span class="token punctuation">:</span>price<span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token number">123.4</span>key<span class="token punctuation">:</span>amount<span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token number">23</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span>集合遍历set1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> set1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">python内置函数<span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，遍历数据时，不仅返回每个元素，还返回其对应的索引。set1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> index<span class="token punctuation">,</span>item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>item<span class="token punctuation">)</span>        D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件与循环的复用"><a href="#条件与循环的复用" class="headerlink" title="条件与循环的复用"></a><strong>条件与循环的复用</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>yy<span class="token punctuation">)</span> <span class="token keyword">for</span> xx <span class="token keyword">in</span> x <span class="token keyword">for</span> yy <span class="token keyword">in</span> y <span class="token keyword">if</span> xx <span class="token operator">!=</span> yy<span class="token punctuation">]</span>等价于：l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> xx <span class="token keyword">in</span> x<span class="token punctuation">:</span><span class="token keyword">for</span> yy <span class="token keyword">in</span> y<span class="token punctuation">:</span><span class="token keyword">if</span> xx <span class="token operator">!=</span> yy<span class="token punctuation">:</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>yy<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'dob'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'jason'</span><span class="token punctuation">,</span><span class="token string">'2000-02-01'</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'mike'</span><span class="token punctuation">,</span><span class="token string">'1999-01-01'</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token string">'nancy'</span><span class="token punctuation">,</span><span class="token string">'2001-02-01'</span><span class="token punctuation">,</span><span class="token string">'female'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#多条件循环</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> value <span class="token keyword">in</span> values<span class="token punctuation">:</span>    <span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">dict</span><span class="token punctuation">[</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token comment">#条件循环的复用  一行代码</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span>value<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">for</span> index<span class="token punctuation">,</span>key <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> values<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>或li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> values<span class="token punctuation">]</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'jason'</span><span class="token punctuation">,</span> <span class="token string">'dob'</span><span class="token punctuation">:</span> <span class="token string">'2000-02-01'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'mike'</span><span class="token punctuation">,</span> <span class="token string">'dob'</span><span class="token punctuation">:</span> <span class="token string">'1999-01-01'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'nancy'</span><span class="token punctuation">,</span> <span class="token string">'dob'</span><span class="token punctuation">:</span> <span class="token string">'2001-02-01'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-异常处理"><a href="#06-异常处理" class="headerlink" title="06 异常处理"></a>06 异常处理</h2><pre class="line-numbers language-none"><code class="language-none">except  Exception :匹配任意非系统异常except:匹配任意异常（包括系统异常）当程序存在多个except block时，最多只有一个被执行，即如果多个except声明的异常都与实际相匹配，只有最前面的except block会被执行，其他则被忽略。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyInputError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#自定义异常类型的初始化</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#自定义异常类型的string表达形式</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'&#123;&#125; is invalid input'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> MyInputError<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#抛出MyInputError这个异常</span><span class="token keyword">except</span> MyInputError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyerror<span class="token punctuation">:</span><span class="token number">1</span> <span class="token keyword">is</span> invalid <span class="token builtin">input</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的使用场景与注意点"><a href="#异常的使用场景与注意点" class="headerlink" title="异常的使用场景与注意点"></a>异常的使用场景与注意点</h3><pre class="line-numbers language-none"><code class="language-none">1、如果不确定某段代码能否成功执行，往往这个地方就需要使用异常处理。2、对于流程控制（flow-control）的代码逻辑，一般不用异常处理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="07-函数"><a href="#07-函数" class="headerlink" title="07 函数"></a>07 函数</h2><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>）函数：就是为了实现某一功能的代码段，只要写好以后，就可以重复利用。<span class="token number">2</span>）<span class="token keyword">def</span> 是可执行语句，意味着函数直到被调用前，都是不存在的，当程序调用函数时，<span class="token keyword">def</span>语句才会创建一个新的函数对象，并赋予其名字。<span class="token number">3</span>）主程序调用函数时，必须保证这个函数此前已经定义过，不然就会报错。<span class="token number">4</span>）在函数内部调用其他函数，函数间哪个声明在前，哪个声明在后都无所谓，因为<span class="token keyword">def</span>是可执行语句，函数在调用前都不存在，只需要保证在调用时，所需函数都已经声明定义就可以了。<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    my_sub_func<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_sub_func</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got a message:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>my_func<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyGot a message<span class="token punctuation">:</span>hello worldProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span class="token number">5</span>）python函数的参数可以设定默认值，如果参数没有传参，就会使用默认参数<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    my_sub_func<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_sub_func</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got a message:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>my_func<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyGot a message<span class="token punctuation">:</span>HelloProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态</strong>：python中不用考虑输入的数据类型，而是将其交给具体的代码去判断执行，同样的一个函数（如：my_sum()，可以同时应用在整型、列表、字符串等等操作中。）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> bt <span class="token operator">=</span> my_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>s <span class="token operator">=</span> my_sum<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token number">4</span>helloworldProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python支持函数的嵌套，就是指函数里又有函数。</p><h3 id="函数变量的作用域"><a href="#函数变量的作用域" class="headerlink" title="函数变量的作用域"></a><strong>函数变量的作用域</strong></h3><p>对于嵌套函数，内部函数可以访问外部函数定义的变量，但是无法修改，若要修改，必须加上<strong>nonlocal</strong>关键字。</p><p>如果不加上nonlocal这个关键字，而内部函数的变量又和外部函数变量同名，那么内部函数变量会覆盖外部函数的变量。</p><p>嵌套函数作用：保证数据的隐私性，提高程序的运行效率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">'local'</span>    y <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> x        x <span class="token operator">=</span> <span class="token string">'nonlocal'</span>        y <span class="token operator">=</span> <span class="token number">6</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'outer:'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>outer<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token keyword">nonlocal</span><span class="token number">6</span>outer<span class="token punctuation">:</span> <span class="token number">3</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure)"></a>闭包(closure)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">闭包：与嵌套函数类似，不同的是这里的外部函数返回的是一个函数，而不是一个具体的值，返回的函数通常赋予一个变量，这个变量可以在后面被继续执行调用。作用：<span class="token number">1</span>、让程序变得更简单易读<span class="token number">2</span>、减少多次调用导致的不必要的开销，提高程序的运行效率闭包常常和装饰器一起使用。<span class="token keyword">def</span> <span class="token function">nth_power</span><span class="token punctuation">(</span>exponent<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exponent_of</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> base <span class="token operator">**</span> exponent    <span class="token keyword">return</span> exponent_of  <span class="token comment">#返回值是exponent_of函数</span>square <span class="token operator">=</span> nth_power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#计算一个数的平方</span>cube <span class="token operator">=</span> nth_power<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#计算一个数的立方</span><span class="token keyword">print</span><span class="token punctuation">(</span>square<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cube<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token number">36</span><span class="token number">216</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">匿名函数与常规函数的区别：<span class="token number">1</span>、<span class="token keyword">lambda</span>是一个表达式，而不是一个语句表达式：用一系列的‘公式’去表达一个东西语句：就是一定完成了某些功能，如：赋值语句<span class="token number">2</span>、<span class="token keyword">lambda</span>可以用在一些常规函数<span class="token keyword">def</span>不能用的地方，如：列表内部<span class="token number">3</span>、<span class="token keyword">lambda</span>可以用作某些函数的参数，常规函数<span class="token keyword">def</span>也不能<span class="token number">2</span>、<span class="token keyword">lambda</span>的主体是只有一行的简单表达式，并不能扩展成一个多行的代码块。li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token comment">#用在列表内部</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment">#用作函数的参数</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">]</span>l2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名函数的作用：</p><p>适用场景：函数非常简短，只需一行就能完成，且它在程序中只被调用一次。</p><p>简化代码的复杂度，提高代码的可读性。</p><h3 id="python函数式编程"><a href="#python函数式编程" class="headerlink" title="python函数式编程"></a>python函数式编程</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">函数式编程：指代码中的每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立，互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。函数式编程的优缺点：优点：主要在于其纯函数和不可变的特性使程序更加健壮，易于调试、测试。缺点：限制多，难写。<span class="token keyword">def</span> <span class="token function">multy_1</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#非纯函数，调用后l值改变，每次调用l都不同</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token number">2</span>    <span class="token keyword">return</span> l<span class="token keyword">def</span> <span class="token function">multy_2</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#纯函数，l未改变，每次调用执行结果相同</span>    new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>        new_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''map(function,iterable)函数表示对iterable中的每个元素，都用function这个函数，最后返回一个新的可遍历的集合。'''</span>new_list <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> new_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''filter(function,iterable)函数和map函数类似，function表示一个函数对象，filter()函数表示对iterable中每一个元素，都使用function判断，并返回True或False，最后将返回True的元素组成一个新的可遍历的集合。'''</span>new_list1 <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> new_list1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''reduce(function,iterable)函数通常用来对一个集合做一些累积操作。表示对iterable的每个元素以及上一次调用后的结果，运用function进行计算，所以最后返回一个单独的数值。'''</span>produce <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x <span class="token operator">*</span> y<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>produce<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token number">4</span><span class="token number">6</span><span class="token number">8</span><span class="token number">10</span><span class="token number">2</span><span class="token number">4</span><span class="token number">120</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对一个字典，根据值由高到低排序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'nike'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'lucy'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'ben'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">&#125;</span>d1 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'ben'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'nike'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'lucy'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python面向对象（二）</title>
      <link href="2021/04/29/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2021/04/29/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h1><p>抽象类：作为父类存在，一旦对象化会报错，python3.8可对象化。抽象函数定义在抽象类中，子类必须重写该函数才能使用，相应的抽象函数，则是使用装饰器@abstractmethod来表示。</p><p>抽象类是一种自上而下的设计风范，只需要用少量的代码描述清楚要做的事情，定义好接口。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod<span class="token keyword">class</span> <span class="token class-name">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">set_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>Entity<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title    <span class="token keyword">def</span> <span class="token function">set_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>title <span class="token operator">=</span> titledocument <span class="token operator">=</span> Document<span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Harry Potter'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>entity <span class="token operator">=</span> Entity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span>entity<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyHarry Potter<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Entity <span class="token builtin">object</span> at <span class="token number">0x000001F705F966A0</span><span class="token operator">></span><span class="token boolean">None</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面向对象的四要素：类、属性、对象、函数（方法）</p><p>类：具有相同属性和函数（方法）的对象（实例）的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">多继承，构造函数的执行顺序：<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter A'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave A'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter B'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave B'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter C'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave C'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enter D'</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'leave D'</span><span class="token punctuation">)</span>D<span class="token punctuation">(</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>json_1<span class="token punctuation">.</span>pyenter Denter Benter Center Aleave Aleave Cleave Bleave DProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现一个搜索引擎"><a href="#实现一个搜索引擎" class="headerlink" title="实现一个搜索引擎"></a>实现一个搜索引擎</h2><pre class="line-numbers language-none"><code class="language-none">一个搜索引擎由搜索器、索引器、检索器和用户接口四个部分组成。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="python模块化"><a href="#python模块化" class="headerlink" title="python模块化"></a>python模块化</h1><h2 id="简单模块化"><a href="#简单模块化" class="headerlink" title="简单模块化"></a>简单模块化</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">简单模块化同一文件夹：将函数、类、常量拆分到不同的文件，把它们放在同一个文件夹，然后使用<span class="token keyword">from</span>  your_file <span class="token keyword">import</span> function_name<span class="token punctuation">,</span>class_name的方法调用。不同文件夹：导入：<span class="token keyword">from</span> 文件夹名<span class="token punctuation">.</span>文件名 <span class="token keyword">import</span> <span class="token operator">*</span>     <span class="token keyword">from</span> 文件夹名<span class="token punctuation">.</span>文件名 <span class="token keyword">import</span> 函数名如果想要调用上层目录，可以使用 <span class="token keyword">import</span> sys<span class="token punctuation">,</span>   sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>表示将当前程序所在位置向上提了一级，之后就可以调用上一层的文件夹中的模块了。（不推荐使用）<span class="token comment">#utils.py</span><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token comment">#class_utils.py</span><span class="token keyword">class</span> <span class="token class-name">Encoder</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment">#倒序</span><span class="token keyword">class</span> <span class="token class-name">Decoder</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#revesed()，倒排</span>        <span class="token comment">#main_s.py</span><span class="token keyword">from</span> utils <span class="token keyword">import</span> get_sum<span class="token keyword">from</span> class_utils <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>get_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>encoder <span class="token operator">=</span> Encoder<span class="token punctuation">(</span><span class="token punctuation">)</span>decoder <span class="token operator">=</span> Decoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>decoder<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'edcba'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span><span class="token operator">/</span>python_project<span class="token operator">/</span>jike<span class="token operator">/</span>main<span class="token punctuation">.</span>py<span class="token number">3</span>edcbaabcdeProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目模块化"><a href="#项目模块化" class="headerlink" title="项目模块化"></a>项目模块化</h2><pre class="line-numbers language-none"><code class="language-none">所有代码放在同一个仓库的优点：1、简化依赖管理，所有的代码模块都可以被调用，提高代码的分享共用能力2、版本统一。3、代码追溯。项目模块化：以项目的根目录作为最基本的目录，所有模块的调用，都要通过根目录一层层向下索引的方式来import。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#proto/mat.py</span><span class="token keyword">class</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token comment">#数据</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">#行</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#列</span>        <span class="token comment">#utils/mat_mul.py</span><span class="token keyword">from</span> proto<span class="token punctuation">.</span>mat <span class="token keyword">import</span> Matrix<span class="token keyword">def</span> <span class="token function">mat_mul</span><span class="token punctuation">(</span>matrix_1<span class="token punctuation">,</span>matrix_2<span class="token punctuation">:</span>Matrix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#matrix_1,matrix_2是参数,Matrix是参数类型</span>    <span class="token keyword">assert</span> matrix_1<span class="token punctuation">.</span>m <span class="token operator">==</span> matrix_2<span class="token punctuation">.</span>n<span class="token comment">#矩阵1的列号和矩阵2的行号相等</span>    n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s <span class="token operator">=</span> matrix_1<span class="token punctuation">.</span>n<span class="token punctuation">,</span>matrix_1<span class="token punctuation">.</span>m<span class="token punctuation">,</span>matrix_2<span class="token punctuation">.</span>m    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> matrix_1<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> matrix_2<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token comment">#矩阵相乘</span>    <span class="token keyword">return</span> Matrix<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#jike/main_s.py</span><span class="token keyword">from</span> proto<span class="token punctuation">.</span>mat <span class="token keyword">import</span> Matrix<span class="token keyword">from</span> utils<span class="token punctuation">.</span>mat_mul <span class="token keyword">import</span> mat_mula <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> Matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mat_mul<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>main_s<span class="token punctuation">.</span>py执行结果：D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token keyword">import</span> 在导入文件时，会自动把所有暴露在外面的代码全都执行一遍，因此，如果想要把一个东西封装成模块，又想让它可以执行的话，就必须将要执行的代码放在<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span>下面。<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span>可以来避开<span class="token keyword">import</span>时执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#utils/utils.py</span><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'testing'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125; + &#123;&#125; = &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>get_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#utils/utils_with_main.py</span><span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'testing'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125; + &#123;&#125; = &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> get_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#main_s.py</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>utils <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get_sum:'</span><span class="token punctuation">,</span>get_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>执行结果：D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>pytesting<span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span>get_sum<span class="token punctuation">:</span> <span class="token number">3</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>utils_with_main <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get_sum:'</span><span class="token punctuation">,</span>get_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>执行结果：D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>pyget_sum<span class="token punctuation">:</span> <span class="token number">3</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> moudle_name <span class="token keyword">import</span> <span class="token operator">*</span> 和 <span class="token keyword">import</span> moudle_name 的区别：<span class="token keyword">from</span> moudle_name <span class="token keyword">import</span> <span class="token operator">*</span> 会把moudle中所有的函数和类全拿过来，如果和其他函数名冲突就会出现问题；<span class="token keyword">import</span> moudle_name也会导入所有的函数和类，但是调用的时候必须使用moudle_name<span class="token punctuation">.</span>func的方法调用，等于增加了一层layer，有效避免冲突。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="python对象的比较、拷贝"><a href="#python对象的比较、拷贝" class="headerlink" title="python对象的比较、拷贝"></a>python对象的比较、拷贝</h1><h2 id="“-“vs-“is”"><a href="#“-“vs-“is”" class="headerlink" title="“== “vs “is”"></a>“== “vs “is”</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">==</span> 比较两个对象之间的值是否相等<span class="token keyword">is</span> 比较两个对象的身份标识是否相等，是否是同一对象，是否指向同一个内存地址<span class="token keyword">is</span>的效率优于<span class="token string">'=='</span>，因为<span class="token string">'is'</span>操作无法被重载，执行<span class="token string">'is'</span>操作只是简单的获取对象ID，并进行比较；而<span class="token string">'=='</span>操作符则会递归遍历对象所有值，并逐一比较。a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#id(object)函数，获取对象的身份标识，对于int类型的数据，a is b为True的结论只适用于-5到256范围内的数字，因为python内部对-5到256的整型数据维持一个数组，起到一个缓存作用。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token boolean">True</span><span class="token number">140712789907392</span><span class="token number">140712789907392</span><span class="token boolean">True</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span class="token triple-quoted-string string">'''对于不可变的变量，之前用 == 或 is 比较后，结果不会一直不变'''</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span>t1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#元组中的列表是可变的，修改元组中的列表，元组也随之改变</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token boolean">True</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浅拷贝和深度拷贝"><a href="#浅拷贝和深度拷贝" class="headerlink" title="浅拷贝和深度拷贝"></a>浅拷贝和深度拷贝</h2><p><strong>浅拷贝</strong></p><p>常见的浅拷贝的方法，是使用数据类型本身的构造器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2<span class="token punctuation">)</span>     <span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token keyword">is</span> l2<span class="token punctuation">)</span>     <span class="token comment">#False</span>s1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span>     <span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token keyword">is</span> s2<span class="token punctuation">)</span>     <span class="token comment">#False</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>           <span class="token comment">#&#123;1, 2, 3&#125;</span><span class="token triple-quoted-string string">'''对于可变的序列，还可以通过切片操作符':'完成浅拷贝'''</span>l11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l12 <span class="token operator">=</span> l11<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l11 <span class="token operator">==</span> l12<span class="token punctuation">)</span>       <span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>l11 <span class="token keyword">is</span> l12<span class="token punctuation">)</span>       <span class="token comment">#False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python中也提供了相应的函数copy.copy()，适用于任何数据类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copyl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token comment">#l2 = copy.copy(l1)     作用相同  l1.copy()</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2<span class="token punctuation">)</span>     <span class="token comment">#True</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token keyword">is</span> l2<span class="token punctuation">)</span>     <span class="token comment">#False</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token boolean">True</span><span class="token boolean">False</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">对于元组，使用<span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>或切片操作符<span class="token string">':'</span>不会创建一份浅拷贝，相反，它会返回一个指向相同元组的引用。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l3 <span class="token operator">=</span> l1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2 <span class="token operator">==</span> l3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2 <span class="token operator">==</span> l3<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token boolean">True</span><span class="token boolean">True</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">浅拷贝：指重新分配一块内存，创建一个新的对象，里面的元素是原对象中子对象的引用。因此，若原对象中的元素不可变，无所谓；但如果元素可变，浅拷贝通常会带来一些副作用。<span class="token triple-quoted-string string">'''由于浅拷贝里的元素是对原对象元素的引用，所以l2中的元素和l1指向同一个列表和元组对象。'''</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment">#l1新增元素不会影响l2，l1和l2作为两个整体对象不共享内存地址</span>l1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment">#l2也会改变，因为l2中的列表和l1指向同一个列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>l1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">#元组不可变，l1创建了新元组，l2没有引用新的元组</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>深拷贝</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">深拷贝：指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，原对象和新对象没有任何关联。python中以copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span><span class="token punctuation">)</span>来实现对象的深度拷贝。<span class="token keyword">import</span> copyl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>l1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>l1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span>无限循环问题：深拷贝中会维护一个字典，记录已经拷贝的对象及其ID，来提高效率并防止无限递归的发生。<span class="token keyword">import</span> copyl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>       <span class="token comment">#列表l1中有指向自身的引用，因此l1是一个无限嵌套的列表</span>l2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''无限嵌套的列表，执行‘==’操作时，逐个比较列表中的元素，递归层数是无限的，会报错。'''</span><span class="token keyword">import</span> copyl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>       <span class="token comment">#列表l1中有指向自身的引用，因此l1是一个无限嵌套的列表</span>l2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token keyword">is</span> l2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token boolean">False</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"D:\python_project\jike\main_s.py"</span><span class="token punctuation">,</span> line <span class="token number">7</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2<span class="token punctuation">)</span>RecursionError<span class="token punctuation">:</span> maximum recursion depth exceeded <span class="token keyword">in</span> comparisonProcess finished <span class="token keyword">with</span> exit code <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="python中参数的传递"><a href="#python中参数的传递" class="headerlink" title="python中参数的传递"></a>python中参数的传递</h1><p><strong>值传递</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">值传递：拷贝参数的值，然后传递给函数里的新变量，这样，原变量和新变量之间相互独立，互不影响。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>引用传递</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">引用传递：指把参数的引用传给新的变量，这样，原变量和新变量指向同一块内存地址，如果改变了其中任何一个变量的值，那么另外一个变量也会相应地随之改变。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="python变量及其赋值"><a href="#python变量及其赋值" class="headerlink" title="python变量及其赋值"></a>python变量及其赋值</h2><pre class="line-numbers language-none"><code class="language-none">1、变量的赋值，只是表示让变量指向了某个对象，并不表示拷贝对象给变量；一个对象可以被多个变量所指向2、可变对象（列表、字典、集合等）的改变，会影响所有指向该对象的变量3、对于不可变对象（字符串、整型、元组等），所有指向该对象的变量的值总是一样的，也不会改变。但是通过某些操作（+&#x3D;等等）更新不可变对象的值时，会返回一个新的对象。4、变量可以被删除，但是对象无法被删除。（垃圾回收）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> aa <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l1l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python函数的参数传递"><a href="#python函数的参数传递" class="headerlink" title="python函数的参数传递"></a>python函数的参数传递</h2><pre class="line-numbers language-none"><code class="language-none">python的参数传递是赋值传递，或叫做对象的引用传递。python里所有的数据类型都是对象，所以参数传递时，只是让新变量与原变量指向相同的对象而已，并不存在值传递或是引用传递一说。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func_1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">return</span> ba <span class="token operator">=</span> <span class="token number">1</span>a <span class="token operator">=</span> func_1<span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">#重新赋值</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func_2</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>func_2<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func_3</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">:</span>    l2 <span class="token operator">=</span> l2 <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">#创建了末尾加入[3,4]的新列表，l2 重新赋值指向新列表</span>l3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>func_3<span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l3<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token number">2</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">python中参数的传递是赋值传递，或叫做对象的引用传递。这里的赋值或对象的引用传递，不是指向一个具体的内存地址，而是指向一个具体的对象。修改变量的值有两种方法：1、直接将可变数据类型（字典、列表、集合等）当参数传入，直接在其上修改；2、创建一个新的变量，来保存修改后的值，然后将其返回给原变量。（推荐）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>l3 <span class="token operator">=</span> l2<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token number">2792886690112</span><span class="token number">2792887381440</span><span class="token number">2792887381440</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#字典是可变的，参数中值被改变，字典中key对应的值也随之改变</span>    d<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>    d<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span>func<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>D<span class="token punctuation">:</span>\Enviroments\python\python\python3<span class="token punctuation">.</span>exe D<span class="token punctuation">:</span>\python_project\jike\main_s<span class="token punctuation">.</span>py<span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础</title>
      <link href="2021/04/27/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/27/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h1><p>来自B站浪晋的测试小讲堂萌芽计划笔记</p><h2 id="day-1-软件测试的介绍和分类"><a href="#day-1-软件测试的介绍和分类" class="headerlink" title="day 1   软件测试的介绍和分类"></a>day 1   软件测试的介绍和分类</h2><p>测试的定义、测试的分类、测试的方法、测试的生命周期。</p><p>软件测试：就是检查实际结果和预期结果是否一致。检查软件开发中存在的问题缺陷。保证软件质量符合客户需求的一系列手段。</p><p><strong>软件测试的职业规划</strong></p><p><img src="https://raw.githubusercontent.com/yixiaobaiio/yixiaobaiio.github.io/master/img/1.png"></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/3.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">软件测试的分类：按方法划分：黑盒测试：将软件看作是一个不能打开的黑盒子，来测试其功能实现。白盒测试：知道软件的内部结构，了解软件的内部逻辑进行测试。灰盒测试：介于黑盒和白盒之间。按方向划分：功能测试：测试软件的功能实现是否符合用户需求，功能是否存在缺陷。性能测试：压力测试：测试软件的性能瓶颈，即软件最大的承受能力。负载测试：测试软件最大负荷情况下正常持续工作的时间，能力。并发测试：测试软件同时处理多个请求的能力。安全测试：是否存在漏洞，容易被黑客攻击。黑盒测试不是功能测试，它们的分类方式不同。黑盒测试是进行功能测试的一种方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/4.png?raw=true"></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/5.png?raw=true"></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/6.png?raw=true"></p><p>软件公司研发团队的结构</p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/7.png?raw=true"></p><p><strong>功能点的划分流程</strong>：从大到小划分功能点。</p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/13.png?raw=true"></p><p><strong>职业规划</strong>(具体学习时间安排、职业发展规划)</p><pre class="line-numbers language-none"><code class="language-none">学习安排1、2021.1 - 2021.3 学习java基础、软件测试基础知识并做好笔记2、2021.4 - 2021.7 学习javaWeb知识、测试工具的使用职业规划入职一年做好功能测试，并坚持写博客，学习总结2-3年 自动化测试工程师3-5年性能测试工程师<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="day-2-软件研发模型和测试流程"><a href="#day-2-软件研发模型和测试流程" class="headerlink" title="day 2  软件研发模型和测试流程"></a>day 2  软件研发模型和测试流程</h2><p>软件研发管理模型</p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/11.png?raw=true"></p><p><strong>瀑布流</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/8.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">特点：从上往下，每个步骤都是相互独立的，不可逆转。不变通，效率低。（流程的基础）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>V字型</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/9.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">特点：测试和开发的工作一一对照，还是一个从上往下的过程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>W字型</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/10.png?raw=true"></p><pre class="line-numbers language-none"><code class="language-none">特点：左侧的V是开发的工作，右侧V是测试的工作，开发和测试的工作可同步进行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>敏捷模型</strong></p><pre class="line-numbers language-none"><code class="language-none">特点：没有具体的模型，高效的工作，及时的沟通，日报，白板，站立会!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>测试流程</strong></p><pre class="line-numbers language-none"><code class="language-none">测试流程：需求分析阶段 ---&gt;测试设计阶段 ---&gt; 测试执行阶段 ---&gt; 测试总结阶段具体每个阶段的工作：需求分析阶段：    1、进行需求分析：需求分析、产品说明书、口述（方式）     2、学习业务流程（了解项目软件使用的专业知识）    3、提取功能点（从大到小划分功能，直到划分到最小功能点，思维导图或excel表）    4、编写需求分析说明书  注意：没有需求怎么办？参考市面上同类型的成熟软件的实现（参考其实现的规则） 测试设计阶段（文档阶段）：主要编写文档，测试计划、测试方案、测试策略、测试用例。 养成优秀测试的能力：测试、文档、编程 编写文档的方法：5W1H方法 测试计划说明书（测试计划、测试策略、测试方案） 测试计划的重点：时间、人员和资源的安排及分配 测试方案的重点：针对每个测试的内容如何开展测试、采用什么测试计划？使用什么测试工具 测试策略的重点：哪些内容先测试、哪些内容后测试、测试开始和结束的标准是什么 测试执行阶段： 测试总结阶段：            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/14.png?raw=true"></p><h2 id="day-3-测试用例的编写和bug管理"><a href="#day-3-测试用例的编写和bug管理" class="headerlink" title="day 3  测试用例的编写和bug管理"></a>day 3  测试用例的编写和bug管理</h2><p>测试用例为测试人员工作提供一个测试工作依据。</p><p>测试用例根据软件需求说明书进行编写，其执行的多少可估计为软件测试的覆盖率，测试用例覆盖到需求说明书中所有的软件功能，可以说测试用例覆盖率为100%。</p><p>测试方法：等价类、边界值、场景法（三个重要的）、因果图、判定表、路径覆盖、、、、</p><pre class="line-numbers language-none"><code class="language-none">等价类：分为无效等价类和有效等价类（即有效值和无效值）边界值：场景法：以微信发红包为例，用户的使用场景有发送成功和发送失败两种场景。发送成功：用户输入符合要求的数额，发送成功发送失败：用户什么都不输入发送失败；输入超出范围的数额发送失败；用户发送非数字的值，发送失败。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">测试用例要素：测试用例编号（唯一的）测试用例名称（言简意赅，用最少的字描述清楚测试用例的功能）前置条件（执行该测试用例之前必须满足的条件）优先级（执行该用例的时间要求紧急级别）重要级（这个被测的功能在系统里面的重要级别）测试数据测试步骤预期结果实际结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试用例编写练习</strong></p><p><img src="https://github.com/yixiaobaiio/yixiaobaiio.github.io/blob/master/img/3-16.png?raw=true"></p><table><thead><tr><th>用例编号</th><th>用例名称</th><th>前置条件</th><th>优先级</th><th>重要级</th><th>测试数据</th><th>测试步骤</th><th>预期结果</th><th>实际结果</th></tr></thead><tbody><tr><td>1</td><td>注册功能</td><td></td><td></td><td></td><td>账号：a11111 密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称，点击注册按钮</td><td>注册成功</td><td>注册成功</td></tr><tr><td>2</td><td></td><td></td><td></td><td></td><td>账号：a11111 222222密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称，点击注册按钮</td><td>注册成功</td><td>注册成功</td></tr><tr><td>3</td><td></td><td></td><td></td><td></td><td>账号：11111 222222/*&amp;asd12密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称，点击注册按钮</td><td>注册失败，提示账号格式不正确</td><td>注册失败，提示账号格式不正确</td></tr><tr><td>4</td><td></td><td></td><td></td><td></td><td>账号：aa11111 222222/aa112密码：abc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示账号长度不正确</td><td>注册失败，提示账号长度不正确</td></tr><tr><td>5</td><td></td><td></td><td></td><td></td><td>账号：a11111 222222密码：abcdefgf/12345678/*&amp;^#1234昵称：翼小白</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示密码格式不正确</td><td>注册失败，提示密码格式不正确</td></tr><tr><td>6</td><td></td><td></td><td></td><td></td><td>账号：a11111222222密码：abc12345 确认密码：acc12345 昵称：翼小白</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示确认密码和输入密码不一致</td><td>注册失败，提示确认密码和输入密码不一致</td></tr><tr><td>7</td><td></td><td></td><td></td><td></td><td>账号：a11111222222密码：abc12345 确认密码：abc12345 昵称：翼小白12</td><td>输入账号、密码、确认密码和昵称点击注册按钮</td><td>注册失败，提示昵称格式不正确</td><td>注册失败，提示昵称格式不正确</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">测试的一些常识：1、测试是无穷无尽的2、评审：同行评审、小组评审、部门评审、项目评审、第三方评审、邮件评审<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试执行阶段：如果预期结果和实际结果一致，则测试通过；若不一致，则提交bug。测试执行阶段主要的工作就是提交bug和回归测试。</p><pre class="line-numbers language-none"><code class="language-none">bug的管理：bug的管理平台&#x2F;系统&#x2F;工具禅道、BUGFree、ALM&#x2F;QC、testlink、Bugzilla、JIRA等。bug生命周期bug六要素编号、BUG的名称、BUG的优先级（高、中、低）、BUG的严重级别（致命的：影响软件核心功能的正常使用；软件闪退、崩溃；和钱有关。严重的：导致功能无法正常使用；一般的：功能的某些场景异常有问题；轻微的：建议性、UI、用户体验方面的问题。）、BUG复现步骤（用例步骤+实际结果+预期结果）、附件（附件的作用佐证bug存在，可用截图、日志、视频等）bug的状态新建&#x2F;new、打开&#x2F;激活&#x2F;open、已确认、已解决、拒绝、重新打开&#x2F;reopen、关闭&#x2F;closed、延期处理、重复BUG回归测试：在版本2中检查版本1中发现的问题是否被修复解决。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">版本迭代：随着时间&#x2F;测试次数的推进会发布很多版本，其中版本号是不断叠加的。增量测试：只测试已知的有变化的部分全量测试：测试软件的所有功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="day-4-测试应用和测试报告"><a href="#day-4-测试应用和测试报告" class="headerlink" title="day 4  测试应用和测试报告"></a>day 4  测试应用和测试报告</h2><pre class="line-numbers language-none"><code class="language-none">测试应用：APP测试、WEB测试软件结构：B&#x2F;S （browser&#x2F;server  浏览器和服务器）   C&#x2F;S（client&#x2F;server  客户端和服务器）B&#x2F;S和C&#x2F;S的区别：浏览器不需要安装，版本更新时，只需要服务器更新，访问网页可以访问最新版本。客户端，版本更新时客户端和服务器都要更新。APP测试比WEB测试更加复杂，APP测试需要测试（APP专项测试）（1 安装、卸载； (2 消息推送、 (3 更新、 (4 弱网测试（2G&#x2F;3G&#x2F;4G&#x2F;5G&#x2F;WIFI等、 (5 场景交互测试（来电话、听音乐、调用相机、前后台的切换）、 (6 权限测试（7 离线测试 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">测试总结阶段要编写测试报告测试报告（核心包含）：对工作的总结、对BUG的统计分析、对被测软件的评估bug的统计分析：可以根据不同的属性对bug进行统计分析；如根据测试、开发、软件模块、bug等级、解决时间、软件版本、bug状态等对被测软件质量的评估一二级的bug全部关闭三级的bug关闭80%+四级的bug修不修改无所谓当软件的质量达到以上标准就认为软件已达到验收标准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试计划、测试方案、测试策略、测试用例的编写。<br> BUG的定义、BUG的分类、BUG的六要素、BUG的生命周期。<br> 测试和开发流程的关系、瀑布流、V字形、W字型（双V）、螺旋型、敏捷等等。<br> 戴明环、5W2H等分析管理的方法<br> 质量管理体系CMMI（了解）</p><h1 id="接口测试相关（公众号）"><a href="#接口测试相关（公众号）" class="headerlink" title="接口测试相关（公众号）"></a>接口测试相关（公众号）</h1><p>——阿里技术《如何编写有效的接口测试》</p><p><strong>接口测试的好处</strong></p><p>有效且覆盖完整的接口测试，能够保障新功能的开发质量；让开发在修改功能逻辑的时候有回归的能力；也是能优雅地进行重构的前提。</p><pre class="line-numbers language-none"><code class="language-none">测试能够保障代码的开发质量，新功能测试可以保障新功能逻辑正确；回归测试保障原有业务功能逻辑正确；测试的方式：人工测试和自动化测试自动化测试的特点：可持续、可重复、甚至可AI化。注：易测性也是代码结构合理的一个指标。测试的分层从大到小：全链路测试---&gt;域链路测试（架构域A）---&gt;(系统)接口测试---&gt;模块测试---&gt;单元测试单元测试：对单个类或单个方法的测试。当是一个工具或一段比较内聚又复杂的逻辑（如算法逻辑），应使用单元测试来保障逻辑的正确性。模块测试：系统比较大，模块比较多的情况下可以建立模块测试层，保障各模块功能的正确性。当前系统的发展趋势是微服务架构，模块测试非十分必要，可通过接口测试层来覆盖。接口测试：从系统入口出发进行集成测试。（入口测试）应用入口通常是HSF（一个分布式RPC服务框架）服务，消息，定时任务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口测试要遵循的原则</strong></p><pre class="line-numbers language-none"><code class="language-none">测试的原则基础原则：（1）自动化：接口测试是非交互式的自动化执行，不需要人参与（2）独立性：接口测试之间不应该相互依赖（3）可重复：接口测试可重复执行，不受环境影响（4）接口测试遵循BCDE原则，保障接口的交付质量。Border：边界测试Correct：正确的输入，正确的预期输出Design：按照需求和设计文档编写测试逻辑Error：错误输入，预期输出（5）数据准备：数据准备通过系统服务进行，不能通过直接插入db方式（插入数据库）（6）可测性：对于不可测的代码需要进行重构成合理的结构（7）覆盖性：接口测试需要覆盖所有的UC，同时代码覆盖率和分支覆盖率应达到一定标准，新增代码必须被覆盖（8）持续性：如果代码修改导致已有接口测试执行失败，必须修复代码问题或者测试代码逻辑（9）时间要求：接口测试应该在项目发布之前完成，不应该放到项目发布之后补充以上基本原则应适用于所有层的自动化测试用例，在编写接口测试时，除了以上原则，还有其它原则需要遵守有效接口测试的关键原则是要覆盖所有入口；mock所有依赖；校验执行过程中所留下的痕迹。（1）入口覆盖：接口测试用例必须覆盖HSF服务入口、消息入口、定时任务入口。（2）依赖mock：接口测试不能受环境依赖，需要mock掉对外依赖。但对于db依赖，不建议完全mock掉，一方面mock的成本高，另外可能覆盖不到sql和表约束逻辑。（3）校验完整：有效接口测试应具备完整的校验，没有校验的接口测试是没有意义的。执行过程中留下的的痕迹对业务有影响，都要进行完整校验，方能保障接口测试的有效性。HSF接口返回值校验：按照场景和接口约定进行HSF返回参数校验DB校验：校验落地数据的正确性缓存校验：校验存入缓存中数据的正确性HSF依赖入参校验：通过mock工具获得依赖HSF调用的入参，进行入参校验。消息校验：通过mock工具获得发送的消息对象，进行消息体校验。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试代码的结构</strong></p><pre class="line-numbers language-none"><code class="language-none">1、和业务代码一样，考虑可读、可拓展、可复用性。2、可根据系统的业务特性，在测试框架的基础上封装适合当前系统的测试组件，提高测试代码编写效率，规范测试代码结构。接口的测试代码结构：1、测试准备依赖数据准备配置数据：可通过定义配置文件来初始化配置业务数据：这里数据，禁止通过直接插入数据方式产生，而应通过调用业务服务产生。依赖mock对于外部依赖，需要对被依赖的服务进行mock，避免真实调用接口测试入参准备准备接口方面的入参。2、测试执行调用接口方法，执行业务逻辑。3、测试校验返回参数校验：检验接口的返回参数DB：校验DB落地数据缓存数据校验：校验落地到缓存中的数据消息校验：校验对外发送的消息对象对外HSF调用校验：校验对外HSF调用的入参。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>接口测试的实践技巧</strong></p><pre class="line-numbers language-none"><code class="language-none">1、执行效率（需要关注的点）提高测试执行效率的建议方案：（1）最小化启动测试上下文，例如spring boot的应用，启动spring就可以了（2）使用内存数据库，例如h2（3）将中间件依赖mock掉2、测试框架选择建议选择基于testng，能够提供通过配置文件做数据准备的测试框架。如果找不到合适的，可以自己基于testng进行封装。3、接口测试覆盖度（1）基于业务场景和测试经验枚举出正常和异常情况（2）一些固定需要测试的点：幂等测试、边界值测试、参数不正确测试等等。同时，要通过覆盖率工具查看接口未覆盖的代码或分支逻辑，进行针对性的场景覆盖测试。分支完整性覆盖非常重要，特别是异常的分支。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="51Testing"><a href="#51Testing" class="headerlink" title="51Testing"></a>51Testing</h1><h2 id="如何编写好一条测试用例"><a href="#如何编写好一条测试用例" class="headerlink" title="如何编写好一条测试用例"></a>如何编写好一条测试用例</h2><p>1、编写测试用例的时间：需求评审、技术方案确定后，提测之前</p><p>2、测试用例的好处：</p><pre class="line-numbers language-none"><code class="language-none">1、任何测试人员都可以执行2、减少不必要的沟通成本，节省实际执行时间3、尽可能减少重复劳动4、归档（为后续的迭代、回归、回溯或交接等提供清晰的依据以及指导。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、测试用例必要字段</p><pre class="line-numbers language-none"><code class="language-none">1、用例名称：简洁且完整的说明该条用例的作用2、前置条件：执行用例需要做哪些前置步骤3、用例步骤或输入步骤（执行用例的每步操作）4、预期结果（明确、清晰、完整的描写相关的检查点，确保能明确判断用例是否通过）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、测试用例的扩展字段</p><pre class="line-numbers language-none"><code class="language-none">1、用例编号：用例ID，一般命名方式为：需求编号+功能模块代号+测试类别+编号2、优先级：用例执行的优先级，一般将开发提测前自测的用例设置为最高级，一般为正常功能、主流程用例3、使用平台：测试平台，如安卓、iOS、PC、MAC等4、是否自动化5、关联需求：关联至该需求，便于回溯6、是否通过7、网络：测试环境的网络情况及相关参数8、备注：注明该用例需要注意的事项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试理论基础</title>
      <link href="2021/04/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>01什么是软件测试？软件测试的目的与原则是什么？</strong></p><p>在<strong>规定的条件下对程序进行操作</strong>，以发现<strong>程序错误</strong>，<strong>衡量软件质量</strong>，并对其是否能<strong>满足设计要求进行评估</strong>的过程。</p><p><strong>1）软件测试的目的：</strong></p><ul><li>想<strong>以最少的人力、物力和时间找出软件中潜在的各种错误和缺陷</strong>，通过<strong>修正各种错误和缺陷提高软件质量</strong>，回避软件发布后由于<strong>潜在的软件缺陷和错误造成的隐患</strong>所带来的商业风险</li><li>测试是以<strong>评价一个程序或者系统属性</strong>为目标的活动，测试是对<strong>软件质量的度量与评估</strong>，以<strong>验证软件的质量满足用户的需求的程度</strong>，为用户选择与接受软件提供有力的依据</li><li>通过分析错误产生的原因还可以<strong>帮助发现当前开发工作所采用的软件过程的缺陷，以便进行软件过程改进</strong>。同时，通过对测试结果的分析整理，还可以修正软件开发规则，并为软件可靠性分析提供了依据通过最终的验收测试，也可以<strong>证明软件满足了用户的需求，树立人们使用软件的信心。</strong></li></ul><p><strong>2）软件测试的原则：</strong></p><ul><li>所有的软件测试都应<strong>追溯到用户需求</strong></li><li>应当把“<strong>尽早地和不断地进行软件测试</strong>”作为软件测试者的座右铭</li><li>完全测试是不可能的，<strong>测试需要终止</strong></li><li>测试<strong>无法显示软件潜在的缺陷</strong></li><li>充分注意测试中的<strong>群集现象</strong></li><li><strong>程序员应避免检查自己的程序</strong></li><li><strong>尽量避免测试的随意性</strong></li></ul><p><strong>02目前主要的测试用例设计方法是什么？</strong></p><p><strong>1）白盒测试</strong>：逻辑覆盖、循环覆盖、基本路径覆盖。</p><p><strong>2）黑盒测试</strong>：边界值分析法、等价类划分、错误猜测法、因果图法、状态图法、测试大纲法、随机测试、场景法。</p><p><strong>03</strong>什么是<strong>测试用例</strong>? 什么是<strong>测试脚本</strong>? 两者的关系是什么？</p><p><strong>1）测试用例</strong>：为实施测试而向<strong>被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。</strong></p><p><strong>2）测试脚本</strong>：为了进行<strong>自动化测试而编写的脚本</strong>。</p><p><strong>3）关系</strong>：<strong>测试脚本的编写必须对应相应的测试用例</strong>。</p><p><strong>04简述什么是静态测试、动态测试、黑盒测试、白盒测试、α测试、β测试</strong></p><p><strong>1）静态测试</strong>是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。  </p><p><strong>2）动态测试</strong>是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。</p><p><strong>3）黑盒测试</strong>一般用来<strong>确认软件功能的正确性和可操作性</strong>，目的是检测软件的各个功能是否能得以实现，把被测试的程序当作一个黑盒，不考虑其内部结构，在知道该程序的输入和输出之间的关系或程序功能的情况下，依靠软件规格说明书来确定测试用例和推断测试结果的正确性。</p><p><strong>4）白盒测试</strong>根据<strong>软件内部的逻辑结构分析来进行测试</strong>，是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般黑盒测试由项目经理在程序员开发中来实现。</p><p><strong>5）α测试</strong>是由一个用户在<strong>开发环境</strong>下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，α测试不能由程序员或测试员完成。</p><p><strong>6）β测试</strong>是软件的多个用户在一个或多个用户的<strong>实际使用环境</strong>下进行的测试。开发者通常不在测试现场，β测试不能由程序员或测试员完成。</p><p><strong>05软件测试的策略是什么？</strong></p><p><strong>软件测试策略</strong>：在一定的软件测试标准、测试规范的指导下，依据测试项目的特定环境约束而规定的软件测试的原则、方式、方法的集合。</p><p><strong>06软件测试各个阶段通常完成什么工作？各个阶段的结果文件是什么？包括什么内容？</strong></p><p><strong>1）单元测试阶段</strong>：各独立单元模块在与系统的其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。</p><p><strong>2）集成测试阶段</strong>：集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。</p><p><strong>3）系统测试阶段</strong>：将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。</p><p><strong>07测试人员在软件开发过程中的任务是什么？</strong></p><ul><li>尽可能早的找出系统中的Bug</li><li>避免软件开发过程中缺陷的出现</li><li>衡量软件的品质，保证系统的质量</li><li>关注用户的需求，并保证系统符合用户需求</li></ul><p><strong>总的目标是</strong>：确保软件的质量。</p><p><strong>08黑盒测试的测试用例常见设计方法都有哪些？请分别以具体的例子来说明</strong></p><p><strong>1）等价类划分</strong>：等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据。取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类。</p><p><strong>2）边界值分析法</strong>：是对等价类划分方法的补充。测试工作经验告诉我，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。</p><p>使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。</p><p><strong>3）错误猜测法</strong>：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。</p><p>错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如，在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。</p><p><strong>4）因果图方法</strong>：前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型）。因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。</p><p><strong>5）正交表分析法</strong>：可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。</p><p><strong>6）场景分析方法</strong>：指根据用户场景来模拟用户的操作步骤，这个比较类似因果图，但是可能执行的深度和可行性更好。 </p><p><strong>7）状态图法</strong>：通过输入条件和系统需求说明得到被测系统的所有状态，通过输入条件和状态得出输出条件；通过输入条件、输出条件和状态得出被测系统的测试用例。</p><p><strong>8）大纲法</strong>：大纲法是一种着眼于需求的方法，为了列出各种测试条件，就将需求转换为大纲的形式。大纲表示为树状结构，在根和每个叶子结点之间存在唯一的路径。大纲中的每条路径定义了一个特定的输入条件集合，用于定义测试用例。树中叶子的数目或大纲中的路径给出了测试所有功能所需测试用例的大致数量。</p><p><strong>09软件测试项目从什么时候开始？为什么？</strong> </p><p>软件测试应该在需求分析阶段就介入，因为测试的对象不仅仅是程序编码，应该对软件开发过程中产生的所有产品都测试，并且软件缺陷存在放大趋势，缺陷发现的越晚，修复它所花费的成本就越大。</p><p><strong>10</strong></p><p>什么是回归测试？</p><p>回归测试：回归测试有两类，用例回归和错误回归；用例回归是过一段时间以后再回头对以前使用过的用例在重新进行测试，看看会重新发现问题。错误回归，就是在新版本中，对以前版本中出现并修复的缺陷进行再次验证，并以缺陷为核心，对相关修改的部分进行测试的方法。</p><p><strong>11你认为做好测试计划工作的关键是什么？</strong></p><p><strong>1）明确测试的目标，增强测试计划的实用性。</strong></p><p>编写软件测试计划的重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确。</p><p><strong>2）坚持“5W1H”规则，明确内容与过程。</strong></p><p>“5W1H”规则指的是“What（做什么）”、“Why（为什么做）”、“When（何时做）”、“Where（在哪里）”、“who（谁来做）”、“How（如何做）”。利用“5W1H”规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），确定项目有关人员（who），给出测试文档和软件的存放位置（Where）、指出测试的方法和工具（How）。</p><p><strong>3）采用评审和更新机制，保证测试计划满足实际需求。</strong></p><p>测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。</p><p><strong>4）分别创建测试计划与测试详细规格、测试用例。</strong></p><p>应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。</p><p><strong>12一份测试计划应该包括哪些内容？</strong></p><p>背景、项目简介、目的、测试范围、测试策略、人员分工、资源要求、进度计划、参考文档、常用术语、提交文档、风险分析。 </p><p><strong>13缺陷记录应包含的内容？</strong></p><p>缺陷标识、缺陷类型、缺陷严重程度、缺陷产生可能性、缺陷优先级、缺陷状态、缺陷起源、缺陷来源、缺陷原因。</p><p><strong>14测试结束的标准是什么？</strong></p><p>当这个软件彻底的消失以后，测试就结束了。</p><p><strong>15一个测试工程师应具备哪些素质？</strong></p><ul><li>责任心</li><li>沟通能力</li><li>团队合作精神</li><li>耐心、细心、信心</li><li>时时保持怀疑态度，并且有缺陷预防的意识</li><li>具备一定的编程经验</li></ul><p><strong>16你的测试职业发展目标是什么？</strong></p><p>我的职业发展：需要时间累积，一步步向着高级测试工程师的目标前进。前2年累积测试经验，不断的更新、改正自己，做好测试任务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/24/hello-world/"/>
      <url>2021/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引基础</title>
      <link href="2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h2><h3 id="三种数据结构"><a href="#三种数据结构" class="headerlink" title="三种数据结构"></a>三种数据结构</h3><ul><li>三种数据结构：哈希表，有序数组，搜索树；</li><li>哈希表结构适用于等值查询的场景</li><li>有序数组适用于静态存储引擎，查询多，改动少；</li><li>二叉搜索树:查找 O(logN)，插入也是O(logN)；</li></ul><h3 id="Innodb的索引模型"><a href="#Innodb的索引模型" class="headerlink" title="Innodb的索引模型"></a>Innodb的索引模型</h3><p>1.每一个索引在 innodb里对应一棵B+树；</p><p>2.根据叶子节点内容分：主键索引和非主键索引：</p><ul><li>主键索引：叶子节点存整行数据；</li><li>非主键索引：叶子节点存主键的值；</li></ul><p>3.<strong>提问：基于主键索引和普通索引的查询有什么区别？</strong></p><ul><li>查询语句：<code>select * from T where ID = 1</code>主键查询方式，只搜索ID这棵B+树；</li><li>查询语句：<code>select * from T where k = 1</code>，普通索引方式，先找k索引B+树，找到对应的ID，再找ID索引树。<strong>回表</strong>； </li></ul><p>4.普通索引的查询会多扫描一棵索引树；</p><p>5.Innodb是一棵N叉树，N的值是1200；</p><p>6.提问：一张没有主键的表，只有1个普通索引，查询时怎么回表？</p><p>   Innodb默认会将RowId作为主键；</p><p>7.思考题：<code>老师你好：之前看过一遍文章，一直有疑惑：一个innoDB引擎的表，数据量非常大，根据二级索引搜索会比主键搜索快，文章阐述的原因是主键索引和数据行在一起，非常大搜索慢，我的疑惑是：通过普通索引找到主键ID后，同样要跑一遍主键索引，还望老师解惑。。。</code></p><ol start="8"><li>B+树的插入可能会引起数据页的分裂，删除可能会引起数据页的合并，二者都是比较重的IO消耗，所以比较好的方式是顺序插入数据，这也是我们一般使用自增主键的原因之一。</li></ol><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>1.回表：回到主索引树搜索的过程，普通索引的查找就需要；</p><p>2.示例：<code>select ID from T where k between 3 and 5</code>，需要查找的ID在k索引树上已经存在了，可以直接获取结果，不需要回表。简而言之，在<strong>这个查询里索引k已经覆盖了查询需求，称为覆盖索引</strong></p><p>3.<strong>重点：覆盖索引可以减少树的搜索次数，提升查询性能，所以使用覆盖索引是常用的性能优化手段</strong>；</p><p>4.思考通过身份证号去查询姓名，在身份证号建立索引 和 （身份证号、姓名）联合索引对比？</p><p>   使用联合索引可用到覆盖索引，不需要回表查，减少了执行时间</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>1.B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录，最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符；</p><p>示例，查询（姓名，年龄）联合索引的表，找已张开头的数据<code>where name like &#39;张%&#39;</code>索引仍然有效</p><p>2.联合索引内的字段顺序如何安排？</p><p>   <strong>重点：第一原则，如果通过调整顺序，可以少维护一个索引，那么这个顺序就是优先考虑的</strong>，示例（a, b）联合索引，则不需要在a上建立索引了。</p><p>3.MySQL5.6之后引入了<strong>索引下推</strong>，在索引遍历过程中，对索引包含的字段进行判断，过滤掉不满足条件的记录，减少回表次数；</p><p>4.提问，什么情况下需要重建索引？</p><p>  索引因为删除，或者页分裂等原因，使得数据页有空洞，重建索引会创建新的索引，把数据按顺序插入，使得页面利用率最高。语句：<code>Alter table T engine=Innodb</code></p><p>示例：<code>让我想到了我们线上的一个表, 记录日志用的, 会定期删除过早之前的数据. 最后这个表实际内容的大小才10G, 而他的索引却有30G. 在阿里云控制面板上看,就是占了40G空间. 这可花的是真金白银啊.后来了解到是 InnoDB 这种引擎导致的,虽然删除了表的部分记录,但是它的索引还在, 并未释放.只能是重新建表才能重建索引.</code></p><h3 id="提问F-amp-Q"><a href="#提问F-amp-Q" class="headerlink" title="提问F&amp;Q"></a>提问F&amp;Q</h3><p>1.联合索引的技巧？（覆盖索引，最左前缀原则，索引下推）</p><p>2.<strong>好问题：</strong>老师，下面两条语句有什么区别，为什么都提倡使用2:<br>   <code>1.select * from T where k in(1,2,3,4,5)</code><br>   <code>2.select * from T where k between 1 and 5</code></p><p>   第1个树搜索5次，第2个树搜索1次。</p><h1 id="MySQL基础06-07"><a href="#MySQL基础06-07" class="headerlink" title="MySQL基础06-07"></a>MySQL基础06-07</h1><p>极客时间《MySQL实战45讲》</p><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p><strong>按照加锁范围，分为：全局锁、表级锁、行级锁</strong></p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>1.对整个数据库实例加锁，MySQL提供了加全局读锁的方法，命令<code>flush tables with read lock</code>（FTWRL），让库处于只读状态；</p><p>2.应用场景：全库逻辑备份；</p><p>3.备份期间不加锁有什么问题？得到的备份库不是一个逻辑时间点的，这个视图是逻辑不一致的；</p><p>4.给整个数据库加只读锁，为什么不用<code>set global readonly=true</code>的方式呢？</p><p> （a.readonly可能用于其他逻辑，比如判断是主库还是从库；b.异常处理机制上，如果客户端发生异常断开，FTWRL方式会自动释放全局锁，而设置readonly的方式，数据库会一直保持改状态）</p><p>5.备份方式，官方自带的逻辑备份工具mysqldump，使用参数<code>--single-transaction</code>时，会启动一个事务，确保拿到一致性视图。</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>1.MySQL里有2种表级锁：<strong>表锁、元数据锁</strong>（meta data lock，MDL）</p><p>2.表锁语法<code>lock tables ... read/write</code>，可通过<code>unlock tables</code>主动释放表锁，</p><p>3.lock tables不仅限制别的线程读写，也限制本线程的操作；</p><p>4.MDL锁是系统默认会加的，<strong>作用防止DDL和DML并发的冲突</strong>，保证读写正确性，对一个表做增删改查时，加MDL读锁；对表结构变更时，加MDL写锁；即（MDL不需要显示使用，在访问一个表时自动加上）</p><p>5.MDL直到数据提交才会释放；</p><p>5.<strong>思考：给一个小表加个字段，导致整个库挂了？</strong></p><p>​    原因：先查询，加了MDL读锁，再改表结构，加了MDL写锁，两个事务都没提交，导致后续操作会阻塞，如果客户端重试，库的线程很快爆满。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>MySQL的行锁由各个存储引擎自己实现，如MyISAM不支持行锁，任何一个更新都会锁住整张表</p><p>两阶段锁协议：Innodb事务中，行锁在需要的时候才加上，需要等到事务结束时才释放，而不是不需要了立刻释放；</p><p><strong>死锁和死锁检测</strong></p><p>并发系统中，不同线程出现循环资源依赖，都在等待其他线程释放资源时，会进入无限等待状态，即死锁。</p><p>死锁有2种策略解决：</p><p>1.进入等待，直到超时，可通过参数<code>innodb_lock_wait_timeout</code>来设置，默认50s；</p><p>2.发起死锁检测，发现死锁后，主动回滚死锁链中的一个事务，使得其他事务能执行，设置参数<code>innodb_deadlock_detect</code>为on开启死锁检测；</p><p><strong>死锁检测带来的问题？</strong></p><p><code>当一个事务被锁，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现循环等待，即死锁</code>。假设1000个线程同时更新同一行，死锁检测的操作就是100万量级的，结果：CPU利用率很高，每秒执行事务却很少。</p><p>上述问题解决方式：</p><p>1.控制并发度（客户端控制可能不太行，因为客户端会有多个，如果有中间件，在中间件控制）</p><p>2.从业务设计上进行优化，将一行的改动逻辑分成多行，减少锁冲突；</p><p><strong>提问：</strong></p><p>1.死锁检测什么时候执行？ 在事务需要加锁访问的行上有锁，才要检测；一致性读不会加锁，故不需要死锁检测；</p><p>2.Innodb行级锁通过锁索引记录实现，如果update的列没建索引，即使update一条记录也会锁整张表吗？</p><p>  （隔离级别是RR，会的；隔离级别是RC，不会，MySQL做了优化的）</p><h2 id="一致性读"><a href="#一致性读" class="headerlink" title="一致性读"></a>一致性读</h2><p>事务查询数据，在这期间，即使数据被改过，但是事务看到的数据结果都是一致的。称为一致性读。</p><p>判断逻辑：</p><p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，还有3种情况</p><p><code>1.版本未提交，不可见</code></p><p><code>2.版本已提交，但是是在视图创建后提交的，不可见；</code></p><p><code>3.版本已提交，且是在视图创建前提交的，可见;</code></p><p><strong>更新数据都是先读后写的，这个读只能读取当前值，即“当前读”</strong>。（更新和查询的区别）</p><p>例如：事务B执行更新语句，这期间事务C已经更新k=k+1，那么事务B更新时读到的k=2，更新后k=3;</p><p><strong>5.为什么rr能实现可重复读而rc不能,分两种情况</strong><br>(1)快照读的情况下,rr不能更新事务内的up_limit_id,<br>  而rc每次会把up_limit_id更新为快照读之前最新已提交事务的transaction id,则rc不能可重复读<br>(2)当前读的情况下,rr是利用record lock+gap lock来实现的,而rc没有gap,所以rc不能可重复读</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
