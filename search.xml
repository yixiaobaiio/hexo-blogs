<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件测试理论基础</title>
      <link href="2021/04/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>01什么是软件测试？软件测试的目的与原则是什么？</strong></p><p>在<strong>规定的条件下对程序进行操作</strong>，以发现<strong>程序错误</strong>，<strong>衡量软件质量</strong>，并对其是否能<strong>满足设计要求进行评估</strong>的过程。</p><p><strong>1）软件测试的目的：</strong></p><ul><li>想<strong>以最少的人力、物力和时间找出软件中潜在的各种错误和缺陷</strong>，通过<strong>修正各种错误和缺陷提高软件质量</strong>，回避软件发布后由于<strong>潜在的软件缺陷和错误造成的隐患</strong>所带来的商业风险</li><li>测试是以<strong>评价一个程序或者系统属性</strong>为目标的活动，测试是对<strong>软件质量的度量与评估</strong>，以<strong>验证软件的质量满足用户的需求的程度</strong>，为用户选择与接受软件提供有力的依据</li><li>通过分析错误产生的原因还可以<strong>帮助发现当前开发工作所采用的软件过程的缺陷，以便进行软件过程改进</strong>。同时，通过对测试结果的分析整理，还可以修正软件开发规则，并为软件可靠性分析提供了依据通过最终的验收测试，也可以<strong>证明软件满足了用户的需求，树立人们使用软件的信心。</strong></li></ul><p><strong>2）软件测试的原则：</strong></p><ul><li>所有的软件测试都应<strong>追溯到用户需求</strong></li><li>应当把“<strong>尽早地和不断地进行软件测试</strong>”作为软件测试者的座右铭</li><li>完全测试是不可能的，<strong>测试需要终止</strong></li><li>测试<strong>无法显示软件潜在的缺陷</strong></li><li>充分注意测试中的<strong>群集现象</strong></li><li><strong>程序员应避免检查自己的程序</strong></li><li><strong>尽量避免测试的随意性</strong></li></ul><p><strong>02目前主要的测试用例设计方法是什么？</strong></p><p><strong>1）白盒测试</strong>：逻辑覆盖、循环覆盖、基本路径覆盖。</p><p><strong>2）黑盒测试</strong>：边界值分析法、等价类划分、错误猜测法、因果图法、状态图法、测试大纲法、随机测试、场景法。</p><p><strong>03</strong>什么是<strong>测试用例</strong>? 什么是<strong>测试脚本</strong>? 两者的关系是什么？</p><p><strong>1）测试用例</strong>：为实施测试而向<strong>被测试系统提供的输入数据、操作或各种环境设置以及期望结果的一个特定的集合。</strong></p><p><strong>2）测试脚本</strong>：为了进行<strong>自动化测试而编写的脚本</strong>。</p><p><strong>3）关系</strong>：<strong>测试脚本的编写必须对应相应的测试用例</strong>。</p><p><strong>04简述什么是静态测试、动态测试、黑盒测试、白盒测试、α测试、β测试</strong></p><p><strong>1）静态测试</strong>是不运行程序本身而寻找程序代码中可能存在的错误或评估程序代码的过程。  </p><p><strong>2）动态测试</strong>是实际运行被测程序，输入相应的测试实例，检查运行结果与预期结果的差异，判定执行结果是否符合要求，从而检验程序的正确性、可靠性和有效性，并分析系统运行效率和健壮性等性能。</p><p><strong>3）黑盒测试</strong>一般用来<strong>确认软件功能的正确性和可操作性</strong>，目的是检测软件的各个功能是否能得以实现，把被测试的程序当作一个黑盒，不考虑其内部结构，在知道该程序的输入和输出之间的关系或程序功能的情况下，依靠软件规格说明书来确定测试用例和推断测试结果的正确性。</p><p><strong>4）白盒测试</strong>根据<strong>软件内部的逻辑结构分析来进行测试</strong>，是基于代码的测试，测试人员通过阅读程序代码或者通过使用开发工具中的单步调试来判断软件的质量，一般黑盒测试由项目经理在程序员开发中来实现。</p><p><strong>5）α测试</strong>是由一个用户在<strong>开发环境</strong>下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，α测试不能由程序员或测试员完成。</p><p><strong>6）β测试</strong>是软件的多个用户在一个或多个用户的<strong>实际使用环境</strong>下进行的测试。开发者通常不在测试现场，β测试不能由程序员或测试员完成。</p><p><strong>05软件测试的策略是什么？</strong></p><p><strong>软件测试策略</strong>：在一定的软件测试标准、测试规范的指导下，依据测试项目的特定环境约束而规定的软件测试的原则、方式、方法的集合。</p><p><strong>06软件测试各个阶段通常完成什么工作？各个阶段的结果文件是什么？包括什么内容？</strong></p><p><strong>1）单元测试阶段</strong>：各独立单元模块在与系统的其他部分相隔离的情况下进行测试，单元测试针对每一个程序模块进行正确性校验，检查各个程序模块是否正确地实现了规定的功能。生成单元测试报告，提交缺陷报告。</p><p><strong>2）集成测试阶段</strong>：集成测试是在单元测试的基础上，测试在将所有的软件单元按照概要设计规格说明的要求组装成模块、子系统或系统的过程中各部分工作是否达到或实现相应技术指标及要求的活动。该阶段生成集成测试报告，提交缺陷报告。</p><p><strong>3）系统测试阶段</strong>：将通过确认测试的软件，作为整个给予计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他系统元素结合在一起，在实际运行环境下，对计算机系统进行全面的功能覆盖。该阶段需要提交测试总结和缺陷报告。</p><p><strong>07测试人员在软件开发过程中的任务是什么？</strong></p><ul><li>尽可能早的找出系统中的Bug</li><li>避免软件开发过程中缺陷的出现</li><li>衡量软件的品质，保证系统的质量</li><li>关注用户的需求，并保证系统符合用户需求</li></ul><p><strong>总的目标是</strong>：确保软件的质量。</p><p><strong>08黑盒测试的测试用例常见设计方法都有哪些？请分别以具体的例子来说明</strong></p><p><strong>1）等价类划分</strong>：等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据。取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类。</p><p><strong>2）边界值分析法</strong>：是对等价类划分方法的补充。测试工作经验告诉我，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。</p><p>使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。</p><p><strong>3）错误猜测法</strong>：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法。</p><p>错误推测方法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。例如，在单元测试时曾列出的许多在模块中常见的错误。以前产品测试中曾经发现的错误等，这些就是经验的总结。还有输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行。这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。</p><p><strong>4）因果图方法</strong>：前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。考虑输入条件之间的相互组合，可能会产生一些新的情况。但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多。因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例。这就需要利用因果图（逻辑模型）。因果图方法最终生成的就是判定表。它适合于检查程序输入条件的各种组合情况。</p><p><strong>5）正交表分析法</strong>：可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。</p><p><strong>6）场景分析方法</strong>：指根据用户场景来模拟用户的操作步骤，这个比较类似因果图，但是可能执行的深度和可行性更好。 </p><p><strong>7）状态图法</strong>：通过输入条件和系统需求说明得到被测系统的所有状态，通过输入条件和状态得出输出条件；通过输入条件、输出条件和状态得出被测系统的测试用例。</p><p><strong>8）大纲法</strong>：大纲法是一种着眼于需求的方法，为了列出各种测试条件，就将需求转换为大纲的形式。大纲表示为树状结构，在根和每个叶子结点之间存在唯一的路径。大纲中的每条路径定义了一个特定的输入条件集合，用于定义测试用例。树中叶子的数目或大纲中的路径给出了测试所有功能所需测试用例的大致数量。</p><p><strong>09软件测试项目从什么时候开始？为什么？</strong> </p><p>软件测试应该在需求分析阶段就介入，因为测试的对象不仅仅是程序编码，应该对软件开发过程中产生的所有产品都测试，并且软件缺陷存在放大趋势，缺陷发现的越晚，修复它所花费的成本就越大。</p><p><strong>10</strong></p><p>什么是回归测试？</p><p>回归测试：回归测试有两类，用例回归和错误回归；用例回归是过一段时间以后再回头对以前使用过的用例在重新进行测试，看看会重新发现问题。错误回归，就是在新版本中，对以前版本中出现并修复的缺陷进行再次验证，并以缺陷为核心，对相关修改的部分进行测试的方法。</p><p><strong>11你认为做好测试计划工作的关键是什么？</strong></p><p><strong>1）明确测试的目标，增强测试计划的实用性。</strong></p><p>编写软件测试计划的重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果直观、准确。</p><p><strong>2）坚持“5W1H”规则，明确内容与过程。</strong></p><p>“5W1H”规则指的是“What（做什么）”、“Why（为什么做）”、“When（何时做）”、“Where（在哪里）”、“who（谁来做）”、“How（如何做）”。利用“5W1H”规则创建软件测试计划，可以帮助测试团队理解测试的目的（Why），明确测试的范围和内容（What），确定测试的开始和结束日期（When），确定项目有关人员（who），给出测试文档和软件的存放位置（Where）、指出测试的方法和工具（How）。</p><p><strong>3）采用评审和更新机制，保证测试计划满足实际需求。</strong></p><p>测试计划写作完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。</p><p><strong>4）分别创建测试计划与测试详细规格、测试用例。</strong></p><p>应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行测试过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。</p><p><strong>12一份测试计划应该包括哪些内容？</strong></p><p>背景、项目简介、目的、测试范围、测试策略、人员分工、资源要求、进度计划、参考文档、常用术语、提交文档、风险分析。 </p><p><strong>13缺陷记录应包含的内容？</strong></p><p>缺陷标识、缺陷类型、缺陷严重程度、缺陷产生可能性、缺陷优先级、缺陷状态、缺陷起源、缺陷来源、缺陷原因。</p><p><strong>14测试结束的标准是什么？</strong></p><p>当这个软件彻底的消失以后，测试就结束了。</p><p><strong>15一个测试工程师应具备哪些素质？</strong></p><ul><li>责任心</li><li>沟通能力</li><li>团队合作精神</li><li>耐心、细心、信心</li><li>时时保持怀疑态度，并且有缺陷预防的意识</li><li>具备一定的编程经验</li></ul><p><strong>16你的测试职业发展目标是什么？</strong></p><p>我的职业发展：需要时间累积，一步步向着高级测试工程师的目标前进。前2年累积测试经验，不断的更新、改正自己，做好测试任务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/24/hello-world/"/>
      <url>2021/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引基础</title>
      <link href="2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h2><h3 id="三种数据结构"><a href="#三种数据结构" class="headerlink" title="三种数据结构"></a>三种数据结构</h3><ul><li>三种数据结构：哈希表，有序数组，搜索树；</li><li>哈希表结构适用于等值查询的场景</li><li>有序数组适用于静态存储引擎，查询多，改动少；</li><li>二叉搜索树:查找 O(logN)，插入也是O(logN)；</li></ul><h3 id="Innodb的索引模型"><a href="#Innodb的索引模型" class="headerlink" title="Innodb的索引模型"></a>Innodb的索引模型</h3><p>1.每一个索引在 innodb里对应一棵B+树；</p><p>2.根据叶子节点内容分：主键索引和非主键索引：</p><ul><li>主键索引：叶子节点存整行数据；</li><li>非主键索引：叶子节点存主键的值；</li></ul><p>3.<strong>提问：基于主键索引和普通索引的查询有什么区别？</strong></p><ul><li>查询语句：<code>select * from T where ID = 1</code>主键查询方式，只搜索ID这棵B+树；</li><li>查询语句：<code>select * from T where k = 1</code>，普通索引方式，先找k索引B+树，找到对应的ID，再找ID索引树。<strong>回表</strong>； </li></ul><p>4.普通索引的查询会多扫描一棵索引树；</p><p>5.Innodb是一棵N叉树，N的值是1200；</p><p>6.提问：一张没有主键的表，只有1个普通索引，查询时怎么回表？</p><p>   Innodb默认会将RowId作为主键；</p><p>7.思考题：<code>老师你好：之前看过一遍文章，一直有疑惑：一个innoDB引擎的表，数据量非常大，根据二级索引搜索会比主键搜索快，文章阐述的原因是主键索引和数据行在一起，非常大搜索慢，我的疑惑是：通过普通索引找到主键ID后，同样要跑一遍主键索引，还望老师解惑。。。</code></p><ol start="8"><li>B+树的插入可能会引起数据页的分裂，删除可能会引起数据页的合并，二者都是比较重的IO消耗，所以比较好的方式是顺序插入数据，这也是我们一般使用自增主键的原因之一。</li></ol><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>1.回表：回到主索引树搜索的过程，普通索引的查找就需要；</p><p>2.示例：<code>select ID from T where k between 3 and 5</code>，需要查找的ID在k索引树上已经存在了，可以直接获取结果，不需要回表。简而言之，在<strong>这个查询里索引k已经覆盖了查询需求，称为覆盖索引</strong></p><p>3.<strong>重点：覆盖索引可以减少树的搜索次数，提升查询性能，所以使用覆盖索引是常用的性能优化手段</strong>；</p><p>4.思考通过身份证号去查询姓名，在身份证号建立索引 和 （身份证号、姓名）联合索引对比？</p><p>   使用联合索引可用到覆盖索引，不需要回表查，减少了执行时间</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>1.B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录，最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符；</p><p>示例，查询（姓名，年龄）联合索引的表，找已张开头的数据<code>where name like &#39;张%&#39;</code>索引仍然有效</p><p>2.联合索引内的字段顺序如何安排？</p><p>   <strong>重点：第一原则，如果通过调整顺序，可以少维护一个索引，那么这个顺序就是优先考虑的</strong>，示例（a, b）联合索引，则不需要在a上建立索引了。</p><p>3.MySQL5.6之后引入了<strong>索引下推</strong>，在索引遍历过程中，对索引包含的字段进行判断，过滤掉不满足条件的记录，减少回表次数；</p><p>4.提问，什么情况下需要重建索引？</p><p>  索引因为删除，或者页分裂等原因，使得数据页有空洞，重建索引会创建新的索引，把数据按顺序插入，使得页面利用率最高。语句：<code>Alter table T engine=Innodb</code></p><p>示例：<code>让我想到了我们线上的一个表, 记录日志用的, 会定期删除过早之前的数据. 最后这个表实际内容的大小才10G, 而他的索引却有30G. 在阿里云控制面板上看,就是占了40G空间. 这可花的是真金白银啊.后来了解到是 InnoDB 这种引擎导致的,虽然删除了表的部分记录,但是它的索引还在, 并未释放.只能是重新建表才能重建索引.</code></p><h3 id="提问F-amp-Q"><a href="#提问F-amp-Q" class="headerlink" title="提问F&amp;Q"></a>提问F&amp;Q</h3><p>1.联合索引的技巧？（覆盖索引，最左前缀原则，索引下推）</p><p>2.<strong>好问题：</strong>老师，下面两条语句有什么区别，为什么都提倡使用2:<br>   <code>1.select * from T where k in(1,2,3,4,5)</code><br>   <code>2.select * from T where k between 1 and 5</code></p><p>   第1个树搜索5次，第2个树搜索1次。</p><h1 id="MySQL基础06-07"><a href="#MySQL基础06-07" class="headerlink" title="MySQL基础06-07"></a>MySQL基础06-07</h1><p>极客时间《MySQL实战45讲》</p><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p><strong>按照加锁范围，分为：全局锁、表级锁、行级锁</strong></p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>1.对整个数据库实例加锁，MySQL提供了加全局读锁的方法，命令<code>flush tables with read lock</code>（FTWRL），让库处于只读状态；</p><p>2.应用场景：全库逻辑备份；</p><p>3.备份期间不加锁有什么问题？得到的备份库不是一个逻辑时间点的，这个视图是逻辑不一致的；</p><p>4.给整个数据库加只读锁，为什么不用<code>set global readonly=true</code>的方式呢？</p><p> （a.readonly可能用于其他逻辑，比如判断是主库还是从库；b.异常处理机制上，如果客户端发生异常断开，FTWRL方式会自动释放全局锁，而设置readonly的方式，数据库会一直保持改状态）</p><p>5.备份方式，官方自带的逻辑备份工具mysqldump，使用参数<code>--single-transaction</code>时，会启动一个事务，确保拿到一致性视图。</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>1.MySQL里有2种表级锁：<strong>表锁、元数据锁</strong>（meta data lock，MDL）</p><p>2.表锁语法<code>lock tables ... read/write</code>，可通过<code>unlock tables</code>主动释放表锁，</p><p>3.lock tables不仅限制别的线程读写，也限制本线程的操作；</p><p>4.MDL锁是系统默认会加的，<strong>作用防止DDL和DML并发的冲突</strong>，保证读写正确性，对一个表做增删改查时，加MDL读锁；对表结构变更时，加MDL写锁；即（MDL不需要显示使用，在访问一个表时自动加上）</p><p>5.MDL直到数据提交才会释放；</p><p>5.<strong>思考：给一个小表加个字段，导致整个库挂了？</strong></p><p>​    原因：先查询，加了MDL读锁，再改表结构，加了MDL写锁，两个事务都没提交，导致后续操作会阻塞，如果客户端重试，库的线程很快爆满。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>MySQL的行锁由各个存储引擎自己实现，如MyISAM不支持行锁，任何一个更新都会锁住整张表</p><p>两阶段锁协议：Innodb事务中，行锁在需要的时候才加上，需要等到事务结束时才释放，而不是不需要了立刻释放；</p><p><strong>死锁和死锁检测</strong></p><p>并发系统中，不同线程出现循环资源依赖，都在等待其他线程释放资源时，会进入无限等待状态，即死锁。</p><p>死锁有2种策略解决：</p><p>1.进入等待，直到超时，可通过参数<code>innodb_lock_wait_timeout</code>来设置，默认50s；</p><p>2.发起死锁检测，发现死锁后，主动回滚死锁链中的一个事务，使得其他事务能执行，设置参数<code>innodb_deadlock_detect</code>为on开启死锁检测；</p><p><strong>死锁检测带来的问题？</strong></p><p><code>当一个事务被锁，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现循环等待，即死锁</code>。假设1000个线程同时更新同一行，死锁检测的操作就是100万量级的，结果：CPU利用率很高，每秒执行事务却很少。</p><p>上述问题解决方式：</p><p>1.控制并发度（客户端控制可能不太行，因为客户端会有多个，如果有中间件，在中间件控制）</p><p>2.从业务设计上进行优化，将一行的改动逻辑分成多行，减少锁冲突；</p><p><strong>提问：</strong></p><p>1.死锁检测什么时候执行？ 在事务需要加锁访问的行上有锁，才要检测；一致性读不会加锁，故不需要死锁检测；</p><p>2.Innodb行级锁通过锁索引记录实现，如果update的列没建索引，即使update一条记录也会锁整张表吗？</p><p>  （隔离级别是RR，会的；隔离级别是RC，不会，MySQL做了优化的）</p><h2 id="一致性读"><a href="#一致性读" class="headerlink" title="一致性读"></a>一致性读</h2><p>事务查询数据，在这期间，即使数据被改过，但是事务看到的数据结果都是一致的。称为一致性读。</p><p>判断逻辑：</p><p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，还有3种情况</p><p><code>1.版本未提交，不可见</code></p><p><code>2.版本已提交，但是是在视图创建后提交的，不可见；</code></p><p><code>3.版本已提交，且是在视图创建前提交的，可见;</code></p><p><strong>更新数据都是先读后写的，这个读只能读取当前值，即“当前读”</strong>。（更新和查询的区别）</p><p>例如：事务B执行更新语句，这期间事务C已经更新k=k+1，那么事务B更新时读到的k=2，更新后k=3;</p><p><strong>5.为什么rr能实现可重复读而rc不能,分两种情况</strong><br>(1)快照读的情况下,rr不能更新事务内的up_limit_id,<br>  而rc每次会把up_limit_id更新为快照读之前最新已提交事务的transaction id,则rc不能可重复读<br>(2)当前读的情况下,rr是利用record lock+gap lock来实现的,而rc没有gap,所以rc不能可重复读</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
